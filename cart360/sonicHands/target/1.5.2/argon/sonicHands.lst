
/Users/amdevito/Documents/cart360/sonicHands/target/1.5.2/argon/sonicHands.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005a30  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9a50  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e260  000d9a54  0001e260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000051c  2003e2d8  2003e2d8  0002e2d8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d9ac8  000d9ac8  00029ac8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9af0  000d9af0  00029af0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00100ecc  00000000  00000000  00029af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000139d1  00000000  00000000  0012a9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00023504  00000000  00000000  0013e391  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c88  00000000  00000000  00161895  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005218  00000000  00000000  0016451d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00038b3a  00000000  00000000  00169735  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002ffa7  00000000  00000000  001a226f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00109e43  00000000  00000000  001d2216  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e33c  00000000  00000000  002dc05c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f87f 	bl	d9134 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f884 	bl	d914a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e260 	.word	0x2003e260
   d404c:	000d9a54 	.word	0x000d9a54
   d4050:	2003e2d4 	.word	0x2003e2d4
   d4054:	2003e2d8 	.word	0x2003e2d8
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 f83d 	bl	d70dc <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d9a50 	.word	0x000d9a50
   d4084:	000d9a0c 	.word	0x000d9a0c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b9ea 	b.w	d4460 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f8db 	bl	d4248 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 bfe3 	b.w	d7060 <_post_loop>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f001 be87 	b.w	d5dac <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 be8d 	b.w	d5dbc <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 be8b 	b.w	d5dbc <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d40b6:	4770      	bx	lr

000d40b8 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d40b8:	b510      	push	{r4, lr}
   d40ba:	4b06      	ldr	r3, [pc, #24]	; (d40d4 <_ZN3UDPD1Ev+0x1c>)
   d40bc:	6003      	str	r3, [r0, #0]
   d40be:	3364      	adds	r3, #100	; 0x64
   d40c0:	4604      	mov	r4, r0
   d40c2:	6103      	str	r3, [r0, #16]
   d40c4:	f002 fc3b 	bl	d693e <_ZN3UDP4stopEv>
   d40c8:	4620      	mov	r0, r4
   d40ca:	f002 fdfd 	bl	d6cc8 <_ZN3UDP13releaseBufferEv>
   d40ce:	4620      	mov	r0, r4
   d40d0:	bd10      	pop	{r4, pc}
   d40d2:	bf00      	nop
   d40d4:	000d9890 	.word	0x000d9890

000d40d8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40d8:	b510      	push	{r4, lr}
   d40da:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40dc:	6800      	ldr	r0, [r0, #0]
   d40de:	b108      	cbz	r0, d40e4 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40e0:	f001 fe6c 	bl	d5dbc <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40e4:	4620      	mov	r0, r4
   d40e6:	bd10      	pop	{r4, pc}

000d40e8 <_ZN9IPAddressD0Ev>:
   d40e8:	b510      	push	{r4, lr}
   d40ea:	2118      	movs	r1, #24
   d40ec:	4604      	mov	r4, r0
   d40ee:	f003 f8c4 	bl	d727a <_ZdlPvj>
   d40f2:	4620      	mov	r0, r4
   d40f4:	bd10      	pop	{r4, pc}

000d40f6 <_ZN3UDPD0Ev>:
   d40f6:	b510      	push	{r4, lr}
   d40f8:	4604      	mov	r4, r0
   d40fa:	f7ff ffdd 	bl	d40b8 <_ZN3UDPD1Ev>
   d40fe:	4620      	mov	r0, r4
   d4100:	214c      	movs	r1, #76	; 0x4c
   d4102:	f003 f8ba 	bl	d727a <_ZdlPvj>
   d4106:	4620      	mov	r0, r4
   d4108:	bd10      	pop	{r4, pc}

000d410a <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d410a:	6803      	ldr	r3, [r0, #0]
   d410c:	b2c9      	uxtb	r1, r1
   d410e:	689b      	ldr	r3, [r3, #8]
   d4110:	4718      	bx	r3
	...

000d4114 <_Z13accelerometerv>:
  //   //Udp.write(msg);
  //   //Udp.endPacket();
  // }
}

void accelerometer() {
   d4114:	b530      	push	{r4, r5, lr}
   d4116:	b09d      	sub	sp, #116	; 0x74

  OSCMessage outMessage("/accelerometer");
   d4118:	4916      	ldr	r1, [pc, #88]	; (d4174 <_Z13accelerometerv+0x60>)

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d411a:	4d17      	ldr	r5, [pc, #92]	; (d4178 <_Z13accelerometerv+0x64>)
   d411c:	a807      	add	r0, sp, #28
   d411e:	f001 fa75 	bl	d560c <_ZN10OSCMessageC1EPKc>
  //outMessage.addFloat(-3.14);
  outMessage.addFloat(X_out); //random(0, 4096)
   d4122:	4b16      	ldr	r3, [pc, #88]	; (d417c <_Z13accelerometerv+0x68>)
   d4124:	a807      	add	r0, sp, #28
   d4126:	ed93 0a00 	vldr	s0, [r3]
   d412a:	f001 fab0 	bl	d568e <_ZN10OSCMessage8addFloatEf>
  outMessage.addFloat(Y_out);//random(0, 4096)
   d412e:	4b14      	ldr	r3, [pc, #80]	; (d4180 <_Z13accelerometerv+0x6c>)
   d4130:	a807      	add	r0, sp, #28
   d4132:	ed93 0a00 	vldr	s0, [r3]
   d4136:	f001 faaa 	bl	d568e <_ZN10OSCMessage8addFloatEf>
  outMessage.addFloat(Z_out);//random(0, 4096)
   d413a:	4b12      	ldr	r3, [pc, #72]	; (d4184 <_Z13accelerometerv+0x70>)
   d413c:	a807      	add	r0, sp, #28
   d413e:	ed93 0a00 	vldr	s0, [r3]
   d4142:	f001 faa4 	bl	d568e <_ZN10OSCMessage8addFloatEf>
   d4146:	4b10      	ldr	r3, [pc, #64]	; (d4188 <_Z13accelerometerv+0x74>)
   d4148:	9301      	str	r3, [sp, #4]
   d414a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d414c:	ac02      	add	r4, sp, #8
   d414e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4150:	682b      	ldr	r3, [r5, #0]
  outMessage.send( Udp, remoteIP, 8000 );//192,168,0,103
   d4152:	490e      	ldr	r1, [pc, #56]	; (d418c <_Z13accelerometerv+0x78>)
   d4154:	7023      	strb	r3, [r4, #0]
   d4156:	aa01      	add	r2, sp, #4
   d4158:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   d415c:	a807      	add	r0, sp, #28
   d415e:	f001 fac1 	bl	d56e4 <_ZN10OSCMessage4sendER3UDP9IPAddressj>
  delay(500);//can take this out later to give more values
   d4162:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4166:	f001 fe49 	bl	d5dfc <delay>
  // }
}

void accelerometer() {

  OSCMessage outMessage("/accelerometer");
   d416a:	a807      	add	r0, sp, #28
   d416c:	f001 fa72 	bl	d5654 <_ZN10OSCMessageD1Ev>
  outMessage.addFloat(X_out); //random(0, 4096)
  outMessage.addFloat(Y_out);//random(0, 4096)
  outMessage.addFloat(Z_out);//random(0, 4096)
  outMessage.send( Udp, remoteIP, 8000 );//192,168,0,103
  delay(500);//can take this out later to give more values
}
   d4170:	b01d      	add	sp, #116	; 0x74
   d4172:	bd30      	pop	{r4, r5, pc}
   d4174:	000d91f5 	.word	0x000d91f5
   d4178:	2003e2fc 	.word	0x2003e2fc
   d417c:	2003e39c 	.word	0x2003e39c
   d4180:	2003e2f4 	.word	0x2003e2f4
   d4184:	2003e31c 	.word	0x2003e31c
   d4188:	000d9704 	.word	0x000d9704
   d418c:	2003e348 	.word	0x2003e348

000d4190 <_Z10flexSensorv>:

void flexSensor() {
   d4190:	b530      	push	{r4, r5, lr}
   d4192:	b09d      	sub	sp, #116	; 0x74

  OSCMessage outMessage("/flexSensor");
   d4194:	4910      	ldr	r1, [pc, #64]	; (d41d8 <_Z10flexSensorv+0x48>)
   d4196:	4d11      	ldr	r5, [pc, #68]	; (d41dc <_Z10flexSensorv+0x4c>)
   d4198:	a807      	add	r0, sp, #28
   d419a:	f001 fa37 	bl	d560c <_ZN10OSCMessageC1EPKc>
  //outMessage.addFloat(-3.14);
  outMessage.addFloat(flexValue);
   d419e:	4b10      	ldr	r3, [pc, #64]	; (d41e0 <_Z10flexSensorv+0x50>)
   d41a0:	a807      	add	r0, sp, #28
   d41a2:	ed93 0a00 	vldr	s0, [r3]
   d41a6:	f001 fa72 	bl	d568e <_ZN10OSCMessage8addFloatEf>
   d41aa:	4b0e      	ldr	r3, [pc, #56]	; (d41e4 <_Z10flexSensorv+0x54>)
   d41ac:	9301      	str	r3, [sp, #4]
   d41ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d41b0:	ac02      	add	r4, sp, #8
   d41b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d41b4:	682b      	ldr	r3, [r5, #0]
  // outMessage.addFloat(random(0, 4096));
  // outMessage.addFloat(random(0, 4096));
  outMessage.send( Udp, remoteIP, 8000 );
   d41b6:	490c      	ldr	r1, [pc, #48]	; (d41e8 <_Z10flexSensorv+0x58>)
   d41b8:	7023      	strb	r3, [r4, #0]
   d41ba:	aa01      	add	r2, sp, #4
   d41bc:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   d41c0:	a807      	add	r0, sp, #28
   d41c2:	f001 fa8f 	bl	d56e4 <_ZN10OSCMessage4sendER3UDP9IPAddressj>
  delay(500);//take this out later
   d41c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d41ca:	f001 fe17 	bl	d5dfc <delay>
  delay(500);//can take this out later to give more values
}

void flexSensor() {

  OSCMessage outMessage("/flexSensor");
   d41ce:	a807      	add	r0, sp, #28
   d41d0:	f001 fa40 	bl	d5654 <_ZN10OSCMessageD1Ev>
  outMessage.addFloat(flexValue);
  // outMessage.addFloat(random(0, 4096));
  // outMessage.addFloat(random(0, 4096));
  outMessage.send( Udp, remoteIP, 8000 );
  delay(500);//take this out later
}
   d41d4:	b01d      	add	sp, #116	; 0x74
   d41d6:	bd30      	pop	{r4, r5, pc}
   d41d8:	000d9204 	.word	0x000d9204
   d41dc:	2003e2fc 	.word	0x2003e2fc
   d41e0:	2003e398 	.word	0x2003e398
   d41e4:	000d9704 	.word	0x000d9704
   d41e8:	2003e348 	.word	0x2003e348

000d41ec <_Z11flexSensor2v>:

void flexSensor2() {
   d41ec:	b530      	push	{r4, r5, lr}
   d41ee:	b09d      	sub	sp, #116	; 0x74

  OSCMessage outMessage("/flexSensorTwo");
   d41f0:	4910      	ldr	r1, [pc, #64]	; (d4234 <_Z11flexSensor2v+0x48>)
   d41f2:	4d11      	ldr	r5, [pc, #68]	; (d4238 <_Z11flexSensor2v+0x4c>)
   d41f4:	a807      	add	r0, sp, #28
   d41f6:	f001 fa09 	bl	d560c <_ZN10OSCMessageC1EPKc>
  //outMessage.addFloat(-3.14);
  outMessage.addFloat(flexValue2);
   d41fa:	4b10      	ldr	r3, [pc, #64]	; (d423c <_Z11flexSensor2v+0x50>)
   d41fc:	a807      	add	r0, sp, #28
   d41fe:	ed93 0a00 	vldr	s0, [r3]
   d4202:	f001 fa44 	bl	d568e <_ZN10OSCMessage8addFloatEf>
   d4206:	4b0e      	ldr	r3, [pc, #56]	; (d4240 <_Z11flexSensor2v+0x54>)
   d4208:	9301      	str	r3, [sp, #4]
   d420a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d420c:	ac02      	add	r4, sp, #8
   d420e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4210:	682b      	ldr	r3, [r5, #0]
  // outMessage.addFloat(random(0, 4096));
  // outMessage.addFloat(random(0, 4096));
  outMessage.send( Udp, remoteIP, 8000 );
   d4212:	490c      	ldr	r1, [pc, #48]	; (d4244 <_Z11flexSensor2v+0x58>)
   d4214:	7023      	strb	r3, [r4, #0]
   d4216:	aa01      	add	r2, sp, #4
   d4218:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   d421c:	a807      	add	r0, sp, #28
   d421e:	f001 fa61 	bl	d56e4 <_ZN10OSCMessage4sendER3UDP9IPAddressj>
  delay(500);//take this out later
   d4222:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4226:	f001 fde9 	bl	d5dfc <delay>
  delay(500);//take this out later
}

void flexSensor2() {

  OSCMessage outMessage("/flexSensorTwo");
   d422a:	a807      	add	r0, sp, #28
   d422c:	f001 fa12 	bl	d5654 <_ZN10OSCMessageD1Ev>
  outMessage.addFloat(flexValue2);
  // outMessage.addFloat(random(0, 4096));
  // outMessage.addFloat(random(0, 4096));
  outMessage.send( Udp, remoteIP, 8000 );
  delay(500);//take this out later
}
   d4230:	b01d      	add	sp, #116	; 0x74
   d4232:	bd30      	pop	{r4, r5, pc}
   d4234:	000d9210 	.word	0x000d9210
   d4238:	2003e2fc 	.word	0x2003e2fc
   d423c:	2003e394 	.word	0x2003e394
   d4240:	000d9704 	.word	0x000d9704
   d4244:	2003e348 	.word	0x2003e348

000d4248 <loop>:
  drv.setWaveform(2, 0);  // end of waveforms
  //end of driver motor set up
}


void loop() {
   d4248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  //read accelerometer data//
  Wire.beginTransmission(ADXL345);
   d424a:	4c5b      	ldr	r4, [pc, #364]	; (d43b8 <loop+0x170>)
  Wire.write(0x32); //start with register 0x32 (ACCEL_XOUT_H)
  Wire.endTransmission(false);
  Wire.requestFrom(ADXL345, 6, true); // Read 6 registers total, each axis value is stored in 2 registers
 
  X_out = ( Wire.read() | Wire.read() << 8); // x-axis value
  X_out = X_out/256; //For a range of +-2g, we need to divide the raw values by 256, according to the datasheet
   d424c:	4f5b      	ldr	r7, [pc, #364]	; (d43bc <loop+0x174>)
  
  Y_out = ( Wire.read() | Wire.read() << 8); // Y-axis value
  Y_out = Y_out/256;
   d424e:	4e5c      	ldr	r6, [pc, #368]	; (d43c0 <loop+0x178>)

  Z_out = ( Wire.read() | Wire.read() << 8); // z-axis value
  Z_out = Z_out/256;
   d4250:	4d5c      	ldr	r5, [pc, #368]	; (d43c4 <loop+0x17c>)
  drv.setWaveform(2, 0);  // end of waveforms
  //end of driver motor set up
}


void loop() {
   d4252:	ed2d 8b02 	vpush	{d8}
  //read accelerometer data//
  Wire.beginTransmission(ADXL345);
   d4256:	f002 ffe5 	bl	d7224 <_Z19__fetch_global_Wirev>
   d425a:	6821      	ldr	r1, [r4, #0]
  Wire.write(0x32); //start with register 0x32 (ACCEL_XOUT_H)
  Wire.endTransmission(false);
  Wire.requestFrom(ADXL345, 6, true); // Read 6 registers total, each axis value is stored in 2 registers
 
  X_out = ( Wire.read() | Wire.read() << 8); // x-axis value
  X_out = X_out/256; //For a range of +-2g, we need to divide the raw values by 256, according to the datasheet
   d425c:	ed9f 8a5a 	vldr	s16, [pc, #360]	; d43c8 <loop+0x180>
}


void loop() {
  //read accelerometer data//
  Wire.beginTransmission(ADXL345);
   d4260:	f001 fead 	bl	d5fbe <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x32); //start with register 0x32 (ACCEL_XOUT_H)
   d4264:	f002 ffde 	bl	d7224 <_Z19__fetch_global_Wirev>
   d4268:	2132      	movs	r1, #50	; 0x32
   d426a:	f7ff ff4e 	bl	d410a <_ZN7TwoWire5writeEi>
  Wire.endTransmission(false);
   d426e:	f002 ffd9 	bl	d7224 <_Z19__fetch_global_Wirev>
   d4272:	2100      	movs	r1, #0
   d4274:	f001 fea6 	bl	d5fc4 <_ZN7TwoWire15endTransmissionEh>
  Wire.requestFrom(ADXL345, 6, true); // Read 6 registers total, each axis value is stored in 2 registers
   d4278:	f002 ffd4 	bl	d7224 <_Z19__fetch_global_Wirev>
   d427c:	2206      	movs	r2, #6
   d427e:	7821      	ldrb	r1, [r4, #0]
   d4280:	2301      	movs	r3, #1
   d4282:	f001 fe83 	bl	d5f8c <_ZN7TwoWire11requestFromEhjh>
 
  X_out = ( Wire.read() | Wire.read() << 8); // x-axis value
   d4286:	f002 ffcd 	bl	d7224 <_Z19__fetch_global_Wirev>
   d428a:	6803      	ldr	r3, [r0, #0]
   d428c:	695b      	ldr	r3, [r3, #20]
   d428e:	4798      	blx	r3
   d4290:	4604      	mov	r4, r0
   d4292:	f002 ffc7 	bl	d7224 <_Z19__fetch_global_Wirev>
   d4296:	6803      	ldr	r3, [r0, #0]
   d4298:	695b      	ldr	r3, [r3, #20]
   d429a:	4798      	blx	r3
  X_out = X_out/256; //For a range of +-2g, we need to divide the raw values by 256, according to the datasheet
   d429c:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   d42a0:	ee07 0a90 	vmov	s15, r0
   d42a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d42a8:	ee27 7a08 	vmul.f32	s14, s14, s16
   d42ac:	ed87 7a00 	vstr	s14, [r7]
  
  Y_out = ( Wire.read() | Wire.read() << 8); // Y-axis value
   d42b0:	f002 ffb8 	bl	d7224 <_Z19__fetch_global_Wirev>
   d42b4:	6803      	ldr	r3, [r0, #0]
   d42b6:	695b      	ldr	r3, [r3, #20]
   d42b8:	4798      	blx	r3
   d42ba:	4604      	mov	r4, r0
   d42bc:	f002 ffb2 	bl	d7224 <_Z19__fetch_global_Wirev>
   d42c0:	6803      	ldr	r3, [r0, #0]
   d42c2:	695b      	ldr	r3, [r3, #20]
   d42c4:	4798      	blx	r3
  Y_out = Y_out/256;
   d42c6:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   d42ca:	ee07 0a90 	vmov	s15, r0
   d42ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d42d2:	ee27 7a08 	vmul.f32	s14, s14, s16
   d42d6:	ed86 7a00 	vstr	s14, [r6]

  Z_out = ( Wire.read() | Wire.read() << 8); // z-axis value
   d42da:	f002 ffa3 	bl	d7224 <_Z19__fetch_global_Wirev>
   d42de:	6803      	ldr	r3, [r0, #0]
   d42e0:	695b      	ldr	r3, [r3, #20]
   d42e2:	4798      	blx	r3
   d42e4:	4604      	mov	r4, r0
   d42e6:	f002 ff9d 	bl	d7224 <_Z19__fetch_global_Wirev>
   d42ea:	6803      	ldr	r3, [r0, #0]
   d42ec:	695b      	ldr	r3, [r3, #20]
   d42ee:	4798      	blx	r3
  Z_out = Z_out/256;
   d42f0:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   d42f4:	ee07 0a90 	vmov	s15, r0
   d42f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15

// Serial.print(remoteIP);

//read flexSensor Data
//  int flexValue;
 flexValue = analogRead(flexPin);
   d42fc:	4c33      	ldr	r4, [pc, #204]	; (d43cc <loop+0x184>)
  
  Y_out = ( Wire.read() | Wire.read() << 8); // Y-axis value
  Y_out = Y_out/256;

  Z_out = ( Wire.read() | Wire.read() << 8); // z-axis value
  Z_out = Z_out/256;
   d42fe:	ee67 7a88 	vmul.f32	s15, s15, s16
   d4302:	edc5 7a00 	vstr	s15, [r5]

  Serial.print("Xa= ");
   d4306:	f002 fe29 	bl	d6f5c <_Z16_fetch_usbserialv>
   d430a:	4931      	ldr	r1, [pc, #196]	; (d43d0 <loop+0x188>)
   d430c:	f002 f884 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.print(X_out);
   d4310:	f002 fe24 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4314:	ed97 0a00 	vldr	s0, [r7]
   d4318:	2102      	movs	r1, #2
   d431a:	f002 f979 	bl	d6610 <_ZN5Print5printEfi>
  Serial.print("   Ya= ");
   d431e:	f002 fe1d 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4322:	492c      	ldr	r1, [pc, #176]	; (d43d4 <loop+0x18c>)
   d4324:	f002 f878 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.print(Y_out);
   d4328:	f002 fe18 	bl	d6f5c <_Z16_fetch_usbserialv>
   d432c:	ed96 0a00 	vldr	s0, [r6]
   d4330:	2102      	movs	r1, #2
   d4332:	f002 f96d 	bl	d6610 <_ZN5Print5printEfi>
  Serial.print("   Za= ");
   d4336:	f002 fe11 	bl	d6f5c <_Z16_fetch_usbserialv>
   d433a:	4927      	ldr	r1, [pc, #156]	; (d43d8 <loop+0x190>)
   d433c:	f002 f86c 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(Z_out);
   d4340:	f002 fe0c 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4344:	ed95 0a00 	vldr	s0, [r5]
   d4348:	2102      	movs	r1, #2
   d434a:	f002 f97e 	bl	d664a <_ZN5Print7printlnEfi>

accelerometer();
   d434e:	f7ff fee1 	bl	d4114 <_Z13accelerometerv>

// Serial.print(remoteIP);

//read flexSensor Data
//  int flexValue;
 flexValue = analogRead(flexPin);
   d4352:	2013      	movs	r0, #19
   d4354:	f002 ff35 	bl	d71c2 <analogRead>
   d4358:	ee07 0a90 	vmov	s15, r0
   d435c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4360:	edc4 7a00 	vstr	s15, [r4]
 Serial.print("sensor: ");
   d4364:	f002 fdfa 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4368:	491c      	ldr	r1, [pc, #112]	; (d43dc <loop+0x194>)
   d436a:	f002 f855 	bl	d6418 <_ZN5Print5printEPKc>
 Serial.println(flexValue);
   d436e:	f002 fdf5 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4372:	ed94 0a00 	vldr	s0, [r4]

  flexValue2 = analogRead(flexPin2);
   d4376:	4c1a      	ldr	r4, [pc, #104]	; (d43e0 <loop+0x198>)

//read flexSensor Data
//  int flexValue;
 flexValue = analogRead(flexPin);
 Serial.print("sensor: ");
 Serial.println(flexValue);
   d4378:	2102      	movs	r1, #2
   d437a:	f002 f966 	bl	d664a <_ZN5Print7printlnEfi>

  flexValue2 = analogRead(flexPin2);
   d437e:	2012      	movs	r0, #18
   d4380:	f002 ff1f 	bl	d71c2 <analogRead>
   d4384:	ee07 0a90 	vmov	s15, r0
   d4388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d438c:	edc4 7a00 	vstr	s15, [r4]
 Serial.print("sensor2: ");
   d4390:	f002 fde4 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4394:	4913      	ldr	r1, [pc, #76]	; (d43e4 <loop+0x19c>)
   d4396:	f002 f83f 	bl	d6418 <_ZN5Print5printEPKc>
 Serial.println(flexValue2);
   d439a:	f002 fddf 	bl	d6f5c <_Z16_fetch_usbserialv>
   d439e:	ed94 0a00 	vldr	s0, [r4]
   d43a2:	2102      	movs	r1, #2
   d43a4:	f002 f951 	bl	d664a <_ZN5Print7printlnEfi>

 flexSensor();
   d43a8:	f7ff fef2 	bl	d4190 <_Z10flexSensorv>
  // outMessage.addInt(random(0, 4096));
  // outMessage.addInt(random(0, 4096));
  // outMessage.addInt(random(0, 4096));
  // outMessage.send( Udp, remoteIP, 8000 );
  // delay(500);
}
   d43ac:	ecbd 8b02 	vpop	{d8}
   d43b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  flexValue2 = analogRead(flexPin2);
 Serial.print("sensor2: ");
 Serial.println(flexValue2);

 flexSensor();
 flexSensor2();
   d43b4:	f7ff bf1a 	b.w	d41ec <_Z11flexSensor2v>
   d43b8:	2003e264 	.word	0x2003e264
   d43bc:	2003e39c 	.word	0x2003e39c
   d43c0:	2003e2f4 	.word	0x2003e2f4
   d43c4:	2003e31c 	.word	0x2003e31c
   d43c8:	3b800000 	.word	0x3b800000
   d43cc:	2003e398 	.word	0x2003e398
   d43d0:	000d921f 	.word	0x000d921f
   d43d4:	000d9224 	.word	0x000d9224
   d43d8:	000d922c 	.word	0x000d922c
   d43dc:	000d9234 	.word	0x000d9234
   d43e0:	2003e394 	.word	0x2003e394
   d43e4:	000d923d 	.word	0x000d923d

000d43e8 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d43e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d43ec:	4607      	mov	r7, r0
   d43ee:	460c      	mov	r4, r1
{
    if (base == 0) {
   d43f0:	4615      	mov	r5, r2
   d43f2:	b92a      	cbnz	r2, d4400 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d43f4:	6803      	ldr	r3, [r0, #0]
   d43f6:	b2c9      	uxtb	r1, r1
   d43f8:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d43fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d43fe:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4400:	2900      	cmp	r1, #0
   d4402:	da07      	bge.n	d4414 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d4404:	2a0a      	cmp	r2, #10
   d4406:	d105      	bne.n	d4414 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d4408:	212d      	movs	r1, #45	; 0x2d
   d440a:	f002 f809 	bl	d6420 <_ZN5Print5printEc>
            val = -n;
   d440e:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d4410:	4606      	mov	r6, r0
            val = -n;
   d4412:	e001      	b.n	d4418 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d4414:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d4416:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4418:	b2ea      	uxtb	r2, r5
   d441a:	4638      	mov	r0, r7
   d441c:	f002 f819 	bl	d6452 <_ZN5Print11printNumberEmh>
    }
}
   d4420:	4430      	add	r0, r6
   d4422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4426 <_ZN5Print7printlnIiLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
   d4426:	b538      	push	{r3, r4, r5, lr}
   d4428:	4605      	mov	r5, r0
        size_t n = print(b, base);
   d442a:	f7ff ffdd 	bl	d43e8 <_ZN5Print5printIiLi0EEEjT_i>
   d442e:	4604      	mov	r4, r0
        n += println();
   d4430:	4628      	mov	r0, r5
   d4432:	f001 fff8 	bl	d6426 <_ZN5Print7printlnEv>
        return n;
    }
   d4436:	4420      	add	r0, r4
   d4438:	bd38      	pop	{r3, r4, r5, pc}

000d443a <_ZN5Print7printlnIbLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
   d443a:	b538      	push	{r3, r4, r5, lr}
   d443c:	4605      	mov	r5, r0

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d443e:	b91a      	cbnz	r2, d4448 <_ZN5Print7printlnIbLi0EEEjT_i+0xe>
        return write(n);
   d4440:	6803      	ldr	r3, [r0, #0]
   d4442:	689b      	ldr	r3, [r3, #8]
   d4444:	4798      	blx	r3
   d4446:	e002      	b.n	d444e <_ZN5Print7printlnIbLi0EEEjT_i+0x14>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4448:	b2d2      	uxtb	r2, r2
   d444a:	f002 f802 	bl	d6452 <_ZN5Print11printNumberEmh>
   d444e:	4604      	mov	r4, r0
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4450:	4628      	mov	r0, r5
   d4452:	f001 ffe8 	bl	d6426 <_ZN5Print7printlnEv>
        return n;
    }
   d4456:	4420      	add	r0, r4
   d4458:	bd38      	pop	{r3, r4, r5, pc}
   d445a:	0000      	movs	r0, r0
   d445c:	0000      	movs	r0, r0
	...

000d4460 <setup>:
        Particle.connect();
    }
    if(Particle.connected()) cloudConnected = true;
}

void setup() {
   d4460:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4462:	b099      	sub	sp, #100	; 0x64
  Serial.begin(57600);
   d4464:	f002 fd7a 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4468:	f44f 4161 	mov.w	r1, #57600	; 0xe100
   d446c:	f002 fd64 	bl	d6f38 <_ZN9USBSerial5beginEl>
  while(!Serial);
   d4470:	f002 fd74 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4474:	f002 fd67 	bl	d6f46 <_ZN9USBSerialcvbEv>
   d4478:	2800      	cmp	r0, #0
   d447a:	d0f9      	beq.n	d4470 <setup+0x10>

  pinMode(DEEBUG, OUTPUT);
   d447c:	2101      	movs	r1, #1
   d447e:	2007      	movs	r0, #7
   d4480:	4ccb      	ldr	r4, [pc, #812]	; (d47b0 <setup+0x350>)
   d4482:	f002 fe8d 	bl	d71a0 <pinMode>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4486:	2300      	movs	r3, #0
   d4488:	461a      	mov	r2, r3
   d448a:	4619      	mov	r1, r3
   d448c:	6860      	ldr	r0, [r4, #4]
   d448e:	f001 fc3d 	bl	d5d0c <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4492:	2200      	movs	r2, #0
   d4494:	4611      	mov	r1, r2
   d4496:	6860      	ldr	r0, [r4, #4]
   d4498:	f001 fc50 	bl	d5d3c <network_ready>
  /* IF NOT CONFIGURED FOR ROUTER - THEN THIS */
  //WiFi.setCredentials("My_Router", "mypasswordishuge");

  /* IF ALREADY CONFIGURED FOR SPECFIC ROUTER - THEN THIS */
  WiFi.connect();
  while(!WiFi.ready());
   d449c:	2800      	cmp	r0, #0
   d449e:	d0f8      	beq.n	d4492 <setup+0x32>
     IPAddress netmask(255,255,255,0);
     IPAddress gateway(10,0,1,1);
     IPAddress dns(10,0,1,1);
     WiFi.setStaticIP(myAddress, netmask, gateway, dns);
*/
  Udp.begin(inPort);
   d44a0:	4bc4      	ldr	r3, [pc, #784]	; (d47b4 <setup+0x354>)
   d44a2:	48c5      	ldr	r0, [pc, #788]	; (d47b8 <setup+0x358>)
   d44a4:	8819      	ldrh	r1, [r3, #0]
   d44a6:	4fc5      	ldr	r7, [pc, #788]	; (d47bc <setup+0x35c>)
   d44a8:	2200      	movs	r2, #0
   d44aa:	f002 f9fa 	bl	d68a2 <_ZN3UDP5beginEtm>
     Serial.print("ARGON: ");
     Serial.println(WiFi.hostname());
  */

 /* GET HOST (ARGON) IP */
  Serial.print("ARGON IP (DHCP): ");
   d44ae:	f002 fd55 	bl	d6f5c <_Z16_fetch_usbserialv>
   d44b2:	49c3      	ldr	r1, [pc, #780]	; (d47c0 <setup+0x360>)
   d44b4:	f001 ffb0 	bl	d6418 <_ZN5Print5printEPKc>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
   d44b8:	4bbd      	ldr	r3, [pc, #756]	; (d47b0 <setup+0x350>)
   d44ba:	2200      	movs	r2, #0
   d44bc:	4611      	mov	r1, r2
   d44be:	6858      	ldr	r0, [r3, #4]
   d44c0:	f001 fc1c 	bl	d5cfc <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
   d44c4:	ae12      	add	r6, sp, #72	; 0x48
   d44c6:	1c81      	adds	r1, r0, #2
   d44c8:	ad13      	add	r5, sp, #76	; 0x4c
   d44ca:	4630      	mov	r0, r6
   d44cc:	f001 fdc6 	bl	d605c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d44d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d44d2:	1d3c      	adds	r4, r7, #4
   d44d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d44d6:	682b      	ldr	r3, [r5, #0]
  argonIP = WiFi.localIP();
  sprintf(argonIPAddress, "%d.%d.%d.%d", argonIP[0], argonIP[1], argonIP[2], argonIP[3]);
   d44d8:	7939      	ldrb	r1, [r7, #4]
   d44da:	79fa      	ldrb	r2, [r7, #7]
   d44dc:	7023      	strb	r3, [r4, #0]
   d44de:	79bb      	ldrb	r3, [r7, #6]
   d44e0:	9101      	str	r1, [sp, #4]
   d44e2:	7979      	ldrb	r1, [r7, #5]
   d44e4:	9100      	str	r1, [sp, #0]
   d44e6:	48b7      	ldr	r0, [pc, #732]	; (d47c4 <setup+0x364>)
   d44e8:	49b7      	ldr	r1, [pc, #732]	; (d47c8 <setup+0x368>)
   d44ea:	f001 fc77 	bl	d5ddc <sprintf>
  Serial.println(argonIPAddress);
   d44ee:	f002 fd35 	bl	d6f5c <_Z16_fetch_usbserialv>
   d44f2:	49b4      	ldr	r1, [pc, #720]	; (d47c4 <setup+0x364>)
   d44f4:	f001 ffa3 	bl	d643e <_ZN5Print7printlnEPKc>
  delay(5000);
   d44f8:	f241 3088 	movw	r0, #5000	; 0x1388
   d44fc:	f001 fc7e 	bl	d5dfc <delay>

//accelerometer setup
    int x, y, z, i;
  double xyz[3], gains[3], gains_orig[3];

  Serial.begin(57600);
   d4500:	f002 fd2c 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4504:	f44f 4161 	mov.w	r1, #57600	; 0xe100
   d4508:	f002 fd16 	bl	d6f38 <_ZN9USBSerial5beginEl>
  Serial.println("");
   d450c:	f002 fd26 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4510:	49ae      	ldr	r1, [pc, #696]	; (d47cc <setup+0x36c>)
   d4512:	f001 ff94 	bl	d643e <_ZN5Print7printlnEPKc>
  accel.powerOn();
   d4516:	48ae      	ldr	r0, [pc, #696]	; (d47d0 <setup+0x370>)
   d4518:	f000 fd34 	bl	d4f84 <_ZN7ADXL3457powerOnEv>
  
  accel.getAxisGains(gains_orig);
   d451c:	4631      	mov	r1, r6
   d451e:	48ac      	ldr	r0, [pc, #688]	; (d47d0 <setup+0x370>)
   d4520:	f000 fddb 	bl	d50da <_ZN7ADXL34512getAxisGainsEPd>
  Serial.println("gains_orig[]:");
   d4524:	f002 fd1a 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4528:	49aa      	ldr	r1, [pc, #680]	; (d47d4 <setup+0x374>)
   d452a:	f001 ff88 	bl	d643e <_ZN5Print7printlnEPKc>
   d452e:	4634      	mov	r4, r6
   d4530:	ad18      	add	r5, sp, #96	; 0x60
  for(i = 0; i < 3; i++){
    Serial.print(gains_orig[i], 6);
   d4532:	f002 fd13 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4536:	ecb4 0b02 	vldmia	r4!, {d0}
   d453a:	2106      	movs	r1, #6
   d453c:	f002 f877 	bl	d662e <_ZN5Print5printEdi>
    Serial.print(" ");
   d4540:	f002 fd0c 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4544:	49a4      	ldr	r1, [pc, #656]	; (d47d8 <setup+0x378>)
   d4546:	f001 ff67 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println("");
  accel.powerOn();
  
  accel.getAxisGains(gains_orig);
  Serial.println("gains_orig[]:");
  for(i = 0; i < 3; i++){
   d454a:	42a5      	cmp	r5, r4
   d454c:	d1f1      	bne.n	d4532 <setup+0xd2>
    Serial.print(gains_orig[i], 6);
    Serial.print(" ");
  }
  Serial.println("");
   d454e:	f002 fd05 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4552:	499e      	ldr	r1, [pc, #632]	; (d47cc <setup+0x36c>)
   d4554:	f001 ff73 	bl	d643e <_ZN5Print7printlnEPKc>
  
  gains[0] = .1;
   d4558:	a38f      	add	r3, pc, #572	; (adr r3, d4798 <setup+0x338>)
   d455a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d455e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  gains[1] = 1.1;
   d4562:	a38f      	add	r3, pc, #572	; (adr r3, d47a0 <setup+0x340>)
   d4564:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4568:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  gains[2] = 2.1;
   d456c:	a38e      	add	r3, pc, #568	; (adr r3, d47a8 <setup+0x348>)
   d456e:	e9d3 2300 	ldrd	r2, r3, [r3]
  accel.setAxisGains(gains);
   d4572:	ad0c      	add	r5, sp, #48	; 0x30
   d4574:	4629      	mov	r1, r5
   d4576:	4896      	ldr	r0, [pc, #600]	; (d47d0 <setup+0x370>)
  }
  Serial.println("");
  
  gains[0] = .1;
  gains[1] = 1.1;
  gains[2] = 2.1;
   d4578:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  accel.setAxisGains(gains);
   d457c:	f000 fda2 	bl	d50c4 <_ZN7ADXL34512setAxisGainsEPd>
  accel.getAxisGains(gains);
   d4580:	4629      	mov	r1, r5
   d4582:	4893      	ldr	r0, [pc, #588]	; (d47d0 <setup+0x370>)
   d4584:	f000 fda9 	bl	d50da <_ZN7ADXL34512getAxisGainsEPd>
  Serial.println("set gains[]:");
   d4588:	f002 fce8 	bl	d6f5c <_Z16_fetch_usbserialv>
   d458c:	4993      	ldr	r1, [pc, #588]	; (d47dc <setup+0x37c>)
   d458e:	f001 ff56 	bl	d643e <_ZN5Print7printlnEPKc>
   d4592:	462c      	mov	r4, r5
   d4594:	462f      	mov	r7, r5
  for(i = 0; i < 3; i++){
    Serial.print(gains[i]);
   d4596:	f002 fce1 	bl	d6f5c <_Z16_fetch_usbserialv>
   d459a:	ecb7 0b02 	vldmia	r7!, {d0}
   d459e:	2102      	movs	r1, #2
   d45a0:	f002 f845 	bl	d662e <_ZN5Print5printEdi>
    Serial.print(" ");
   d45a4:	f002 fcda 	bl	d6f5c <_Z16_fetch_usbserialv>
   d45a8:	498b      	ldr	r1, [pc, #556]	; (d47d8 <setup+0x378>)
   d45aa:	f001 ff35 	bl	d6418 <_ZN5Print5printEPKc>
  gains[1] = 1.1;
  gains[2] = 2.1;
  accel.setAxisGains(gains);
  accel.getAxisGains(gains);
  Serial.println("set gains[]:");
  for(i = 0; i < 3; i++){
   d45ae:	42be      	cmp	r6, r7
   d45b0:	d1f1      	bne.n	d4596 <setup+0x136>
    Serial.print(gains[i]);
    Serial.print(" ");
  }
  Serial.println("");
   d45b2:	f002 fcd3 	bl	d6f5c <_Z16_fetch_usbserialv>
   d45b6:	4985      	ldr	r1, [pc, #532]	; (d47cc <setup+0x36c>)
   d45b8:	f001 ff41 	bl	d643e <_ZN5Print7printlnEPKc>

  accel.setAxisGains(gains_orig);
   d45bc:	4631      	mov	r1, r6
   d45be:	4884      	ldr	r0, [pc, #528]	; (d47d0 <setup+0x370>)
   d45c0:	f000 fd80 	bl	d50c4 <_ZN7ADXL34512setAxisGainsEPd>
  accel.getAxisGains(gains);
   d45c4:	4629      	mov	r1, r5
   d45c6:	4882      	ldr	r0, [pc, #520]	; (d47d0 <setup+0x370>)
   d45c8:	f000 fd87 	bl	d50da <_ZN7ADXL34512getAxisGainsEPd>
  Serial.println("original gains?");
   d45cc:	f002 fcc6 	bl	d6f5c <_Z16_fetch_usbserialv>
   d45d0:	4983      	ldr	r1, [pc, #524]	; (d47e0 <setup+0x380>)
   d45d2:	f001 ff34 	bl	d643e <_ZN5Print7printlnEPKc>
  for(i = 0; i < 3; i++){
    Serial.print(gains[i], 6);
   d45d6:	f002 fcc1 	bl	d6f5c <_Z16_fetch_usbserialv>
   d45da:	ecb4 0b02 	vldmia	r4!, {d0}
   d45de:	2106      	movs	r1, #6
   d45e0:	f002 f825 	bl	d662e <_ZN5Print5printEdi>
    Serial.print(" ");
   d45e4:	f002 fcba 	bl	d6f5c <_Z16_fetch_usbserialv>
   d45e8:	497b      	ldr	r1, [pc, #492]	; (d47d8 <setup+0x378>)
   d45ea:	f001 ff15 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println("");

  accel.setAxisGains(gains_orig);
  accel.getAxisGains(gains);
  Serial.println("original gains?");
  for(i = 0; i < 3; i++){
   d45ee:	42a6      	cmp	r6, r4
   d45f0:	d1f1      	bne.n	d45d6 <setup+0x176>
    Serial.print(gains[i], 6);
    Serial.print(" ");
  }
  Serial.println("");
   d45f2:	f002 fcb3 	bl	d6f5c <_Z16_fetch_usbserialv>
   d45f6:	4975      	ldr	r1, [pc, #468]	; (d47cc <setup+0x36c>)
   d45f8:	f001 ff21 	bl	d643e <_ZN5Print7printlnEPKc>
    
  accel.readAccel(&x, &y, &z);
   d45fc:	ab05      	add	r3, sp, #20
   d45fe:	aa04      	add	r2, sp, #16
   d4600:	a903      	add	r1, sp, #12
   d4602:	4873      	ldr	r0, [pc, #460]	; (d47d0 <setup+0x370>)
   d4604:	f000 fd11 	bl	d502a <_ZN7ADXL3459readAccelEPiS0_S0_>
  Serial.print("XYZ COUNTS: ");
   d4608:	f002 fca8 	bl	d6f5c <_Z16_fetch_usbserialv>
   d460c:	4975      	ldr	r1, [pc, #468]	; (d47e4 <setup+0x384>)
   d460e:	f001 ff03 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.print(x, DEC);
   d4612:	f002 fca3 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4616:	220a      	movs	r2, #10
   d4618:	9903      	ldr	r1, [sp, #12]
   d461a:	f7ff fee5 	bl	d43e8 <_ZN5Print5printIiLi0EEEjT_i>
  Serial.print(" ");
   d461e:	f002 fc9d 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4622:	496d      	ldr	r1, [pc, #436]	; (d47d8 <setup+0x378>)
   d4624:	f001 fef8 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.print(y, DEC);
   d4628:	f002 fc98 	bl	d6f5c <_Z16_fetch_usbserialv>
   d462c:	220a      	movs	r2, #10
   d462e:	9904      	ldr	r1, [sp, #16]
   d4630:	f7ff feda 	bl	d43e8 <_ZN5Print5printIiLi0EEEjT_i>
  Serial.print(" ");
   d4634:	f002 fc92 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4638:	4967      	ldr	r1, [pc, #412]	; (d47d8 <setup+0x378>)
   d463a:	f001 feed 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.print(z, DEC);
   d463e:	f002 fc8d 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4642:	220a      	movs	r2, #10
   d4644:	9905      	ldr	r1, [sp, #20]
   d4646:	f7ff fecf 	bl	d43e8 <_ZN5Print5printIiLi0EEEjT_i>
  Serial.println("");
   d464a:	f002 fc87 	bl	d6f5c <_Z16_fetch_usbserialv>
   d464e:	495f      	ldr	r1, [pc, #380]	; (d47cc <setup+0x36c>)
   d4650:	f001 fef5 	bl	d643e <_ZN5Print7printlnEPKc>

  accel.get_Gxyz(xyz);
   d4654:	a906      	add	r1, sp, #24
   d4656:	485e      	ldr	r0, [pc, #376]	; (d47d0 <setup+0x370>)
   d4658:	f000 fcff 	bl	d505a <_ZN7ADXL3458get_GxyzEPd>
  Serial.print("XYZ Gs: ");
   d465c:	f002 fc7e 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4660:	4961      	ldr	r1, [pc, #388]	; (d47e8 <setup+0x388>)
   d4662:	f001 fed9 	bl	d6418 <_ZN5Print5printEPKc>
   d4666:	ac06      	add	r4, sp, #24
  for(i = 0; i<3; i++){
    Serial.print(xyz[i], DEC);
   d4668:	f002 fc78 	bl	d6f5c <_Z16_fetch_usbserialv>
   d466c:	ecb4 0b02 	vldmia	r4!, {d0}
   d4670:	210a      	movs	r1, #10
   d4672:	f001 ffdc 	bl	d662e <_ZN5Print5printEdi>
    Serial.print(" ");
   d4676:	f002 fc71 	bl	d6f5c <_Z16_fetch_usbserialv>
   d467a:	4957      	ldr	r1, [pc, #348]	; (d47d8 <setup+0x378>)
   d467c:	f001 fecc 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.print(z, DEC);
  Serial.println("");

  accel.get_Gxyz(xyz);
  Serial.print("XYZ Gs: ");
  for(i = 0; i<3; i++){
   d4680:	42a5      	cmp	r5, r4
   d4682:	d1f1      	bne.n	d4668 <setup+0x208>
    Serial.print(xyz[i], DEC);
    Serial.print(" ");
  }
  Serial.println("");
   d4684:	f002 fc6a 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4688:	4950      	ldr	r1, [pc, #320]	; (d47cc <setup+0x36c>)
   d468a:	f001 fed8 	bl	d643e <_ZN5Print7printlnEPKc>

  accel.setTapThreshold(1);
   d468e:	2101      	movs	r1, #1
   d4690:	484f      	ldr	r0, [pc, #316]	; (d47d0 <setup+0x370>)
   d4692:	f000 fcff 	bl	d5094 <_ZN7ADXL34515setTapThresholdEi>
  Serial.print("getTapThreshold(): ");
   d4696:	f002 fc61 	bl	d6f5c <_Z16_fetch_usbserialv>
   d469a:	4954      	ldr	r1, [pc, #336]	; (d47ec <setup+0x38c>)
   d469c:	f001 febc 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.getTapThreshold(), DEC);
   d46a0:	f002 fc5c 	bl	d6f5c <_Z16_fetch_usbserialv>
   d46a4:	4604      	mov	r4, r0
   d46a6:	484a      	ldr	r0, [pc, #296]	; (d47d0 <setup+0x370>)
   d46a8:	f000 fd00 	bl	d50ac <_ZN7ADXL34515getTapThresholdEv>
   d46ac:	220a      	movs	r2, #10
   d46ae:	4601      	mov	r1, r0
   d46b0:	4620      	mov	r0, r4
   d46b2:	f7ff feb8 	bl	d4426 <_ZN5Print7printlnIiLi0EEEjT_i>
  
  accel.setAxisOffset(2, 3, 4);
   d46b6:	2304      	movs	r3, #4
   d46b8:	2203      	movs	r2, #3
   d46ba:	2102      	movs	r1, #2
   d46bc:	4844      	ldr	r0, [pc, #272]	; (d47d0 <setup+0x370>)
   d46be:	f000 fd17 	bl	d50f0 <_ZN7ADXL34513setAxisOffsetEiii>
  Serial.print("getAxisOffset(&x, &y, &z): ");
   d46c2:	f002 fc4b 	bl	d6f5c <_Z16_fetch_usbserialv>
   d46c6:	494a      	ldr	r1, [pc, #296]	; (d47f0 <setup+0x390>)
   d46c8:	f001 fea6 	bl	d6418 <_ZN5Print5printEPKc>
  accel.getAxisOffset(&x, &y, &z);
   d46cc:	ab05      	add	r3, sp, #20
   d46ce:	aa04      	add	r2, sp, #16
   d46d0:	a903      	add	r1, sp, #12
   d46d2:	483f      	ldr	r0, [pc, #252]	; (d47d0 <setup+0x370>)
   d46d4:	f000 fd20 	bl	d5118 <_ZN7ADXL34513getAxisOffsetEPiS0_S0_>
  Serial.print(x);
   d46d8:	f002 fc40 	bl	d6f5c <_Z16_fetch_usbserialv>
   d46dc:	220a      	movs	r2, #10
   d46de:	9903      	ldr	r1, [sp, #12]
   d46e0:	f7ff fe82 	bl	d43e8 <_ZN5Print5printIiLi0EEEjT_i>
  Serial.print(" ");
   d46e4:	f002 fc3a 	bl	d6f5c <_Z16_fetch_usbserialv>
   d46e8:	493b      	ldr	r1, [pc, #236]	; (d47d8 <setup+0x378>)
   d46ea:	f001 fe95 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.print(y);
   d46ee:	f002 fc35 	bl	d6f5c <_Z16_fetch_usbserialv>
   d46f2:	220a      	movs	r2, #10
   d46f4:	9904      	ldr	r1, [sp, #16]
   d46f6:	f7ff fe77 	bl	d43e8 <_ZN5Print5printIiLi0EEEjT_i>
  Serial.print(" ");
   d46fa:	f002 fc2f 	bl	d6f5c <_Z16_fetch_usbserialv>
   d46fe:	4936      	ldr	r1, [pc, #216]	; (d47d8 <setup+0x378>)
   d4700:	f001 fe8a 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.print(z);
   d4704:	f002 fc2a 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4708:	220a      	movs	r2, #10
   d470a:	9905      	ldr	r1, [sp, #20]
   d470c:	f7ff fe6c 	bl	d43e8 <_ZN5Print5printIiLi0EEEjT_i>
  Serial.println("");
   d4710:	f002 fc24 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4714:	492d      	ldr	r1, [pc, #180]	; (d47cc <setup+0x36c>)
   d4716:	f001 fe92 	bl	d643e <_ZN5Print7printlnEPKc>

  accel.setTapDuration(5);
   d471a:	2105      	movs	r1, #5
   d471c:	482c      	ldr	r0, [pc, #176]	; (d47d0 <setup+0x370>)
   d471e:	f000 fd1f 	bl	d5160 <_ZN7ADXL34514setTapDurationEi>
  Serial.print("getTapDuration(): ");
   d4722:	f002 fc1b 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4726:	4933      	ldr	r1, [pc, #204]	; (d47f4 <setup+0x394>)
   d4728:	f001 fe76 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.getTapDuration(), DEC);
   d472c:	f002 fc16 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4730:	4604      	mov	r4, r0
   d4732:	4827      	ldr	r0, [pc, #156]	; (d47d0 <setup+0x370>)
   d4734:	f000 fd20 	bl	d5178 <_ZN7ADXL34514getTapDurationEv>
   d4738:	220a      	movs	r2, #10
   d473a:	4601      	mov	r1, r0
   d473c:	4620      	mov	r0, r4
   d473e:	f7ff fe72 	bl	d4426 <_ZN5Print7printlnIiLi0EEEjT_i>

  accel.setDoubleTapLatency(6);
   d4742:	2106      	movs	r1, #6
   d4744:	4822      	ldr	r0, [pc, #136]	; (d47d0 <setup+0x370>)
   d4746:	f000 fd23 	bl	d5190 <_ZN7ADXL34519setDoubleTapLatencyEi>
  Serial.print("getDoubleTapLatency(): ");
   d474a:	f002 fc07 	bl	d6f5c <_Z16_fetch_usbserialv>
   d474e:	492a      	ldr	r1, [pc, #168]	; (d47f8 <setup+0x398>)
   d4750:	f001 fe62 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.getDoubleTapLatency(), DEC);
   d4754:	f002 fc02 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4758:	4604      	mov	r4, r0
   d475a:	481d      	ldr	r0, [pc, #116]	; (d47d0 <setup+0x370>)
   d475c:	f000 fd1c 	bl	d5198 <_ZN7ADXL34519getDoubleTapLatencyEv>
   d4760:	220a      	movs	r2, #10
   d4762:	4601      	mov	r1, r0
   d4764:	4620      	mov	r0, r4
   d4766:	f7ff fe5e 	bl	d4426 <_ZN5Print7printlnIiLi0EEEjT_i>

  accel.setDoubleTapWindow(7);
   d476a:	2107      	movs	r1, #7
   d476c:	4818      	ldr	r0, [pc, #96]	; (d47d0 <setup+0x370>)
   d476e:	f000 fd1f 	bl	d51b0 <_ZN7ADXL34518setDoubleTapWindowEi>
  Serial.print("getDoubleTapWindow() ");
   d4772:	f002 fbf3 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4776:	4921      	ldr	r1, [pc, #132]	; (d47fc <setup+0x39c>)
   d4778:	f001 fe4e 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.getDoubleTapWindow());
   d477c:	f002 fbee 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4780:	4604      	mov	r4, r0
   d4782:	4813      	ldr	r0, [pc, #76]	; (d47d0 <setup+0x370>)
   d4784:	f000 fd20 	bl	d51c8 <_ZN7ADXL34518getDoubleTapWindowEv>
   d4788:	220a      	movs	r2, #10
   d478a:	4601      	mov	r1, r0
   d478c:	4620      	mov	r0, r4
   d478e:	f7ff fe4a 	bl	d4426 <_ZN5Print7printlnIiLi0EEEjT_i>

  accel.setActivityThreshold(8);
   d4792:	2108      	movs	r1, #8
   d4794:	e034      	b.n	d4800 <setup+0x3a0>
   d4796:	bf00      	nop
   d4798:	9999999a 	.word	0x9999999a
   d479c:	3fb99999 	.word	0x3fb99999
   d47a0:	9999999a 	.word	0x9999999a
   d47a4:	3ff19999 	.word	0x3ff19999
   d47a8:	cccccccd 	.word	0xcccccccd
   d47ac:	4000cccc 	.word	0x4000cccc
   d47b0:	2003e718 	.word	0x2003e718
   d47b4:	2003e260 	.word	0x2003e260
   d47b8:	2003e348 	.word	0x2003e348
   d47bc:	2003e3a4 	.word	0x2003e3a4
   d47c0:	000d926b 	.word	0x000d926b
   d47c4:	2003e2dc 	.word	0x2003e2dc
   d47c8:	000d927d 	.word	0x000d927d
   d47cc:	000d97af 	.word	0x000d97af
   d47d0:	2003e320 	.word	0x2003e320
   d47d4:	000d9289 	.word	0x000d9289
   d47d8:	000d9351 	.word	0x000d9351
   d47dc:	000d9297 	.word	0x000d9297
   d47e0:	000d92a4 	.word	0x000d92a4
   d47e4:	000d92b4 	.word	0x000d92b4
   d47e8:	000d92c1 	.word	0x000d92c1
   d47ec:	000d92ca 	.word	0x000d92ca
   d47f0:	000d92de 	.word	0x000d92de
   d47f4:	000d92fa 	.word	0x000d92fa
   d47f8:	000d930d 	.word	0x000d930d
   d47fc:	000d9325 	.word	0x000d9325
   d4800:	48dc      	ldr	r0, [pc, #880]	; (d4b74 <setup+0x714>)
   d4802:	f000 fced 	bl	d51e0 <_ZN7ADXL34520setActivityThresholdEi>
  Serial.print("getActivityThreshold() ");
   d4806:	f002 fba9 	bl	d6f5c <_Z16_fetch_usbserialv>
   d480a:	49db      	ldr	r1, [pc, #876]	; (d4b78 <setup+0x718>)
   d480c:	f001 fe04 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.getActivityThreshold(), DEC);
   d4810:	f002 fba4 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4814:	4604      	mov	r4, r0
   d4816:	48d7      	ldr	r0, [pc, #860]	; (d4b74 <setup+0x714>)
   d4818:	f000 fcee 	bl	d51f8 <_ZN7ADXL34520getActivityThresholdEv>
   d481c:	220a      	movs	r2, #10
   d481e:	4601      	mov	r1, r0
   d4820:	4620      	mov	r0, r4
   d4822:	f7ff fe00 	bl	d4426 <_ZN5Print7printlnIiLi0EEEjT_i>

  accel.setInactivityThreshold(9);
   d4826:	2109      	movs	r1, #9
   d4828:	48d2      	ldr	r0, [pc, #840]	; (d4b74 <setup+0x714>)
   d482a:	f000 fcf1 	bl	d5210 <_ZN7ADXL34522setInactivityThresholdEi>
  Serial.print("getInactivityThreshold() ");
   d482e:	f002 fb95 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4832:	49d2      	ldr	r1, [pc, #840]	; (d4b7c <setup+0x71c>)
   d4834:	f001 fdf0 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.getInactivityThreshold(), DEC);
   d4838:	f002 fb90 	bl	d6f5c <_Z16_fetch_usbserialv>
   d483c:	4604      	mov	r4, r0
   d483e:	48cd      	ldr	r0, [pc, #820]	; (d4b74 <setup+0x714>)
   d4840:	f000 fcf2 	bl	d5228 <_ZN7ADXL34522getInactivityThresholdEv>
   d4844:	220a      	movs	r2, #10
   d4846:	4601      	mov	r1, r0
   d4848:	4620      	mov	r0, r4
   d484a:	f7ff fdec 	bl	d4426 <_ZN5Print7printlnIiLi0EEEjT_i>

  accel.setTimeInactivity(10);
   d484e:	210a      	movs	r1, #10
   d4850:	48c8      	ldr	r0, [pc, #800]	; (d4b74 <setup+0x714>)
   d4852:	f000 fcf5 	bl	d5240 <_ZN7ADXL34517setTimeInactivityEi>
  Serial.print("getTimeInactivity(): ");
   d4856:	f002 fb81 	bl	d6f5c <_Z16_fetch_usbserialv>
   d485a:	49c9      	ldr	r1, [pc, #804]	; (d4b80 <setup+0x720>)
   d485c:	f001 fddc 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.getTimeInactivity());
   d4860:	f002 fb7c 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4864:	4604      	mov	r4, r0
   d4866:	48c3      	ldr	r0, [pc, #780]	; (d4b74 <setup+0x714>)
   d4868:	f000 fcf6 	bl	d5258 <_ZN7ADXL34517getTimeInactivityEv>
   d486c:	220a      	movs	r2, #10
   d486e:	4601      	mov	r1, r0
   d4870:	4620      	mov	r0, r4
   d4872:	f7ff fdd8 	bl	d4426 <_ZN5Print7printlnIiLi0EEEjT_i>

  accel.setFreeFallThreshold(11);
   d4876:	210b      	movs	r1, #11
   d4878:	48be      	ldr	r0, [pc, #760]	; (d4b74 <setup+0x714>)
   d487a:	f000 fcf9 	bl	d5270 <_ZN7ADXL34520setFreeFallThresholdEi>
  Serial.print("getFreeFallThreshold(): ");
   d487e:	f002 fb6d 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4882:	49c0      	ldr	r1, [pc, #768]	; (d4b84 <setup+0x724>)
   d4884:	f001 fdc8 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.getFreeFallThreshold());
   d4888:	f002 fb68 	bl	d6f5c <_Z16_fetch_usbserialv>
   d488c:	4604      	mov	r4, r0
   d488e:	48b9      	ldr	r0, [pc, #740]	; (d4b74 <setup+0x714>)
   d4890:	f000 fcfa 	bl	d5288 <_ZN7ADXL34520getFreeFallThresholdEv>
   d4894:	220a      	movs	r2, #10
   d4896:	4601      	mov	r1, r0
   d4898:	4620      	mov	r0, r4
   d489a:	f7ff fdc4 	bl	d4426 <_ZN5Print7printlnIiLi0EEEjT_i>

  accel.setFreeFallDuration(12);
   d489e:	210c      	movs	r1, #12
   d48a0:	48b4      	ldr	r0, [pc, #720]	; (d4b74 <setup+0x714>)
   d48a2:	f000 fcfd 	bl	d52a0 <_ZN7ADXL34519setFreeFallDurationEi>
  Serial.print("getFreeFallDuration(): ");
   d48a6:	f002 fb59 	bl	d6f5c <_Z16_fetch_usbserialv>
   d48aa:	49b7      	ldr	r1, [pc, #732]	; (d4b88 <setup+0x728>)
   d48ac:	f001 fdb4 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.getFreeFallDuration(), DEC);
   d48b0:	f002 fb54 	bl	d6f5c <_Z16_fetch_usbserialv>
   d48b4:	4604      	mov	r4, r0
   d48b6:	48af      	ldr	r0, [pc, #700]	; (d4b74 <setup+0x714>)
   d48b8:	f000 fcfe 	bl	d52b8 <_ZN7ADXL34519getFreeFallDurationEv>
   d48bc:	220a      	movs	r2, #10
   d48be:	4601      	mov	r1, r0
   d48c0:	4620      	mov	r0, r4
   d48c2:	f7ff fdb0 	bl	d4426 <_ZN5Print7printlnIiLi0EEEjT_i>

  Serial.print("isActivityXEnabled(): ");
   d48c6:	f002 fb49 	bl	d6f5c <_Z16_fetch_usbserialv>
   d48ca:	49b0      	ldr	r1, [pc, #704]	; (d4b8c <setup+0x72c>)
   d48cc:	f001 fda4 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.isActivityXEnabled(), DEC);
   d48d0:	f002 fb44 	bl	d6f5c <_Z16_fetch_usbserialv>
   d48d4:	4604      	mov	r4, r0
   d48d6:	48a7      	ldr	r0, [pc, #668]	; (d4b74 <setup+0x714>)
   d48d8:	f000 fdd7 	bl	d548a <_ZN7ADXL34518isActivityXEnabledEv>
   d48dc:	220a      	movs	r2, #10
   d48de:	4601      	mov	r1, r0
   d48e0:	4620      	mov	r0, r4
   d48e2:	f7ff fdaa 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("isActivityYEnabled(): ");
   d48e6:	f002 fb39 	bl	d6f5c <_Z16_fetch_usbserialv>
   d48ea:	49a9      	ldr	r1, [pc, #676]	; (d4b90 <setup+0x730>)
   d48ec:	f001 fd94 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.isActivityYEnabled(), DEC);
   d48f0:	f002 fb34 	bl	d6f5c <_Z16_fetch_usbserialv>
   d48f4:	4604      	mov	r4, r0
   d48f6:	489f      	ldr	r0, [pc, #636]	; (d4b74 <setup+0x714>)
   d48f8:	f000 fdcb 	bl	d5492 <_ZN7ADXL34518isActivityYEnabledEv>
   d48fc:	220a      	movs	r2, #10
   d48fe:	4601      	mov	r1, r0
   d4900:	4620      	mov	r0, r4
   d4902:	f7ff fd9a 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("isActivityZEnabled(): ");
   d4906:	f002 fb29 	bl	d6f5c <_Z16_fetch_usbserialv>
   d490a:	49a2      	ldr	r1, [pc, #648]	; (d4b94 <setup+0x734>)
   d490c:	f001 fd84 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.isActivityZEnabled(), DEC);
   d4910:	f002 fb24 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4914:	4604      	mov	r4, r0
   d4916:	4897      	ldr	r0, [pc, #604]	; (d4b74 <setup+0x714>)
   d4918:	f000 fdbf 	bl	d549a <_ZN7ADXL34518isActivityZEnabledEv>
   d491c:	220a      	movs	r2, #10
   d491e:	4601      	mov	r1, r0
   d4920:	4620      	mov	r0, r4
   d4922:	f7ff fd8a 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("isInactivityXEnabled(): ");
   d4926:	f002 fb19 	bl	d6f5c <_Z16_fetch_usbserialv>
   d492a:	499b      	ldr	r1, [pc, #620]	; (d4b98 <setup+0x738>)
   d492c:	f001 fd74 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.isInactivityXEnabled(), DEC);
   d4930:	f002 fb14 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4934:	4604      	mov	r4, r0
   d4936:	488f      	ldr	r0, [pc, #572]	; (d4b74 <setup+0x714>)
   d4938:	f000 fdb3 	bl	d54a2 <_ZN7ADXL34520isInactivityXEnabledEv>
   d493c:	220a      	movs	r2, #10
   d493e:	4601      	mov	r1, r0
   d4940:	4620      	mov	r0, r4
   d4942:	f7ff fd7a 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("isInactivityYEnabled(): ");
   d4946:	f002 fb09 	bl	d6f5c <_Z16_fetch_usbserialv>
   d494a:	4994      	ldr	r1, [pc, #592]	; (d4b9c <setup+0x73c>)
   d494c:	f001 fd64 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.isInactivityYEnabled(), DEC);
   d4950:	f002 fb04 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4954:	4604      	mov	r4, r0
   d4956:	4887      	ldr	r0, [pc, #540]	; (d4b74 <setup+0x714>)
   d4958:	f000 fda7 	bl	d54aa <_ZN7ADXL34520isInactivityYEnabledEv>
   d495c:	220a      	movs	r2, #10
   d495e:	4601      	mov	r1, r0
   d4960:	4620      	mov	r0, r4
   d4962:	f7ff fd6a 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("isInactivityZEnabled(): ");
   d4966:	f002 faf9 	bl	d6f5c <_Z16_fetch_usbserialv>
   d496a:	498d      	ldr	r1, [pc, #564]	; (d4ba0 <setup+0x740>)
   d496c:	f001 fd54 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.isInactivityZEnabled(), DEC);
   d4970:	f002 faf4 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4974:	4604      	mov	r4, r0
   d4976:	487f      	ldr	r0, [pc, #508]	; (d4b74 <setup+0x714>)
   d4978:	f000 fd9b 	bl	d54b2 <_ZN7ADXL34520isInactivityZEnabledEv>
   d497c:	220a      	movs	r2, #10
   d497e:	4601      	mov	r1, r0
   d4980:	4620      	mov	r0, r4
   d4982:	f7ff fd5a 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("isActivityAc(): ");
   d4986:	f002 fae9 	bl	d6f5c <_Z16_fetch_usbserialv>
   d498a:	4986      	ldr	r1, [pc, #536]	; (d4ba4 <setup+0x744>)
   d498c:	f001 fd44 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.isInactivityAc(), DEC);
   d4990:	f002 fae4 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4994:	4604      	mov	r4, r0
   d4996:	4877      	ldr	r0, [pc, #476]	; (d4b74 <setup+0x714>)
   d4998:	f000 fd8f 	bl	d54ba <_ZN7ADXL34514isInactivityAcEv>
   d499c:	220a      	movs	r2, #10
   d499e:	4601      	mov	r1, r0
   d49a0:	4620      	mov	r0, r4
   d49a2:	f7ff fd4a 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>

  accel.setActivityAc(true);
   d49a6:	2101      	movs	r1, #1
   d49a8:	4872      	ldr	r0, [pc, #456]	; (d4b74 <setup+0x714>)
   d49aa:	f000 fd2f 	bl	d540c <_ZN7ADXL34513setActivityAcEb>
  accel.setInactivityAc(true);
   d49ae:	2101      	movs	r1, #1
   d49b0:	4870      	ldr	r0, [pc, #448]	; (d4b74 <setup+0x714>)
   d49b2:	f000 fd30 	bl	d5416 <_ZN7ADXL34515setInactivityAcEb>

  accel.setSuppressBit(true);
   d49b6:	2101      	movs	r1, #1
   d49b8:	486e      	ldr	r0, [pc, #440]	; (d4b74 <setup+0x714>)
   d49ba:	f000 fd31 	bl	d5420 <_ZN7ADXL34514setSuppressBitEb>
  Serial.print("getSuppressBit(); true? ");
   d49be:	f002 facd 	bl	d6f5c <_Z16_fetch_usbserialv>
   d49c2:	4979      	ldr	r1, [pc, #484]	; (d4ba8 <setup+0x748>)
   d49c4:	f001 fd28 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.getSuppressBit());
   d49c8:	f002 fac8 	bl	d6f5c <_Z16_fetch_usbserialv>
   d49cc:	4604      	mov	r4, r0
   d49ce:	4869      	ldr	r0, [pc, #420]	; (d4b74 <setup+0x714>)
   d49d0:	f000 fd77 	bl	d54c2 <_ZN7ADXL34514getSuppressBitEv>
   d49d4:	220a      	movs	r2, #10
   d49d6:	4601      	mov	r1, r0
   d49d8:	4620      	mov	r0, r4
   d49da:	f7ff fd2e 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>

  accel.setSuppressBit(false);
   d49de:	2100      	movs	r1, #0
   d49e0:	4864      	ldr	r0, [pc, #400]	; (d4b74 <setup+0x714>)
   d49e2:	f000 fd1d 	bl	d5420 <_ZN7ADXL34514setSuppressBitEb>
  Serial.print("getSuppressBit(); false? ");
   d49e6:	f002 fab9 	bl	d6f5c <_Z16_fetch_usbserialv>
   d49ea:	4970      	ldr	r1, [pc, #448]	; (d4bac <setup+0x74c>)
   d49ec:	f001 fd14 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.getSuppressBit());
   d49f0:	f002 fab4 	bl	d6f5c <_Z16_fetch_usbserialv>
   d49f4:	4604      	mov	r4, r0
   d49f6:	485f      	ldr	r0, [pc, #380]	; (d4b74 <setup+0x714>)
   d49f8:	f000 fd63 	bl	d54c2 <_ZN7ADXL34514getSuppressBitEv>
   d49fc:	220a      	movs	r2, #10
   d49fe:	4601      	mov	r1, r0
   d4a00:	4620      	mov	r0, r4
   d4a02:	f7ff fd1a 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>
  
  accel.setTapDetectionOnX(true);
   d4a06:	2101      	movs	r1, #1
   d4a08:	485a      	ldr	r0, [pc, #360]	; (d4b74 <setup+0x714>)
   d4a0a:	f000 fd0e 	bl	d542a <_ZN7ADXL34518setTapDetectionOnXEb>
  Serial.print("isTapDetectionOnX(); true? ");
   d4a0e:	f002 faa5 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4a12:	4967      	ldr	r1, [pc, #412]	; (d4bb0 <setup+0x750>)
   d4a14:	f001 fd00 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.isTapDetectionOnX(), DEC);
   d4a18:	f002 faa0 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4a1c:	4604      	mov	r4, r0
   d4a1e:	4855      	ldr	r0, [pc, #340]	; (d4b74 <setup+0x714>)
   d4a20:	f000 fd53 	bl	d54ca <_ZN7ADXL34517isTapDetectionOnXEv>
   d4a24:	220a      	movs	r2, #10
   d4a26:	4601      	mov	r1, r0
   d4a28:	4620      	mov	r0, r4
   d4a2a:	f7ff fd06 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>
  accel.setTapDetectionOnX(false);
   d4a2e:	2100      	movs	r1, #0
   d4a30:	4850      	ldr	r0, [pc, #320]	; (d4b74 <setup+0x714>)
   d4a32:	f000 fcfa 	bl	d542a <_ZN7ADXL34518setTapDetectionOnXEb>
  Serial.print("isTapDetectionOnX(); false? ");
   d4a36:	f002 fa91 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4a3a:	495e      	ldr	r1, [pc, #376]	; (d4bb4 <setup+0x754>)
   d4a3c:	f001 fcec 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.isTapDetectionOnX(), DEC);
   d4a40:	f002 fa8c 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4a44:	4604      	mov	r4, r0
   d4a46:	484b      	ldr	r0, [pc, #300]	; (d4b74 <setup+0x714>)
   d4a48:	f000 fd3f 	bl	d54ca <_ZN7ADXL34517isTapDetectionOnXEv>
   d4a4c:	220a      	movs	r2, #10
   d4a4e:	4601      	mov	r1, r0
   d4a50:	4620      	mov	r0, r4
   d4a52:	f7ff fcf2 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>

  accel.setTapDetectionOnY(true);
   d4a56:	2101      	movs	r1, #1
   d4a58:	4846      	ldr	r0, [pc, #280]	; (d4b74 <setup+0x714>)
   d4a5a:	f000 fceb 	bl	d5434 <_ZN7ADXL34518setTapDetectionOnYEb>
  Serial.print("isTapDetectionOnY(); true? ");
   d4a5e:	f002 fa7d 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4a62:	4955      	ldr	r1, [pc, #340]	; (d4bb8 <setup+0x758>)
   d4a64:	f001 fcd8 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.isTapDetectionOnY(), DEC);
   d4a68:	f002 fa78 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4a6c:	4604      	mov	r4, r0
   d4a6e:	4841      	ldr	r0, [pc, #260]	; (d4b74 <setup+0x714>)
   d4a70:	f000 fd2f 	bl	d54d2 <_ZN7ADXL34517isTapDetectionOnYEv>
   d4a74:	220a      	movs	r2, #10
   d4a76:	4601      	mov	r1, r0
   d4a78:	4620      	mov	r0, r4
   d4a7a:	f7ff fcde 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>
  accel.setTapDetectionOnY(false);
   d4a7e:	2100      	movs	r1, #0
   d4a80:	483c      	ldr	r0, [pc, #240]	; (d4b74 <setup+0x714>)
   d4a82:	f000 fcd7 	bl	d5434 <_ZN7ADXL34518setTapDetectionOnYEb>
  Serial.print("isTapDetectionOnY(); false? ");
   d4a86:	f002 fa69 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4a8a:	494c      	ldr	r1, [pc, #304]	; (d4bbc <setup+0x75c>)
   d4a8c:	f001 fcc4 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.isTapDetectionOnY(), DEC);
   d4a90:	f002 fa64 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4a94:	4604      	mov	r4, r0
   d4a96:	4837      	ldr	r0, [pc, #220]	; (d4b74 <setup+0x714>)
   d4a98:	f000 fd1b 	bl	d54d2 <_ZN7ADXL34517isTapDetectionOnYEv>
   d4a9c:	220a      	movs	r2, #10
   d4a9e:	4601      	mov	r1, r0
   d4aa0:	4620      	mov	r0, r4
   d4aa2:	f7ff fcca 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>

  accel.setTapDetectionOnZ(true);
   d4aa6:	2101      	movs	r1, #1
   d4aa8:	4832      	ldr	r0, [pc, #200]	; (d4b74 <setup+0x714>)
   d4aaa:	f000 fcc8 	bl	d543e <_ZN7ADXL34518setTapDetectionOnZEb>
  Serial.print("isTapDetectionOnZ(); true? ");
   d4aae:	f002 fa55 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4ab2:	4943      	ldr	r1, [pc, #268]	; (d4bc0 <setup+0x760>)
   d4ab4:	f001 fcb0 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.isTapDetectionOnZ(), DEC);
   d4ab8:	f002 fa50 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4abc:	4604      	mov	r4, r0
   d4abe:	482d      	ldr	r0, [pc, #180]	; (d4b74 <setup+0x714>)
   d4ac0:	f000 fd0b 	bl	d54da <_ZN7ADXL34517isTapDetectionOnZEv>
   d4ac4:	220a      	movs	r2, #10
   d4ac6:	4601      	mov	r1, r0
   d4ac8:	4620      	mov	r0, r4
   d4aca:	f7ff fcb6 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>
  accel.setTapDetectionOnZ(false);
   d4ace:	2100      	movs	r1, #0
   d4ad0:	4828      	ldr	r0, [pc, #160]	; (d4b74 <setup+0x714>)
   d4ad2:	f000 fcb4 	bl	d543e <_ZN7ADXL34518setTapDetectionOnZEb>
  Serial.print("isTapDetectionOnZ(); false? ");
   d4ad6:	f002 fa41 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4ada:	493a      	ldr	r1, [pc, #232]	; (d4bc4 <setup+0x764>)
   d4adc:	f001 fc9c 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.isTapDetectionOnZ(), DEC);
   d4ae0:	f002 fa3c 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4ae4:	4604      	mov	r4, r0
   d4ae6:	4823      	ldr	r0, [pc, #140]	; (d4b74 <setup+0x714>)
   d4ae8:	f000 fcf7 	bl	d54da <_ZN7ADXL34517isTapDetectionOnZEv>
   d4aec:	220a      	movs	r2, #10
   d4aee:	4601      	mov	r1, r0
   d4af0:	4620      	mov	r0, r4
   d4af2:	f7ff fca2 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>

  accel.setActivityX(true);
   d4af6:	2101      	movs	r1, #1
   d4af8:	481e      	ldr	r0, [pc, #120]	; (d4b74 <setup+0x714>)
   d4afa:	f000 fc69 	bl	d53d0 <_ZN7ADXL34512setActivityXEb>
  accel.setActivityY(true);
   d4afe:	2101      	movs	r1, #1
   d4b00:	481c      	ldr	r0, [pc, #112]	; (d4b74 <setup+0x714>)
   d4b02:	f000 fc6a 	bl	d53da <_ZN7ADXL34512setActivityYEb>
  accel.setActivityZ(true);
   d4b06:	2101      	movs	r1, #1
   d4b08:	481a      	ldr	r0, [pc, #104]	; (d4b74 <setup+0x714>)
   d4b0a:	f000 fc6b 	bl	d53e4 <_ZN7ADXL34512setActivityZEb>

  accel.setInactivityX(false);
   d4b0e:	2100      	movs	r1, #0
   d4b10:	4818      	ldr	r0, [pc, #96]	; (d4b74 <setup+0x714>)
   d4b12:	f000 fc6c 	bl	d53ee <_ZN7ADXL34514setInactivityXEb>
  accel.setInactivityY(false);
   d4b16:	2100      	movs	r1, #0
   d4b18:	4816      	ldr	r0, [pc, #88]	; (d4b74 <setup+0x714>)
   d4b1a:	f000 fc6d 	bl	d53f8 <_ZN7ADXL34514setInactivityYEb>
  accel.setInactivityZ(false);
   d4b1e:	2100      	movs	r1, #0
   d4b20:	4814      	ldr	r0, [pc, #80]	; (d4b74 <setup+0x714>)
   d4b22:	f000 fc6e 	bl	d5402 <_ZN7ADXL34514setInactivityZEb>

  Serial.print("isActivitySourceOnX(): ");
   d4b26:	f002 fa19 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4b2a:	4927      	ldr	r1, [pc, #156]	; (d4bc8 <setup+0x768>)
   d4b2c:	f001 fc74 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.isActivitySourceOnX(), DEC);
   d4b30:	f002 fa14 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4b34:	4604      	mov	r4, r0
   d4b36:	480f      	ldr	r0, [pc, #60]	; (d4b74 <setup+0x714>)
   d4b38:	f000 fcd3 	bl	d54e2 <_ZN7ADXL34519isActivitySourceOnXEv>
   d4b3c:	220a      	movs	r2, #10
   d4b3e:	4601      	mov	r1, r0
   d4b40:	4620      	mov	r0, r4
   d4b42:	f7ff fc7a 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("accel.isActivitySourceOnY(): ");
   d4b46:	f002 fa09 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4b4a:	4920      	ldr	r1, [pc, #128]	; (d4bcc <setup+0x76c>)
   d4b4c:	f001 fc64 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.isActivitySourceOnY(), DEC);
   d4b50:	f002 fa04 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4b54:	4604      	mov	r4, r0
   d4b56:	4807      	ldr	r0, [pc, #28]	; (d4b74 <setup+0x714>)
   d4b58:	f000 fcc7 	bl	d54ea <_ZN7ADXL34519isActivitySourceOnYEv>
   d4b5c:	220a      	movs	r2, #10
   d4b5e:	4601      	mov	r1, r0
   d4b60:	4620      	mov	r0, r4
   d4b62:	f7ff fc6a 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("accel.isActivitySourceOnZ(): ");
   d4b66:	f002 f9f9 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4b6a:	4919      	ldr	r1, [pc, #100]	; (d4bd0 <setup+0x770>)
   d4b6c:	f001 fc54 	bl	d6418 <_ZN5Print5printEPKc>
   d4b70:	e030      	b.n	d4bd4 <setup+0x774>
   d4b72:	bf00      	nop
   d4b74:	2003e320 	.word	0x2003e320
   d4b78:	000d933b 	.word	0x000d933b
   d4b7c:	000d9353 	.word	0x000d9353
   d4b80:	000d936d 	.word	0x000d936d
   d4b84:	000d9383 	.word	0x000d9383
   d4b88:	000d939c 	.word	0x000d939c
   d4b8c:	000d93b4 	.word	0x000d93b4
   d4b90:	000d93cb 	.word	0x000d93cb
   d4b94:	000d93e2 	.word	0x000d93e2
   d4b98:	000d93f9 	.word	0x000d93f9
   d4b9c:	000d9412 	.word	0x000d9412
   d4ba0:	000d942b 	.word	0x000d942b
   d4ba4:	000d9444 	.word	0x000d9444
   d4ba8:	000d9455 	.word	0x000d9455
   d4bac:	000d946e 	.word	0x000d946e
   d4bb0:	000d9488 	.word	0x000d9488
   d4bb4:	000d94a4 	.word	0x000d94a4
   d4bb8:	000d94c1 	.word	0x000d94c1
   d4bbc:	000d94dd 	.word	0x000d94dd
   d4bc0:	000d94fa 	.word	0x000d94fa
   d4bc4:	000d9516 	.word	0x000d9516
   d4bc8:	000d9533 	.word	0x000d9533
   d4bcc:	000d954b 	.word	0x000d954b
   d4bd0:	000d9569 	.word	0x000d9569
  Serial.println(accel.isActivitySourceOnZ(), DEC);
   d4bd4:	f002 f9c2 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4bd8:	4604      	mov	r4, r0
   d4bda:	488b      	ldr	r0, [pc, #556]	; (d4e08 <setup+0x9a8>)
   d4bdc:	f000 fc89 	bl	d54f2 <_ZN7ADXL34519isActivitySourceOnZEv>
   d4be0:	220a      	movs	r2, #10
   d4be2:	4601      	mov	r1, r0
   d4be4:	4620      	mov	r0, r4
   d4be6:	f7ff fc28 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("accel.isTapSourceOnX(): ");
   d4bea:	f002 f9b7 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4bee:	4987      	ldr	r1, [pc, #540]	; (d4e0c <setup+0x9ac>)
   d4bf0:	f001 fc12 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.isTapSourceOnX(), DEC);
   d4bf4:	f002 f9b2 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4bf8:	4604      	mov	r4, r0
   d4bfa:	4883      	ldr	r0, [pc, #524]	; (d4e08 <setup+0x9a8>)
   d4bfc:	f000 fc7d 	bl	d54fa <_ZN7ADXL34514isTapSourceOnXEv>
   d4c00:	220a      	movs	r2, #10
   d4c02:	4601      	mov	r1, r0
   d4c04:	4620      	mov	r0, r4
   d4c06:	f7ff fc18 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("accel.isTapSourceOnY(): ");
   d4c0a:	f002 f9a7 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4c0e:	4980      	ldr	r1, [pc, #512]	; (d4e10 <setup+0x9b0>)
   d4c10:	f001 fc02 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.isTapSourceOnY(), DEC);
   d4c14:	f002 f9a2 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4c18:	4604      	mov	r4, r0
   d4c1a:	487b      	ldr	r0, [pc, #492]	; (d4e08 <setup+0x9a8>)
   d4c1c:	f000 fc71 	bl	d5502 <_ZN7ADXL34514isTapSourceOnYEv>
   d4c20:	220a      	movs	r2, #10
   d4c22:	4601      	mov	r1, r0
   d4c24:	4620      	mov	r0, r4
   d4c26:	f7ff fc08 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("accel.isTapSourceOnZ(): ");
   d4c2a:	f002 f997 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4c2e:	4979      	ldr	r1, [pc, #484]	; (d4e14 <setup+0x9b4>)
   d4c30:	f001 fbf2 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.isTapSourceOnZ(), DEC);
   d4c34:	f002 f992 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4c38:	4604      	mov	r4, r0
   d4c3a:	4873      	ldr	r0, [pc, #460]	; (d4e08 <setup+0x9a8>)
   d4c3c:	f000 fc65 	bl	d550a <_ZN7ADXL34514isTapSourceOnZEv>
   d4c40:	220a      	movs	r2, #10
   d4c42:	4601      	mov	r1, r0
   d4c44:	4620      	mov	r0, r4
   d4c46:	f7ff fbf8 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("accel.isAsleep(): ");
   d4c4a:	f002 f987 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4c4e:	4972      	ldr	r1, [pc, #456]	; (d4e18 <setup+0x9b8>)
   d4c50:	f001 fbe2 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.isAsleep(), DEC);
   d4c54:	f002 f982 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4c58:	4604      	mov	r4, r0
   d4c5a:	486b      	ldr	r0, [pc, #428]	; (d4e08 <setup+0x9a8>)
   d4c5c:	f000 fc59 	bl	d5512 <_ZN7ADXL3458isAsleepEv>
   d4c60:	220a      	movs	r2, #10
   d4c62:	4601      	mov	r1, r0
   d4c64:	4620      	mov	r0, r4
   d4c66:	f7ff fbe8 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("accel.isLowPower(): ");
   d4c6a:	f002 f977 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4c6e:	496b      	ldr	r1, [pc, #428]	; (d4e1c <setup+0x9bc>)
   d4c70:	f001 fbd2 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.isLowPower(), DEC);
   d4c74:	f002 f972 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4c78:	4604      	mov	r4, r0
   d4c7a:	4863      	ldr	r0, [pc, #396]	; (d4e08 <setup+0x9a8>)
   d4c7c:	f000 fc4d 	bl	d551a <_ZN7ADXL34510isLowPowerEv>
   d4c80:	220a      	movs	r2, #10
   d4c82:	4601      	mov	r1, r0
   d4c84:	4620      	mov	r0, r4
   d4c86:	f7ff fbd8 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>
  accel.setLowPower(false);
   d4c8a:	2100      	movs	r1, #0
   d4c8c:	485e      	ldr	r0, [pc, #376]	; (d4e08 <setup+0x9a8>)
   d4c8e:	f000 fbdb 	bl	d5448 <_ZN7ADXL34511setLowPowerEb>
  
  accel.setRate(3.14159);
   d4c92:	ed9f 0b5b 	vldr	d0, [pc, #364]	; d4e00 <setup+0x9a0>
   d4c96:	485c      	ldr	r0, [pc, #368]	; (d4e08 <setup+0x9a8>)
   d4c98:	f000 fb44 	bl	d5324 <_ZN7ADXL3457setRateEd>
  Serial.print("getRate(): 3.14159?");
   d4c9c:	f002 f95e 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4ca0:	495f      	ldr	r1, [pc, #380]	; (d4e20 <setup+0x9c0>)
   d4ca2:	f001 fbb9 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.getRate());
   d4ca6:	f002 f959 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4caa:	4604      	mov	r4, r0
   d4cac:	4856      	ldr	r0, [pc, #344]	; (d4e08 <setup+0x9a8>)
   d4cae:	f000 fb0f 	bl	d52d0 <_ZN7ADXL3457getRateEv>
   d4cb2:	2102      	movs	r1, #2
   d4cb4:	4620      	mov	r0, r4
   d4cb6:	f001 fcbd 	bl	d6634 <_ZN5Print7printlnEdi>

  Serial.print("getInterruptSource(): ");
   d4cba:	f002 f94f 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4cbe:	4959      	ldr	r1, [pc, #356]	; (d4e24 <setup+0x9c4>)
   d4cc0:	f001 fbaa 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.getInterruptSource(), DEC);
   d4cc4:	f002 f94a 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4cc8:	4604      	mov	r4, r0
   d4cca:	484f      	ldr	r0, [pc, #316]	; (d4e08 <setup+0x9a8>)
   d4ccc:	f000 fb52 	bl	d5374 <_ZN7ADXL34518getInterruptSourceEv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4cd0:	220a      	movs	r2, #10
   d4cd2:	4601      	mov	r1, r0
   d4cd4:	4620      	mov	r0, r4
   d4cd6:	f001 fbbc 	bl	d6452 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4cda:	4620      	mov	r0, r4
   d4cdc:	f001 fba3 	bl	d6426 <_ZN5Print7printlnEv>

  Serial.print("getInterruptSource(1): ");
   d4ce0:	f002 f93c 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4ce4:	4950      	ldr	r1, [pc, #320]	; (d4e28 <setup+0x9c8>)
   d4ce6:	f001 fb97 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.getInterruptSource(1), DEC);
   d4cea:	f002 f937 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4cee:	2101      	movs	r1, #1
   d4cf0:	4604      	mov	r4, r0
   d4cf2:	4845      	ldr	r0, [pc, #276]	; (d4e08 <setup+0x9a8>)
   d4cf4:	f000 fc15 	bl	d5522 <_ZN7ADXL34518getInterruptSourceEh>
   d4cf8:	220a      	movs	r2, #10
   d4cfa:	4601      	mov	r1, r0
   d4cfc:	4620      	mov	r0, r4
   d4cfe:	f7ff fb9c 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>
  
  Serial.print("getInterruptMapping(1): ");
   d4d02:	f002 f92b 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4d06:	4949      	ldr	r1, [pc, #292]	; (d4e2c <setup+0x9cc>)
   d4d08:	f001 fb86 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.getInterruptMapping(1), DEC);
   d4d0c:	f002 f926 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4d10:	2101      	movs	r1, #1
   d4d12:	4604      	mov	r4, r0
   d4d14:	483c      	ldr	r0, [pc, #240]	; (d4e08 <setup+0x9a8>)
   d4d16:	f000 fc08 	bl	d552a <_ZN7ADXL34519getInterruptMappingEh>
   d4d1a:	220a      	movs	r2, #10
   d4d1c:	4601      	mov	r1, r0
   d4d1e:	4620      	mov	r0, r4
   d4d20:	f7ff fb8b 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>
  
  accel.setInterruptMapping(1, true);
   d4d24:	2201      	movs	r2, #1
   d4d26:	4611      	mov	r1, r2
   d4d28:	4837      	ldr	r0, [pc, #220]	; (d4e08 <setup+0x9a8>)
   d4d2a:	f000 fb92 	bl	d5452 <_ZN7ADXL34519setInterruptMappingEhb>
  Serial.print("isInterruptEnabled(1): ");
   d4d2e:	f002 f915 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4d32:	493f      	ldr	r1, [pc, #252]	; (d4e30 <setup+0x9d0>)
   d4d34:	f001 fb70 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.isInterruptEnabled(1));
   d4d38:	f002 f910 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4d3c:	2101      	movs	r1, #1
   d4d3e:	4604      	mov	r4, r0
   d4d40:	4831      	ldr	r0, [pc, #196]	; (d4e08 <setup+0x9a8>)
   d4d42:	f000 fbf6 	bl	d5532 <_ZN7ADXL34518isInterruptEnabledEh>
   d4d46:	220a      	movs	r2, #10
   d4d48:	4601      	mov	r1, r0
   d4d4a:	4620      	mov	r0, r4
   d4d4c:	f7ff fb75 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>
  
  accel.setInterrupt(1, true);
   d4d50:	2201      	movs	r2, #1
   d4d52:	4611      	mov	r1, r2
   d4d54:	482c      	ldr	r0, [pc, #176]	; (d4e08 <setup+0x9a8>)
   d4d56:	f000 fb81 	bl	d545c <_ZN7ADXL34512setInterruptEhb>

  accel.setSelfTestBit(false);
   d4d5a:	2100      	movs	r1, #0
   d4d5c:	482a      	ldr	r0, [pc, #168]	; (d4e08 <setup+0x9a8>)
   d4d5e:	f000 fb32 	bl	d53c6 <_ZN7ADXL34514setSelfTestBitEb>
  Serial.print("getSelfTestBit(): ");
   d4d62:	f002 f8fb 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4d66:	4933      	ldr	r1, [pc, #204]	; (d4e34 <setup+0x9d4>)
   d4d68:	f001 fb56 	bl	d6418 <_ZN5Print5printEPKc>
  Serial.println(accel.getSelfTestBit(), DEC);
   d4d6c:	f002 f8f6 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4d70:	4604      	mov	r4, r0
   d4d72:	4825      	ldr	r0, [pc, #148]	; (d4e08 <setup+0x9a8>)
   d4d74:	f000 fb85 	bl	d5482 <_ZN7ADXL34514getSelfTestBitEv>
   d4d78:	220a      	movs	r2, #10
   d4d7a:	4601      	mov	r1, r0
   d4d7c:	4620      	mov	r0, r4
   d4d7e:	f7ff fb5c 	bl	d443a <_ZN5Print7printlnIbLi0EEEjT_i>

  accel.printAllRegister();
   d4d82:	4821      	ldr	r0, [pc, #132]	; (d4e08 <setup+0x9a8>)
   d4d84:	f000 fbf2 	bl	d556c <_ZN7ADXL34516printAllRegisterEv>

//set up communication with the ADXL and the Argon
  Wire.begin(); //initiate the Wirelibrary
   d4d88:	f002 fa4c 	bl	d7224 <_Z19__fetch_global_Wirev>
   d4d8c:	f001 f8dc 	bl	d5f48 <_ZN7TwoWire5beginEv>
  // set ADXL345 in measuring mode
  Wire.beginTransmission(ADXL345); //start communicating with the Argon
   d4d90:	f002 fa48 	bl	d7224 <_Z19__fetch_global_Wirev>
   d4d94:	4b28      	ldr	r3, [pc, #160]	; (d4e38 <setup+0x9d8>)
   d4d96:	6819      	ldr	r1, [r3, #0]
   d4d98:	f001 f911 	bl	d5fbe <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x2D); //access/talk to POWER_CTL register - 0x2D
   d4d9c:	f002 fa42 	bl	d7224 <_Z19__fetch_global_Wirev>
   d4da0:	212d      	movs	r1, #45	; 0x2d
   d4da2:	f7ff f9b2 	bl	d410a <_ZN7TwoWire5writeEi>
  //Enable measurement
  Wire.write(8); //(8dec -> 0000 1000 binary) Bit D3 High for measuring enable
   d4da6:	f002 fa3d 	bl	d7224 <_Z19__fetch_global_Wirev>
   d4daa:	2108      	movs	r1, #8
   d4dac:	f7ff f9ad 	bl	d410a <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d4db0:	f002 fa38 	bl	d7224 <_Z19__fetch_global_Wirev>
   d4db4:	f001 f90a 	bl	d5fcc <_ZN7TwoWire15endTransmissionEv>
  delay(10);
   d4db8:	200a      	movs	r0, #10
   d4dba:	f001 f81f 	bl	d5dfc <delay>

  //set up haptic motor driver
 Serial.println("DRV test");
   d4dbe:	f002 f8cd 	bl	d6f5c <_Z16_fetch_usbserialv>
   d4dc2:	491e      	ldr	r1, [pc, #120]	; (d4e3c <setup+0x9dc>)
   d4dc4:	f001 fb3b 	bl	d643e <_ZN5Print7printlnEPKc>
 drv.begin();
   d4dc8:	481d      	ldr	r0, [pc, #116]	; (d4e40 <setup+0x9e0>)
   d4dca:	f000 fd5e 	bl	d588a <_ZN16Adafruit_DRV26055beginEv>

// I2C trigger by sending 'go' command 
  // default, internal trigger when sending GO command
 drv.setMode(DRV2605_MODE_INTTRIG);
   d4dce:	2100      	movs	r1, #0
   d4dd0:	481b      	ldr	r0, [pc, #108]	; (d4e40 <setup+0x9e0>)
   d4dd2:	f000 fdb0 	bl	d5936 <_ZN16Adafruit_DRV26057setModeEh>

 drv.selectLibrary(1);
   d4dd6:	2101      	movs	r1, #1
   d4dd8:	4819      	ldr	r0, [pc, #100]	; (d4e40 <setup+0x9e0>)
   d4dda:	f000 fda8 	bl	d592e <_ZN16Adafruit_DRV260513selectLibraryEh>

//configure which kind of vibrations to use: set to different variables for differnt options? for now assign differnt vibes for differnt frequencies.
  drv.setWaveform(0, 84);  // ramp up medium 1, see datasheet part 11.2
   d4dde:	2254      	movs	r2, #84	; 0x54
   d4de0:	2100      	movs	r1, #0
   d4de2:	4817      	ldr	r0, [pc, #92]	; (d4e40 <setup+0x9e0>)
   d4de4:	f000 fd9f 	bl	d5926 <_ZN16Adafruit_DRV260511setWaveformEhh>
  drv.setWaveform(1, 1);  // strong click 100%, see datasheet part 11.2
   d4de8:	2201      	movs	r2, #1
   d4dea:	4611      	mov	r1, r2
   d4dec:	4814      	ldr	r0, [pc, #80]	; (d4e40 <setup+0x9e0>)
   d4dee:	f000 fd9a 	bl	d5926 <_ZN16Adafruit_DRV260511setWaveformEhh>
  drv.setWaveform(2, 0);  // end of waveforms
   d4df2:	2200      	movs	r2, #0
   d4df4:	2102      	movs	r1, #2
   d4df6:	4812      	ldr	r0, [pc, #72]	; (d4e40 <setup+0x9e0>)
   d4df8:	f000 fd95 	bl	d5926 <_ZN16Adafruit_DRV260511setWaveformEhh>
  //end of driver motor set up
}
   d4dfc:	b019      	add	sp, #100	; 0x64
   d4dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4e00:	f01b866e 	.word	0xf01b866e
   d4e04:	400921f9 	.word	0x400921f9
   d4e08:	2003e320 	.word	0x2003e320
   d4e0c:	000d9587 	.word	0x000d9587
   d4e10:	000d95a0 	.word	0x000d95a0
   d4e14:	000d95b9 	.word	0x000d95b9
   d4e18:	000d95d2 	.word	0x000d95d2
   d4e1c:	000d95e5 	.word	0x000d95e5
   d4e20:	000d95fa 	.word	0x000d95fa
   d4e24:	000d960e 	.word	0x000d960e
   d4e28:	000d9625 	.word	0x000d9625
   d4e2c:	000d963d 	.word	0x000d963d
   d4e30:	000d9656 	.word	0x000d9656
   d4e34:	000d966e 	.word	0x000d966e
   d4e38:	2003e264 	.word	0x2003e264
   d4e3c:	000d9681 	.word	0x000d9681
   d4e40:	2003e3a0 	.word	0x2003e3a0

000d4e44 <_GLOBAL__sub_I_SystemMode>:
  outMessage.addInt(random(0, 4096));
  outMessage.addInt(random(0, 4096));
  outMessage.addInt(random(0, 4096));
  outMessage.addInt(random(0, 4096));
  outMessage.send( Udp, remoteIP, 8000 );
}
   d4e44:	b573      	push	{r0, r1, r4, r5, r6, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4e46:	f000 fdb5 	bl	d59b4 <HAL_Pin_Map>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4e4a:	4c24      	ldr	r4, [pc, #144]	; (d4edc <_GLOBAL__sub_I_SystemMode+0x98>)

/* THESE ARE PARTICLE SPECIFIC PARAMETERS APPLIED AT CODE RUNTIME */
/* RUN ALL PARTICLE CLOUD COMMUNICATION IN SEPARATE THREAD */
SYSTEM_THREAD(ENABLED);
/* HOW TO CONNECT TO WiFi & INTERNET: AUTOMATIC, SEMI_AUTOMATIC, MANUAL */
SYSTEM_MODE(SEMI_AUTOMATIC);
   d4e4c:	4d24      	ldr	r5, [pc, #144]	; (d4ee0 <_GLOBAL__sub_I_SystemMode+0x9c>)
unsigned int localPort = 8888;
//IPAddress multicastAddress(224,0,0,0);

// A UDP instance to let us send and receive packets over UDP
UDP Udp;
IPAddress argonIP;
   d4e4e:	4e25      	ldr	r6, [pc, #148]	; (d4ee4 <_GLOBAL__sub_I_SystemMode+0xa0>)
 * Date:
 */

/* THESE ARE PARTICLE SPECIFIC PARAMETERS APPLIED AT CODE RUNTIME */
/* RUN ALL PARTICLE CLOUD COMMUNICATION IN SEPARATE THREAD */
SYSTEM_THREAD(ENABLED);
   d4e50:	2100      	movs	r1, #0
   d4e52:	2001      	movs	r0, #1
   d4e54:	f000 ff2e 	bl	d5cb4 <system_thread_set_state>
   d4e58:	2300      	movs	r3, #0
   d4e5a:	6023      	str	r3, [r4, #0]
   d4e5c:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4e5e:	71a3      	strb	r3, [r4, #6]
   d4e60:	8123      	strh	r3, [r4, #8]
   d4e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4e66:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4e68:	2002      	movs	r0, #2
   d4e6a:	f000 ff13 	bl	d5c94 <set_system_mode>
/* HOW TO CONNECT TO WiFi & INTERNET: AUTOMATIC, SEMI_AUTOMATIC, MANUAL */
SYSTEM_MODE(SEMI_AUTOMATIC);
   d4e6e:	462a      	mov	r2, r5
   d4e70:	491d      	ldr	r1, [pc, #116]	; (d4ee8 <_GLOBAL__sub_I_SystemMode+0xa4>)
   d4e72:	4620      	mov	r0, r4
   d4e74:	f002 f9fc 	bl	d7270 <__aeabi_atexit>
// UDP Port used for two way communication
unsigned int localPort = 8888;
//IPAddress multicastAddress(224,0,0,0);

// A UDP instance to let us send and receive packets over UDP
UDP Udp;
   d4e78:	4c1c      	ldr	r4, [pc, #112]	; (d4eec <_GLOBAL__sub_I_SystemMode+0xa8>)

//motor driver library
#include "adafruit-drv2605-photon.h"


Adafruit_DRV2605 drv;
   d4e7a:	481d      	ldr	r0, [pc, #116]	; (d4ef0 <_GLOBAL__sub_I_SystemMode+0xac>)
   d4e7c:	f000 fccc 	bl	d5818 <_ZN16Adafruit_DRV2605C1Ev>


//Accelerometer variables
ADXL345 accel;
   d4e80:	481c      	ldr	r0, [pc, #112]	; (d4ef4 <_GLOBAL__sub_I_SystemMode+0xb0>)
   d4e82:	f000 f841 	bl	d4f08 <_ZN7ADXL345C1Ev>
// UDP Port used for two way communication
unsigned int localPort = 8888;
//IPAddress multicastAddress(224,0,0,0);

// A UDP instance to let us send and receive packets over UDP
UDP Udp;
   d4e86:	4620      	mov	r0, r4
   d4e88:	f001 ff00 	bl	d6c8c <_ZN3UDPC1Ev>
   d4e8c:	462a      	mov	r2, r5
   d4e8e:	491a      	ldr	r1, [pc, #104]	; (d4ef8 <_GLOBAL__sub_I_SystemMode+0xb4>)
   d4e90:	4620      	mov	r0, r4
IPAddress argonIP;
   d4e92:	4c1a      	ldr	r4, [pc, #104]	; (d4efc <_GLOBAL__sub_I_SystemMode+0xb8>)
// UDP Port used for two way communication
unsigned int localPort = 8888;
//IPAddress multicastAddress(224,0,0,0);

// A UDP instance to let us send and receive packets over UDP
UDP Udp;
   d4e94:	f002 f9ec 	bl	d7270 <__aeabi_atexit>
IPAddress argonIP;
   d4e98:	4630      	mov	r0, r6
   d4e9a:	f001 f8d1 	bl	d6040 <_ZN9IPAddressC1Ev>
   d4e9e:	462a      	mov	r2, r5
   d4ea0:	4621      	mov	r1, r4
   d4ea2:	4630      	mov	r0, r6
IPAddress remoteIP(192,168,1,107);
   d4ea4:	4e16      	ldr	r6, [pc, #88]	; (d4f00 <_GLOBAL__sub_I_SystemMode+0xbc>)
unsigned int localPort = 8888;
//IPAddress multicastAddress(224,0,0,0);

// A UDP instance to let us send and receive packets over UDP
UDP Udp;
IPAddress argonIP;
   d4ea6:	f002 f9e3 	bl	d7270 <__aeabi_atexit>
IPAddress remoteIP(192,168,1,107);
   d4eaa:	236b      	movs	r3, #107	; 0x6b
   d4eac:	9300      	str	r3, [sp, #0]
   d4eae:	22a8      	movs	r2, #168	; 0xa8
   d4eb0:	2301      	movs	r3, #1
   d4eb2:	21c0      	movs	r1, #192	; 0xc0
   d4eb4:	4630      	mov	r0, r6
   d4eb6:	f001 f907 	bl	d60c8 <_ZN9IPAddressC1Ehhhh>
   d4eba:	4630      	mov	r0, r6
char argonIPAddress[24];
// 192,168,1,107 (studio)//192,168,0,103 (home)

//IPAddress outIP(192, 168, 0, 14);
IPAddress senderAddress;
   d4ebc:	4e11      	ldr	r6, [pc, #68]	; (d4f04 <_GLOBAL__sub_I_SystemMode+0xc0>)
//IPAddress multicastAddress(224,0,0,0);

// A UDP instance to let us send and receive packets over UDP
UDP Udp;
IPAddress argonIP;
IPAddress remoteIP(192,168,1,107);
   d4ebe:	462a      	mov	r2, r5
   d4ec0:	4621      	mov	r1, r4
   d4ec2:	f002 f9d5 	bl	d7270 <__aeabi_atexit>
char argonIPAddress[24];
// 192,168,1,107 (studio)//192,168,0,103 (home)

//IPAddress outIP(192, 168, 0, 14);
IPAddress senderAddress;
   d4ec6:	4630      	mov	r0, r6
   d4ec8:	f001 f8ba 	bl	d6040 <_ZN9IPAddressC1Ev>
   d4ecc:	462a      	mov	r2, r5
   d4ece:	4621      	mov	r1, r4
   d4ed0:	4630      	mov	r0, r6
  outMessage.addInt(random(0, 4096));
  outMessage.addInt(random(0, 4096));
  outMessage.addInt(random(0, 4096));
  outMessage.addInt(random(0, 4096));
  outMessage.send( Udp, remoteIP, 8000 );
}
   d4ed2:	b002      	add	sp, #8
   d4ed4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
IPAddress remoteIP(192,168,1,107);
char argonIPAddress[24];
// 192,168,1,107 (studio)//192,168,0,103 (home)

//IPAddress outIP(192, 168, 0, 14);
IPAddress senderAddress;
   d4ed8:	f002 b9ca 	b.w	d7270 <__aeabi_atexit>
   d4edc:	2003e310 	.word	0x2003e310
   d4ee0:	2003e2d8 	.word	0x2003e2d8
   d4ee4:	2003e3a4 	.word	0x2003e3a4
   d4ee8:	000d40d9 	.word	0x000d40d9
   d4eec:	2003e348 	.word	0x2003e348
   d4ef0:	2003e3a0 	.word	0x2003e3a0
   d4ef4:	2003e320 	.word	0x2003e320
   d4ef8:	000d40b9 	.word	0x000d40b9
   d4efc:	000d40b7 	.word	0x000d40b7
   d4f00:	2003e2f8 	.word	0x2003e2f8
   d4f04:	2003e3bc 	.word	0x2003e3bc

000d4f08 <_ZN7ADXL345C1Ev>:
#include "math.h"

#define DEVICE (0x53)    // ADXL345 device address
#define TO_READ (6)      // num of bytes we are going to read each time (two bytes for each axis)

ADXL345::ADXL345() {
   d4f08:	b530      	push	{r4, r5, lr}
  status = ADXL345_OK;
  error_code = ADXL345_NO_ERROR;

  gains[0] = 0.00376390;
   d4f0a:	a50b      	add	r5, pc, #44	; (adr r5, d4f38 <_ZN7ADXL345C1Ev+0x30>)
   d4f0c:	e9d5 4500 	ldrd	r4, r5, [r5]
   d4f10:	e9c0 4502 	strd	r4, r5, [r0, #8]
  gains[1] = 0.00376009;
   d4f14:	a50a      	add	r5, pc, #40	; (adr r5, d4f40 <_ZN7ADXL345C1Ev+0x38>)
   d4f16:	e9d5 4500 	ldrd	r4, r5, [r5]
   d4f1a:	e9c0 4504 	strd	r4, r5, [r0, #16]
  gains[2] = 0.00349265;
   d4f1e:	a50a      	add	r5, pc, #40	; (adr r5, d4f48 <_ZN7ADXL345C1Ev+0x40>)
   d4f20:	e9d5 4500 	ldrd	r4, r5, [r5]

#define DEVICE (0x53)    // ADXL345 device address
#define TO_READ (6)      // num of bytes we are going to read each time (two bytes for each axis)

ADXL345::ADXL345() {
  status = ADXL345_OK;
   d4f24:	2201      	movs	r2, #1
   d4f26:	7002      	strb	r2, [r0, #0]
  error_code = ADXL345_NO_ERROR;
   d4f28:	2200      	movs	r2, #0
   d4f2a:	7042      	strb	r2, [r0, #1]

  gains[0] = 0.00376390;
  gains[1] = 0.00376009;
  gains[2] = 0.00349265;
   d4f2c:	e9c0 4506 	strd	r4, r5, [r0, #24]
}
   d4f30:	bd30      	pop	{r4, r5, pc}
   d4f32:	bf00      	nop
   d4f34:	f3af 8000 	nop.w
   d4f38:	6cf9279f 	.word	0x6cf9279f
   d4f3c:	3f6ed578 	.word	0x3f6ed578
   d4f40:	f28f7f0e 	.word	0xf28f7f0e
   d4f44:	3f6ecd7a 	.word	0x3f6ecd7a
   d4f48:	30d80f20 	.word	0x30d80f20
   d4f4c:	3f6c9c9e 	.word	0x3f6c9c9e

000d4f50 <_ZN7ADXL3457writeToEhh>:
  for(i=0; i<3; i++){
    xyz[i] = xyz_int[i] * gains[i];
  }
}
// Writes val to address register on device
void ADXL345::writeTo(byte address, byte val) {
   d4f50:	b538      	push	{r3, r4, r5, lr}
   d4f52:	4614      	mov	r4, r2
   d4f54:	460d      	mov	r5, r1
  Wire.beginTransmission(DEVICE); // start transmission to device 
   d4f56:	f002 f965 	bl	d7224 <_Z19__fetch_global_Wirev>
   d4f5a:	2153      	movs	r1, #83	; 0x53
   d4f5c:	f001 f82f 	bl	d5fbe <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(address);             // send register address
   d4f60:	f002 f960 	bl	d7224 <_Z19__fetch_global_Wirev>
   d4f64:	6803      	ldr	r3, [r0, #0]
   d4f66:	4629      	mov	r1, r5
   d4f68:	689b      	ldr	r3, [r3, #8]
   d4f6a:	4798      	blx	r3
  Wire.write(val);                 // send value to write
   d4f6c:	f002 f95a 	bl	d7224 <_Z19__fetch_global_Wirev>
   d4f70:	6803      	ldr	r3, [r0, #0]
   d4f72:	4621      	mov	r1, r4
   d4f74:	689b      	ldr	r3, [r3, #8]
   d4f76:	4798      	blx	r3
  Wire.endTransmission();         // end transmission
   d4f78:	f002 f954 	bl	d7224 <_Z19__fetch_global_Wirev>
}
   d4f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
// Writes val to address register on device
void ADXL345::writeTo(byte address, byte val) {
  Wire.beginTransmission(DEVICE); // start transmission to device 
  Wire.write(address);             // send register address
  Wire.write(val);                 // send value to write
  Wire.endTransmission();         // end transmission
   d4f80:	f001 b824 	b.w	d5fcc <_ZN7TwoWire15endTransmissionEv>

000d4f84 <_ZN7ADXL3457powerOnEv>:
  gains[0] = 0.00376390;
  gains[1] = 0.00376009;
  gains[2] = 0.00349265;
}

void ADXL345::powerOn() {
   d4f84:	b510      	push	{r4, lr}
   d4f86:	4604      	mov	r4, r0
  Wire.begin();        // join i2c bus (address optional for master)
   d4f88:	f002 f94c 	bl	d7224 <_Z19__fetch_global_Wirev>
   d4f8c:	f000 ffdc 	bl	d5f48 <_ZN7TwoWire5beginEv>
  //Turning on the ADXL345
  writeTo(ADXL345_POWER_CTL, 0);      
   d4f90:	4620      	mov	r0, r4
   d4f92:	2200      	movs	r2, #0
   d4f94:	212d      	movs	r1, #45	; 0x2d
   d4f96:	f7ff ffdb 	bl	d4f50 <_ZN7ADXL3457writeToEhh>
  writeTo(ADXL345_POWER_CTL, 16);
   d4f9a:	4620      	mov	r0, r4
   d4f9c:	2210      	movs	r2, #16
   d4f9e:	212d      	movs	r1, #45	; 0x2d
   d4fa0:	f7ff ffd6 	bl	d4f50 <_ZN7ADXL3457writeToEhh>
  writeTo(ADXL345_POWER_CTL, 8); 
   d4fa4:	4620      	mov	r0, r4
   d4fa6:	2208      	movs	r2, #8
   d4fa8:	212d      	movs	r1, #45	; 0x2d
}
   d4faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void ADXL345::powerOn() {
  Wire.begin();        // join i2c bus (address optional for master)
  //Turning on the ADXL345
  writeTo(ADXL345_POWER_CTL, 0);      
  writeTo(ADXL345_POWER_CTL, 16);
  writeTo(ADXL345_POWER_CTL, 8); 
   d4fae:	f7ff bfcf 	b.w	d4f50 <_ZN7ADXL3457writeToEhh>

000d4fb2 <_ZN7ADXL3458readFromEhiPh>:
  Wire.write(val);                 // send value to write
  Wire.endTransmission();         // end transmission
}

// Reads num bytes starting from address register on device in to _buff array
void ADXL345::readFrom(byte address, int num, byte _buff[]) {
   d4fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4fb6:	4616      	mov	r6, r2
   d4fb8:	461f      	mov	r7, r3
   d4fba:	460c      	mov	r4, r1
   d4fbc:	4605      	mov	r5, r0
  Wire.beginTransmission(DEVICE); // start transmission to device 
   d4fbe:	f002 f931 	bl	d7224 <_Z19__fetch_global_Wirev>
   d4fc2:	2153      	movs	r1, #83	; 0x53
   d4fc4:	f000 fffb 	bl	d5fbe <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(address);             // writes address to read from
   d4fc8:	f002 f92c 	bl	d7224 <_Z19__fetch_global_Wirev>
   d4fcc:	6803      	ldr	r3, [r0, #0]
   d4fce:	4621      	mov	r1, r4
   d4fd0:	689b      	ldr	r3, [r3, #8]
   d4fd2:	4798      	blx	r3
  Wire.endTransmission();         // end transmission
   d4fd4:	f002 f926 	bl	d7224 <_Z19__fetch_global_Wirev>
   d4fd8:	f000 fff8 	bl	d5fcc <_ZN7TwoWire15endTransmissionEv>

  Wire.beginTransmission(DEVICE); // start transmission to device
   d4fdc:	f002 f922 	bl	d7224 <_Z19__fetch_global_Wirev>
   d4fe0:	2153      	movs	r1, #83	; 0x53
   d4fe2:	f000 ffec 	bl	d5fbe <_ZN7TwoWire17beginTransmissionEi>
  Wire.requestFrom(DEVICE, num);    // request 6 bytes from device
   d4fe6:	f002 f91d 	bl	d7224 <_Z19__fetch_global_Wirev>
   d4fea:	4632      	mov	r2, r6
   d4fec:	2153      	movs	r1, #83	; 0x53
   d4fee:	f000 ffdf 	bl	d5fb0 <_ZN7TwoWire11requestFromEhj>
   d4ff2:	463c      	mov	r4, r7

  int i = 0;
  while(Wire.available())         // device may send less than requested (abnormal)
   d4ff4:	f002 f916 	bl	d7224 <_Z19__fetch_global_Wirev>
   d4ff8:	6803      	ldr	r3, [r0, #0]
   d4ffa:	691b      	ldr	r3, [r3, #16]
   d4ffc:	ebc7 0804 	rsb	r8, r7, r4
   d5000:	4798      	blx	r3
   d5002:	b138      	cbz	r0, d5014 <_ZN7ADXL3458readFromEhiPh+0x62>
  { 
    _buff[i] = Wire.read();       // receive a byte
   d5004:	f002 f90e 	bl	d7224 <_Z19__fetch_global_Wirev>
   d5008:	6803      	ldr	r3, [r0, #0]
   d500a:	695b      	ldr	r3, [r3, #20]
   d500c:	4798      	blx	r3
   d500e:	f804 0b01 	strb.w	r0, [r4], #1

  Wire.beginTransmission(DEVICE); // start transmission to device
  Wire.requestFrom(DEVICE, num);    // request 6 bytes from device

  int i = 0;
  while(Wire.available())         // device may send less than requested (abnormal)
   d5012:	e7ef      	b.n	d4ff4 <_ZN7ADXL3458readFromEhiPh+0x42>
  { 
    _buff[i] = Wire.read();       // receive a byte
    i++;
  }
  if(i != num){
   d5014:	4546      	cmp	r6, r8
    status = ADXL345_ERROR;
    error_code = ADXL345_READ_ERROR;
   d5016:	bf1e      	ittt	ne
   d5018:	2301      	movne	r3, #1
  { 
    _buff[i] = Wire.read();       // receive a byte
    i++;
  }
  if(i != num){
    status = ADXL345_ERROR;
   d501a:	7028      	strbne	r0, [r5, #0]
    error_code = ADXL345_READ_ERROR;
   d501c:	706b      	strbne	r3, [r5, #1]
  }
  Wire.endTransmission();         // end transmission
   d501e:	f002 f901 	bl	d7224 <_Z19__fetch_global_Wirev>
}
   d5022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  }
  if(i != num){
    status = ADXL345_ERROR;
    error_code = ADXL345_READ_ERROR;
  }
  Wire.endTransmission();         // end transmission
   d5026:	f000 bfd1 	b.w	d5fcc <_ZN7TwoWire15endTransmissionEv>

000d502a <_ZN7ADXL3459readAccelEPiS0_S0_>:

// Reads the acceleration into three variable x, y and z
void ADXL345::readAccel(int *xyz){
  readAccel(xyz, xyz + 1, xyz + 2);
}
void ADXL345::readAccel(int *x, int *y, int *z) {
   d502a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d502c:	4604      	mov	r4, r0
   d502e:	460f      	mov	r7, r1
   d5030:	4616      	mov	r6, r2
   d5032:	461d      	mov	r5, r3
  readFrom(ADXL345_DATAX0, TO_READ, _buff); //read the acceleration data from the ADXL345
   d5034:	2206      	movs	r2, #6
   d5036:	f100 0320 	add.w	r3, r0, #32
   d503a:	2132      	movs	r1, #50	; 0x32
   d503c:	f7ff ffb9 	bl	d4fb2 <_ZN7ADXL3458readFromEhiPh>

  // each axis reading comes in 10 bit resolution, ie 2 bytes.  Least Significat Byte first!!
  // thus we are converting both bytes in to one int
  *x = (((int)_buff[1]) << 8) | _buff[0];   
   d5040:	8c23      	ldrh	r3, [r4, #32]
   d5042:	603b      	str	r3, [r7, #0]
  *y = (((int)_buff[3]) << 8) | _buff[2];
   d5044:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5046:	6033      	str	r3, [r6, #0]
  *z = (((int)_buff[5]) << 8) | _buff[4];
   d5048:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   d504a:	602b      	str	r3, [r5, #0]
   d504c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d504e <_ZN7ADXL3459readAccelEPi>:
  writeTo(ADXL345_POWER_CTL, 16);
  writeTo(ADXL345_POWER_CTL, 8); 
}

// Reads the acceleration into three variable x, y and z
void ADXL345::readAccel(int *xyz){
   d504e:	460a      	mov	r2, r1
  readAccel(xyz, xyz + 1, xyz + 2);
   d5050:	f101 0308 	add.w	r3, r1, #8
   d5054:	3204      	adds	r2, #4
   d5056:	f7ff bfe8 	b.w	d502a <_ZN7ADXL3459readAccelEPiS0_S0_>

000d505a <_ZN7ADXL3458get_GxyzEPd>:
  *x = (((int)_buff[1]) << 8) | _buff[0];   
  *y = (((int)_buff[3]) << 8) | _buff[2];
  *z = (((int)_buff[5]) << 8) | _buff[4];
}

void ADXL345::get_Gxyz(double *xyz){
   d505a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d505e:	b085      	sub	sp, #20
  int i;
  int xyz_int[3];
  readAccel(xyz_int);
   d5060:	af01      	add	r7, sp, #4
  *x = (((int)_buff[1]) << 8) | _buff[0];   
  *y = (((int)_buff[3]) << 8) | _buff[2];
  *z = (((int)_buff[5]) << 8) | _buff[4];
}

void ADXL345::get_Gxyz(double *xyz){
   d5062:	460d      	mov	r5, r1
  int i;
  int xyz_int[3];
  readAccel(xyz_int);
   d5064:	4639      	mov	r1, r7
  *x = (((int)_buff[1]) << 8) | _buff[0];   
  *y = (((int)_buff[3]) << 8) | _buff[2];
  *z = (((int)_buff[5]) << 8) | _buff[4];
}

void ADXL345::get_Gxyz(double *xyz){
   d5066:	4606      	mov	r6, r0
  int i;
  int xyz_int[3];
  readAccel(xyz_int);
   d5068:	f7ff fff1 	bl	d504e <_ZN7ADXL3459readAccelEPi>
   d506c:	3608      	adds	r6, #8
  for(i=0; i<3; i++){
   d506e:	2400      	movs	r4, #0
    xyz[i] = xyz_int[i] * gains[i];
   d5070:	e8f6 8902 	ldrd	r8, r9, [r6], #8
   d5074:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   d5078:	f003 fcf0 	bl	d8a5c <__aeabi_i2d>
   d507c:	4642      	mov	r2, r8
   d507e:	464b      	mov	r3, r9
   d5080:	f003 fd52 	bl	d8b28 <__aeabi_dmul>

void ADXL345::get_Gxyz(double *xyz){
  int i;
  int xyz_int[3];
  readAccel(xyz_int);
  for(i=0; i<3; i++){
   d5084:	3401      	adds	r4, #1
   d5086:	2c03      	cmp	r4, #3
    xyz[i] = xyz_int[i] * gains[i];
   d5088:	e8e5 0102 	strd	r0, r1, [r5], #8

void ADXL345::get_Gxyz(double *xyz){
  int i;
  int xyz_int[3];
  readAccel(xyz_int);
  for(i=0; i<3; i++){
   d508c:	d1f0      	bne.n	d5070 <_ZN7ADXL3458get_GxyzEPd+0x16>
    xyz[i] = xyz_int[i] * gains[i];
  }
}
   d508e:	b005      	add	sp, #20
   d5090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5094 <_ZN7ADXL34515setTapThresholdEi>:
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d5094:	2900      	cmp	r1, #0
   d5096:	dd04      	ble.n	d50a2 <_ZN7ADXL34515setTapThresholdEi+0xe>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d5098:	29fe      	cmp	r1, #254	; 0xfe
   d509a:	bfd4      	ite	le
   d509c:	460a      	movle	r2, r1
   d509e:	22ff      	movgt	r2, #255	; 0xff
   d50a0:	e000      	b.n	d50a4 <_ZN7ADXL34515setTapThresholdEi+0x10>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d50a2:	2200      	movs	r2, #0
// the scale factor is 62.5 mg/LSB
// A value of 0 may result in undesirable behavior
void ADXL345::setTapThreshold(int tapThreshold) {
  tapThreshold = min(max(tapThreshold,0),255);
  byte _b = byte (tapThreshold);
  writeTo(ADXL345_THRESH_TAP, _b);  
   d50a4:	b2d2      	uxtb	r2, r2
   d50a6:	211d      	movs	r1, #29
   d50a8:	f7ff bf52 	b.w	d4f50 <_ZN7ADXL3457writeToEhh>

000d50ac <_ZN7ADXL34515getTapThresholdEv>:
}

// Gets the THRESH_TAP byte value
// return value is comprised between 0 and 255
// the scale factor is 62.5 mg/LSB
int ADXL345::getTapThreshold() {
   d50ac:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_THRESH_TAP, 1, &_b);  
   d50ae:	2201      	movs	r2, #1
   d50b0:	f10d 0307 	add.w	r3, sp, #7
   d50b4:	211d      	movs	r1, #29
   d50b6:	f7ff ff7c 	bl	d4fb2 <_ZN7ADXL3458readFromEhiPh>
  return int (_b);
}
   d50ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d50be:	b003      	add	sp, #12
   d50c0:	f85d fb04 	ldr.w	pc, [sp], #4

000d50c4 <_ZN7ADXL34512setAxisGainsEPd>:

// set/get the gain for each axis in Gs / count
void ADXL345::setAxisGains(double *_gains){
   d50c4:	b530      	push	{r4, r5, lr}
   d50c6:	f100 0308 	add.w	r3, r0, #8
   d50ca:	3020      	adds	r0, #32
  int i;
  for(i = 0; i < 3; i++){
    gains[i] = _gains[i];
   d50cc:	e8f1 4502 	ldrd	r4, r5, [r1], #8
   d50d0:	e8e3 4502 	strd	r4, r5, [r3], #8
}

// set/get the gain for each axis in Gs / count
void ADXL345::setAxisGains(double *_gains){
  int i;
  for(i = 0; i < 3; i++){
   d50d4:	4283      	cmp	r3, r0
   d50d6:	d1f9      	bne.n	d50cc <_ZN7ADXL34512setAxisGainsEPd+0x8>
    gains[i] = _gains[i];
  }
}
   d50d8:	bd30      	pop	{r4, r5, pc}

000d50da <_ZN7ADXL34512getAxisGainsEPd>:
void ADXL345::getAxisGains(double *_gains){
   d50da:	b530      	push	{r4, r5, lr}
   d50dc:	f100 0308 	add.w	r3, r0, #8
   d50e0:	3020      	adds	r0, #32
  int i;
  for(i = 0; i < 3; i++){
    _gains[i] = gains[i];
   d50e2:	e8f3 4502 	ldrd	r4, r5, [r3], #8
    gains[i] = _gains[i];
  }
}
void ADXL345::getAxisGains(double *_gains){
  int i;
  for(i = 0; i < 3; i++){
   d50e6:	4283      	cmp	r3, r0
    _gains[i] = gains[i];
   d50e8:	e8e1 4502 	strd	r4, r5, [r1], #8
    gains[i] = _gains[i];
  }
}
void ADXL345::getAxisGains(double *_gains){
  int i;
  for(i = 0; i < 3; i++){
   d50ec:	d1f9      	bne.n	d50e2 <_ZN7ADXL34512getAxisGainsEPd+0x8>
    _gains[i] = gains[i];
  }
}
   d50ee:	bd30      	pop	{r4, r5, pc}

000d50f0 <_ZN7ADXL34513setAxisOffsetEiii>:

// Sets the OFSX, OFSY and OFSZ bytes
// OFSX, OFSY and OFSZ are user offset adjustments in twos complement format with
// a scale factor of 15,6mg/LSB
// OFSX, OFSY and OFSZ should be comprised between 
void ADXL345::setAxisOffset(int x, int y, int z) {
   d50f0:	b570      	push	{r4, r5, r6, lr}
   d50f2:	4604      	mov	r4, r0
   d50f4:	4616      	mov	r6, r2
  writeTo(ADXL345_OFSX, byte (x));  
   d50f6:	b2ca      	uxtb	r2, r1
   d50f8:	211e      	movs	r1, #30

// Sets the OFSX, OFSY and OFSZ bytes
// OFSX, OFSY and OFSZ are user offset adjustments in twos complement format with
// a scale factor of 15,6mg/LSB
// OFSX, OFSY and OFSZ should be comprised between 
void ADXL345::setAxisOffset(int x, int y, int z) {
   d50fa:	461d      	mov	r5, r3
  writeTo(ADXL345_OFSX, byte (x));  
   d50fc:	f7ff ff28 	bl	d4f50 <_ZN7ADXL3457writeToEhh>
  writeTo(ADXL345_OFSY, byte (y));  
   d5100:	b2f2      	uxtb	r2, r6
   d5102:	4620      	mov	r0, r4
   d5104:	211f      	movs	r1, #31
   d5106:	f7ff ff23 	bl	d4f50 <_ZN7ADXL3457writeToEhh>
  writeTo(ADXL345_OFSZ, byte (z));  
   d510a:	b2ea      	uxtb	r2, r5
   d510c:	4620      	mov	r0, r4
   d510e:	2120      	movs	r1, #32
}
   d5110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
// a scale factor of 15,6mg/LSB
// OFSX, OFSY and OFSZ should be comprised between 
void ADXL345::setAxisOffset(int x, int y, int z) {
  writeTo(ADXL345_OFSX, byte (x));  
  writeTo(ADXL345_OFSY, byte (y));  
  writeTo(ADXL345_OFSZ, byte (z));  
   d5114:	f7ff bf1c 	b.w	d4f50 <_ZN7ADXL3457writeToEhh>

000d5118 <_ZN7ADXL34513getAxisOffsetEPiS0_S0_>:
}

// Gets the OFSX, OFSY and OFSZ bytes
void ADXL345::getAxisOffset(int* x, int* y, int*z) {
   d5118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d511a:	460f      	mov	r7, r1
   d511c:	4616      	mov	r6, r2
   d511e:	461d      	mov	r5, r3
  byte _b;
  readFrom(ADXL345_OFSX, 1, &_b);  
   d5120:	2201      	movs	r2, #1
   d5122:	f10d 0307 	add.w	r3, sp, #7
   d5126:	211e      	movs	r1, #30
  writeTo(ADXL345_OFSY, byte (y));  
  writeTo(ADXL345_OFSZ, byte (z));  
}

// Gets the OFSX, OFSY and OFSZ bytes
void ADXL345::getAxisOffset(int* x, int* y, int*z) {
   d5128:	4604      	mov	r4, r0
  byte _b;
  readFrom(ADXL345_OFSX, 1, &_b);  
   d512a:	f7ff ff42 	bl	d4fb2 <_ZN7ADXL3458readFromEhiPh>
  *x = int (_b);
   d512e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5132:	603b      	str	r3, [r7, #0]
  readFrom(ADXL345_OFSY, 1, &_b);  
   d5134:	4620      	mov	r0, r4
   d5136:	f10d 0307 	add.w	r3, sp, #7
   d513a:	2201      	movs	r2, #1
   d513c:	211f      	movs	r1, #31
   d513e:	f7ff ff38 	bl	d4fb2 <_ZN7ADXL3458readFromEhiPh>
  *y = int (_b);
   d5142:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5146:	6033      	str	r3, [r6, #0]
  readFrom(ADXL345_OFSZ, 1, &_b);  
   d5148:	2201      	movs	r2, #1
   d514a:	f10d 0307 	add.w	r3, sp, #7
   d514e:	2120      	movs	r1, #32
   d5150:	4620      	mov	r0, r4
   d5152:	f7ff ff2e 	bl	d4fb2 <_ZN7ADXL3458readFromEhiPh>
  *z = int (_b);
   d5156:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d515a:	602b      	str	r3, [r5, #0]
}
   d515c:	b003      	add	sp, #12
   d515e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5160 <_ZN7ADXL34514setTapDurationEi>:
   d5160:	2900      	cmp	r1, #0
   d5162:	dd04      	ble.n	d516e <_ZN7ADXL34514setTapDurationEi+0xe>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d5164:	29fe      	cmp	r1, #254	; 0xfe
   d5166:	bfd4      	ite	le
   d5168:	460a      	movle	r2, r1
   d516a:	22ff      	movgt	r2, #255	; 0xff
   d516c:	e000      	b.n	d5170 <_ZN7ADXL34514setTapDurationEi+0x10>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d516e:	2200      	movs	r2, #0
// The scale factor is 625¦Ìs/LSB
// A value of 0 disables the tap/double tap funcitons. Max value is 255.
void ADXL345::setTapDuration(int tapDuration) {
  tapDuration = min(max(tapDuration,0),255);
  byte _b = byte (tapDuration);
  writeTo(ADXL345_DUR, _b);  
   d5170:	b2d2      	uxtb	r2, r2
   d5172:	2121      	movs	r1, #33	; 0x21
   d5174:	f7ff beec 	b.w	d4f50 <_ZN7ADXL3457writeToEhh>

000d5178 <_ZN7ADXL34514getTapDurationEv>:
}

// Gets the DUR byte
int ADXL345::getTapDuration() {
   d5178:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_DUR, 1, &_b);  
   d517a:	2201      	movs	r2, #1
   d517c:	f10d 0307 	add.w	r3, sp, #7
   d5180:	2121      	movs	r1, #33	; 0x21
   d5182:	f7ff ff16 	bl	d4fb2 <_ZN7ADXL3458readFromEhiPh>
  return int (_b);
}
   d5186:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d518a:	b003      	add	sp, #12
   d518c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5190 <_ZN7ADXL34519setDoubleTapLatencyEi>:
// of the time window, during which a possible second tap can be detected.
// The scale factor is 1.25ms/LSB. A value of 0 disables the double tap function.
// It accepts a maximum value of 255.
void ADXL345::setDoubleTapLatency(int doubleTapLatency) {
  byte _b = byte (doubleTapLatency);
  writeTo(ADXL345_LATENT, _b);  
   d5190:	b2ca      	uxtb	r2, r1
   d5192:	2122      	movs	r1, #34	; 0x22
   d5194:	f7ff bedc 	b.w	d4f50 <_ZN7ADXL3457writeToEhh>

000d5198 <_ZN7ADXL34519getDoubleTapLatencyEv>:
}

// Gets the Latent value
int ADXL345::getDoubleTapLatency() {
   d5198:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_LATENT, 1, &_b);  
   d519a:	2201      	movs	r2, #1
   d519c:	f10d 0307 	add.w	r3, sp, #7
   d51a0:	2122      	movs	r1, #34	; 0x22
   d51a2:	f7ff ff06 	bl	d4fb2 <_ZN7ADXL3458readFromEhiPh>
  return int (_b);
}
   d51a6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d51aa:	b003      	add	sp, #12
   d51ac:	f85d fb04 	ldr.w	pc, [sp], #4

000d51b0 <_ZN7ADXL34518setDoubleTapWindowEi>:
   d51b0:	2900      	cmp	r1, #0
   d51b2:	dd04      	ble.n	d51be <_ZN7ADXL34518setDoubleTapWindowEi+0xe>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d51b4:	29fe      	cmp	r1, #254	; 0xfe
   d51b6:	bfd4      	ite	le
   d51b8:	460a      	movle	r2, r1
   d51ba:	22ff      	movgt	r2, #255	; 0xff
   d51bc:	e000      	b.n	d51c0 <_ZN7ADXL34518setDoubleTapWindowEi+0x10>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d51be:	2200      	movs	r2, #0
// during which a second valud tap can begin. The scale factor is 1.25ms/LSB. A
// value of 0 disables the double tap function. The maximum value is 255.
void ADXL345::setDoubleTapWindow(int doubleTapWindow) {
  doubleTapWindow = min(max(doubleTapWindow,0),255);
  byte _b = byte (doubleTapWindow);
  writeTo(ADXL345_WINDOW, _b);  
   d51c0:	b2d2      	uxtb	r2, r2
   d51c2:	2123      	movs	r1, #35	; 0x23
   d51c4:	f7ff bec4 	b.w	d4f50 <_ZN7ADXL3457writeToEhh>

000d51c8 <_ZN7ADXL34518getDoubleTapWindowEv>:
}

// Gets the Window register
int ADXL345::getDoubleTapWindow() {
   d51c8:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_WINDOW, 1, &_b);  
   d51ca:	2201      	movs	r2, #1
   d51cc:	f10d 0307 	add.w	r3, sp, #7
   d51d0:	2123      	movs	r1, #35	; 0x23
   d51d2:	f7ff feee 	bl	d4fb2 <_ZN7ADXL3458readFromEhiPh>
  return int (_b);
}
   d51d6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d51da:	b003      	add	sp, #12
   d51dc:	f85d fb04 	ldr.w	pc, [sp], #4

000d51e0 <_ZN7ADXL34520setActivityThresholdEi>:
   d51e0:	2900      	cmp	r1, #0
   d51e2:	dd04      	ble.n	d51ee <_ZN7ADXL34520setActivityThresholdEi+0xe>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d51e4:	29fe      	cmp	r1, #254	; 0xfe
   d51e6:	bfd4      	ite	le
   d51e8:	460a      	movle	r2, r1
   d51ea:	22ff      	movgt	r2, #255	; 0xff
   d51ec:	e000      	b.n	d51f0 <_ZN7ADXL34520setActivityThresholdEi+0x10>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d51ee:	2200      	movs	r2, #0
// factor is 62.5mg/LSB. A value of 0 may result in undesirable behavior if the 
// activity interrupt is enabled. The maximum value is 255.
void ADXL345::setActivityThreshold(int activityThreshold) {
  activityThreshold = min(max(activityThreshold,0),255);
  byte _b = byte (activityThreshold);
  writeTo(ADXL345_THRESH_ACT, _b);  
   d51f0:	b2d2      	uxtb	r2, r2
   d51f2:	2124      	movs	r1, #36	; 0x24
   d51f4:	f7ff beac 	b.w	d4f50 <_ZN7ADXL3457writeToEhh>

000d51f8 <_ZN7ADXL34520getActivityThresholdEv>:
}

// Gets the THRESH_ACT byte
int ADXL345::getActivityThreshold() {
   d51f8:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_THRESH_ACT, 1, &_b);  
   d51fa:	2201      	movs	r2, #1
   d51fc:	f10d 0307 	add.w	r3, sp, #7
   d5200:	2124      	movs	r1, #36	; 0x24
   d5202:	f7ff fed6 	bl	d4fb2 <_ZN7ADXL3458readFromEhiPh>
  return int (_b);
}
   d5206:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d520a:	b003      	add	sp, #12
   d520c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5210 <_ZN7ADXL34522setInactivityThresholdEi>:
   d5210:	2900      	cmp	r1, #0
   d5212:	dd04      	ble.n	d521e <_ZN7ADXL34522setInactivityThresholdEi+0xe>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d5214:	29fe      	cmp	r1, #254	; 0xfe
   d5216:	bfd4      	ite	le
   d5218:	460a      	movle	r2, r1
   d521a:	22ff      	movgt	r2, #255	; 0xff
   d521c:	e000      	b.n	d5220 <_ZN7ADXL34522setInactivityThresholdEi+0x10>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d521e:	2200      	movs	r2, #0
// factor is 62.5mg/LSB. A value of 0 may result in undesirable behavior if the 
// inactivity interrupt is enabled. The maximum value is 255.
void ADXL345::setInactivityThreshold(int inactivityThreshold) {
  inactivityThreshold = min(max(inactivityThreshold,0),255);
  byte _b = byte (inactivityThreshold);
  writeTo(ADXL345_THRESH_INACT, _b);  
   d5220:	b2d2      	uxtb	r2, r2
   d5222:	2125      	movs	r1, #37	; 0x25
   d5224:	f7ff be94 	b.w	d4f50 <_ZN7ADXL3457writeToEhh>

000d5228 <_ZN7ADXL34522getInactivityThresholdEv>:
}

// Gets the THRESH_INACT byte
int ADXL345::getInactivityThreshold() {
   d5228:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_THRESH_INACT, 1, &_b);  
   d522a:	2201      	movs	r2, #1
   d522c:	f10d 0307 	add.w	r3, sp, #7
   d5230:	2125      	movs	r1, #37	; 0x25
   d5232:	f7ff febe 	bl	d4fb2 <_ZN7ADXL3458readFromEhiPh>
  return int (_b);
}
   d5236:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d523a:	b003      	add	sp, #12
   d523c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5240 <_ZN7ADXL34517setTimeInactivityEi>:
   d5240:	2900      	cmp	r1, #0
   d5242:	dd04      	ble.n	d524e <_ZN7ADXL34517setTimeInactivityEi+0xe>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d5244:	29fe      	cmp	r1, #254	; 0xfe
   d5246:	bfd4      	ite	le
   d5248:	460a      	movle	r2, r1
   d524a:	22ff      	movgt	r2, #255	; 0xff
   d524c:	e000      	b.n	d5250 <_ZN7ADXL34517setTimeInactivityEi+0x10>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d524e:	2200      	movs	r2, #0
// register for inactivity to be declared. The scale factor is 1sec/LSB. The value must
// be between 0 and 255.
void ADXL345::setTimeInactivity(int timeInactivity) {
  timeInactivity = min(max(timeInactivity,0),255);
  byte _b = byte (timeInactivity);
  writeTo(ADXL345_TIME_INACT, _b);  
   d5250:	b2d2      	uxtb	r2, r2
   d5252:	2126      	movs	r1, #38	; 0x26
   d5254:	f7ff be7c 	b.w	d4f50 <_ZN7ADXL3457writeToEhh>

000d5258 <_ZN7ADXL34517getTimeInactivityEv>:
}

// Gets the TIME_INACT register
int ADXL345::getTimeInactivity() {
   d5258:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_TIME_INACT, 1, &_b);  
   d525a:	2201      	movs	r2, #1
   d525c:	f10d 0307 	add.w	r3, sp, #7
   d5260:	2126      	movs	r1, #38	; 0x26
   d5262:	f7ff fea6 	bl	d4fb2 <_ZN7ADXL3458readFromEhiPh>
  return int (_b);
}
   d5266:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d526a:	b003      	add	sp, #12
   d526c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5270 <_ZN7ADXL34520setFreeFallThresholdEi>:
   d5270:	2900      	cmp	r1, #0
   d5272:	dd04      	ble.n	d527e <_ZN7ADXL34520setFreeFallThresholdEi+0xe>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d5274:	29fe      	cmp	r1, #254	; 0xfe
   d5276:	bfd4      	ite	le
   d5278:	460a      	movle	r2, r1
   d527a:	22ff      	movgt	r2, #255	; 0xff
   d527c:	e000      	b.n	d5280 <_ZN7ADXL34520setFreeFallThresholdEi+0x10>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d527e:	2200      	movs	r2, #0
// scale factor is 62.5mg/LSB. A value of 0 may result in undesirable behavior if the free-fall
// interrupt is enabled. The maximum value is 255.
void ADXL345::setFreeFallThreshold(int freeFallThreshold) {
  freeFallThreshold = min(max(freeFallThreshold,0),255);
  byte _b = byte (freeFallThreshold);
  writeTo(ADXL345_THRESH_FF, _b);  
   d5280:	b2d2      	uxtb	r2, r2
   d5282:	2128      	movs	r1, #40	; 0x28
   d5284:	f7ff be64 	b.w	d4f50 <_ZN7ADXL3457writeToEhh>

000d5288 <_ZN7ADXL34520getFreeFallThresholdEv>:
}

// Gets the THRESH_FF register.
int ADXL345::getFreeFallThreshold() {
   d5288:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_THRESH_FF, 1, &_b);  
   d528a:	2201      	movs	r2, #1
   d528c:	f10d 0307 	add.w	r3, sp, #7
   d5290:	2128      	movs	r1, #40	; 0x28
   d5292:	f7ff fe8e 	bl	d4fb2 <_ZN7ADXL3458readFromEhiPh>
  return int (_b);
}
   d5296:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d529a:	b003      	add	sp, #12
   d529c:	f85d fb04 	ldr.w	pc, [sp], #4

000d52a0 <_ZN7ADXL34519setFreeFallDurationEi>:
   d52a0:	2900      	cmp	r1, #0
   d52a2:	dd04      	ble.n	d52ae <_ZN7ADXL34519setFreeFallDurationEi+0xe>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d52a4:	29fe      	cmp	r1, #254	; 0xfe
   d52a6:	bfd4      	ite	le
   d52a8:	460a      	movle	r2, r1
   d52aa:	22ff      	movgt	r2, #255	; 0xff
   d52ac:	e000      	b.n	d52b0 <_ZN7ADXL34519setFreeFallDurationEi+0x10>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d52ae:	2200      	movs	r2, #0
// interrupt. The scale factor is 5ms/LSB. A value of 0 may result in undesirable behavior if
// the free-fall interrupt is enabled. The maximum value is 255.
void ADXL345::setFreeFallDuration(int freeFallDuration) {
  freeFallDuration = min(max(freeFallDuration,0),255);  
  byte _b = byte (freeFallDuration);
  writeTo(ADXL345_TIME_FF, _b);  
   d52b0:	b2d2      	uxtb	r2, r2
   d52b2:	2129      	movs	r1, #41	; 0x29
   d52b4:	f7ff be4c 	b.w	d4f50 <_ZN7ADXL3457writeToEhh>

000d52b8 <_ZN7ADXL34519getFreeFallDurationEv>:
}

// Gets the TIME_FF register.
int ADXL345::getFreeFallDuration() {
   d52b8:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_TIME_FF, 1, &_b);  
   d52ba:	2201      	movs	r2, #1
   d52bc:	f10d 0307 	add.w	r3, sp, #7
   d52c0:	2129      	movs	r1, #41	; 0x29
   d52c2:	f7ff fe76 	bl	d4fb2 <_ZN7ADXL3458readFromEhiPh>
  return int (_b);
}
   d52c6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d52ca:	b003      	add	sp, #12
   d52cc:	f85d fb04 	ldr.w	pc, [sp], #4

000d52d0 <_ZN7ADXL3457getRateEv>:
}
void ADXL345::setLowPower(bool state) {  
  setRegisterBit(ADXL345_BW_RATE, 4, state); 
}

double ADXL345::getRate(){
   d52d0:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_BW_RATE, 1, &_b);
   d52d2:	2201      	movs	r2, #1
   d52d4:	f10d 0307 	add.w	r3, sp, #7
   d52d8:	212c      	movs	r1, #44	; 0x2c
   d52da:	f7ff fe6a 	bl	d4fb2 <_ZN7ADXL3458readFromEhiPh>
  _b &= B00001111;
   d52de:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d52e2:	f000 000f 	and.w	r0, r0, #15
   d52e6:	f88d 0007 	strb.w	r0, [sp, #7]
  return (pow(2,((int) _b)-6)) * 6.25;
   d52ea:	3806      	subs	r0, #6
   d52ec:	f003 fbb6 	bl	d8a5c <__aeabi_i2d>
   d52f0:	ed9f 0b09 	vldr	d0, [pc, #36]	; d5318 <_ZN7ADXL3457getRateEv+0x48>
   d52f4:	ec41 0b11 	vmov	d1, r0, r1
   d52f8:	f002 f926 	bl	d7548 <pow>
   d52fc:	2200      	movs	r2, #0
   d52fe:	4b08      	ldr	r3, [pc, #32]	; (d5320 <_ZN7ADXL3457getRateEv+0x50>)
   d5300:	ec51 0b10 	vmov	r0, r1, d0
   d5304:	f003 fc10 	bl	d8b28 <__aeabi_dmul>
}
   d5308:	ec41 0b10 	vmov	d0, r0, r1
   d530c:	b003      	add	sp, #12
   d530e:	f85d fb04 	ldr.w	pc, [sp], #4
   d5312:	bf00      	nop
   d5314:	f3af 8000 	nop.w
   d5318:	00000000 	.word	0x00000000
   d531c:	40000000 	.word	0x40000000
   d5320:	40190000 	.word	0x40190000

000d5324 <_ZN7ADXL3457setRateEd>:

void ADXL345::setRate(double rate){
   d5324:	b537      	push	{r0, r1, r2, r4, r5, lr}
  byte _b,_s;
  int v = (int) (rate / 6.25);
   d5326:	4b12      	ldr	r3, [pc, #72]	; (d5370 <_ZN7ADXL3457setRateEd+0x4c>)
   d5328:	2200      	movs	r2, #0
  readFrom(ADXL345_BW_RATE, 1, &_b);
  _b &= B00001111;
  return (pow(2,((int) _b)-6)) * 6.25;
}

void ADXL345::setRate(double rate){
   d532a:	4605      	mov	r5, r0
  byte _b,_s;
  int v = (int) (rate / 6.25);
   d532c:	ec51 0b10 	vmov	r0, r1, d0
   d5330:	f003 fd24 	bl	d8d7c <__aeabi_ddiv>
   d5334:	f003 fea8 	bl	d9088 <__aeabi_d2iz>
  int r = 0;
   d5338:	2400      	movs	r4, #0
  while (v >>= 1)
   d533a:	1040      	asrs	r0, r0, #1
   d533c:	d001      	beq.n	d5342 <_ZN7ADXL3457setRateEd+0x1e>
  {
    r++;
   d533e:	3401      	adds	r4, #1

void ADXL345::setRate(double rate){
  byte _b,_s;
  int v = (int) (rate / 6.25);
  int r = 0;
  while (v >>= 1)
   d5340:	e7fb      	b.n	d533a <_ZN7ADXL3457setRateEd+0x16>
  {
    r++;
  }
  if (r <= 9) { 
   d5342:	2c09      	cmp	r4, #9
   d5344:	dc11      	bgt.n	d536a <_ZN7ADXL3457setRateEd+0x46>
    readFrom(ADXL345_BW_RATE, 1, &_b);
   d5346:	2201      	movs	r2, #1
   d5348:	212c      	movs	r1, #44	; 0x2c
   d534a:	4628      	mov	r0, r5
   d534c:	f10d 0307 	add.w	r3, sp, #7
   d5350:	f7ff fe2f 	bl	d4fb2 <_ZN7ADXL3458readFromEhiPh>
    _s = (byte) (r + 6) | (_b & B11110000);
    writeTo(ADXL345_BW_RATE, _s);
   d5354:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d5358:	3406      	adds	r4, #6
   d535a:	f022 020f 	bic.w	r2, r2, #15
   d535e:	4322      	orrs	r2, r4
   d5360:	b2d2      	uxtb	r2, r2
   d5362:	212c      	movs	r1, #44	; 0x2c
   d5364:	4628      	mov	r0, r5
   d5366:	f7ff fdf3 	bl	d4f50 <_ZN7ADXL3457writeToEhh>
  }
}
   d536a:	b003      	add	sp, #12
   d536c:	bd30      	pop	{r4, r5, pc}
   d536e:	bf00      	nop
   d5370:	40190000 	.word	0x40190000

000d5374 <_ZN7ADXL34518getInterruptSourceEv>:
  byte bw_code;
  readFrom(ADXL345_BW_RATE, 1, &bw_code);
  return bw_code;
}

byte ADXL345::getInterruptSource() {
   d5374:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_INT_SOURCE, 1, &_b);
   d5376:	2201      	movs	r2, #1
   d5378:	f10d 0307 	add.w	r3, sp, #7
   d537c:	2130      	movs	r1, #48	; 0x30
   d537e:	f7ff fe18 	bl	d4fb2 <_ZN7ADXL3458readFromEhiPh>
  return _b;
}
   d5382:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5386:	b003      	add	sp, #12
   d5388:	f85d fb04 	ldr.w	pc, [sp], #4

000d538c <_ZN7ADXL34514setRegisterBitEhib>:

void ADXL345::setInterrupt(byte interruptBit, bool state) {
  setRegisterBit(ADXL345_INT_ENABLE, interruptBit, state);
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
   d538c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d538e:	4616      	mov	r6, r2
   d5390:	461f      	mov	r7, r3
  byte _b;
  readFrom(regAdress, 1, &_b);
   d5392:	2201      	movs	r2, #1
   d5394:	f10d 0307 	add.w	r3, sp, #7

void ADXL345::setInterrupt(byte interruptBit, bool state) {
  setRegisterBit(ADXL345_INT_ENABLE, interruptBit, state);
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
   d5398:	4604      	mov	r4, r0
   d539a:	460d      	mov	r5, r1
  byte _b;
  readFrom(regAdress, 1, &_b);
   d539c:	f7ff fe09 	bl	d4fb2 <_ZN7ADXL3458readFromEhiPh>
   d53a0:	2201      	movs	r2, #1
   d53a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (state) {
    _b |= (1 << bitPos);  // forces nth bit of _b to be 1.  all other bits left alone.
   d53a6:	40b2      	lsls	r2, r6
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
  byte _b;
  readFrom(regAdress, 1, &_b);
  if (state) {
   d53a8:	b10f      	cbz	r7, d53ae <_ZN7ADXL34514setRegisterBitEhib+0x22>
    _b |= (1 << bitPos);  // forces nth bit of _b to be 1.  all other bits left alone.
   d53aa:	4313      	orrs	r3, r2
   d53ac:	e001      	b.n	d53b2 <_ZN7ADXL34514setRegisterBitEhib+0x26>
  } 
  else {
    _b &= ~(1 << bitPos); // forces nth bit of _b to be 0.  all other bits left alone.
   d53ae:	ea23 0302 	bic.w	r3, r3, r2
   d53b2:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  writeTo(regAdress, _b);  
   d53b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d53ba:	4629      	mov	r1, r5
   d53bc:	4620      	mov	r0, r4
   d53be:	f7ff fdc7 	bl	d4f50 <_ZN7ADXL3457writeToEhh>
}
   d53c2:	b003      	add	sp, #12
   d53c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d53c6 <_ZN7ADXL34514setSelfTestBitEb>:

// Sets the SELF-TEST bit
// if set to 1 it applies a self-test force to the sensor causing a shift in the output data
// if set to 0 it disables the self-test force
void ADXL345::setSelfTestBit(bool selfTestBit) {
  setRegisterBit(ADXL345_DATA_FORMAT, 7, selfTestBit);
   d53c6:	460b      	mov	r3, r1
   d53c8:	2207      	movs	r2, #7
   d53ca:	2131      	movs	r1, #49	; 0x31
   d53cc:	f7ff bfde 	b.w	d538c <_ZN7ADXL34514setRegisterBitEhib>

000d53d0 <_ZN7ADXL34512setActivityXEb>:
bool ADXL345::isInactivityZEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 0); 
}

void ADXL345::setActivityX(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 6, state); 
   d53d0:	460b      	mov	r3, r1
   d53d2:	2206      	movs	r2, #6
   d53d4:	2127      	movs	r1, #39	; 0x27
   d53d6:	f7ff bfd9 	b.w	d538c <_ZN7ADXL34514setRegisterBitEhib>

000d53da <_ZN7ADXL34512setActivityYEb>:
}
void ADXL345::setActivityY(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 5, state); 
   d53da:	460b      	mov	r3, r1
   d53dc:	2205      	movs	r2, #5
   d53de:	2127      	movs	r1, #39	; 0x27
   d53e0:	f7ff bfd4 	b.w	d538c <_ZN7ADXL34514setRegisterBitEhib>

000d53e4 <_ZN7ADXL34512setActivityZEb>:
}
void ADXL345::setActivityZ(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 4, state); 
   d53e4:	460b      	mov	r3, r1
   d53e6:	2204      	movs	r2, #4
   d53e8:	2127      	movs	r1, #39	; 0x27
   d53ea:	f7ff bfcf 	b.w	d538c <_ZN7ADXL34514setRegisterBitEhib>

000d53ee <_ZN7ADXL34514setInactivityXEb>:
}
void ADXL345::setInactivityX(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 2, state); 
   d53ee:	460b      	mov	r3, r1
   d53f0:	2202      	movs	r2, #2
   d53f2:	2127      	movs	r1, #39	; 0x27
   d53f4:	f7ff bfca 	b.w	d538c <_ZN7ADXL34514setRegisterBitEhib>

000d53f8 <_ZN7ADXL34514setInactivityYEb>:
}
void ADXL345::setInactivityY(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 1, state); 
   d53f8:	460b      	mov	r3, r1
   d53fa:	2201      	movs	r2, #1
   d53fc:	2127      	movs	r1, #39	; 0x27
   d53fe:	f7ff bfc5 	b.w	d538c <_ZN7ADXL34514setRegisterBitEhib>

000d5402 <_ZN7ADXL34514setInactivityZEb>:
}
void ADXL345::setInactivityZ(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 0, state); 
   d5402:	460b      	mov	r3, r1
   d5404:	2200      	movs	r2, #0
   d5406:	2127      	movs	r1, #39	; 0x27
   d5408:	f7ff bfc0 	b.w	d538c <_ZN7ADXL34514setRegisterBitEhib>

000d540c <_ZN7ADXL34513setActivityAcEb>:
bool ADXL345::isInactivityAc(){ 
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 3); 
}

void ADXL345::setActivityAc(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 7, state); 
   d540c:	460b      	mov	r3, r1
   d540e:	2207      	movs	r2, #7
   d5410:	2127      	movs	r1, #39	; 0x27
   d5412:	f7ff bfbb 	b.w	d538c <_ZN7ADXL34514setRegisterBitEhib>

000d5416 <_ZN7ADXL34515setInactivityAcEb>:
}
void ADXL345::setInactivityAc(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 3, state); 
   d5416:	460b      	mov	r3, r1
   d5418:	2203      	movs	r2, #3
   d541a:	2127      	movs	r1, #39	; 0x27
   d541c:	f7ff bfb6 	b.w	d538c <_ZN7ADXL34514setRegisterBitEhib>

000d5420 <_ZN7ADXL34514setSuppressBitEb>:

bool ADXL345::getSuppressBit(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 3); 
}
void ADXL345::setSuppressBit(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 3, state); 
   d5420:	460b      	mov	r3, r1
   d5422:	2203      	movs	r2, #3
   d5424:	212a      	movs	r1, #42	; 0x2a
   d5426:	f7ff bfb1 	b.w	d538c <_ZN7ADXL34514setRegisterBitEhib>

000d542a <_ZN7ADXL34518setTapDetectionOnXEb>:

bool ADXL345::isTapDetectionOnX(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 2); 
}
void ADXL345::setTapDetectionOnX(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 2, state); 
   d542a:	460b      	mov	r3, r1
   d542c:	2202      	movs	r2, #2
   d542e:	212a      	movs	r1, #42	; 0x2a
   d5430:	f7ff bfac 	b.w	d538c <_ZN7ADXL34514setRegisterBitEhib>

000d5434 <_ZN7ADXL34518setTapDetectionOnYEb>:
}
bool ADXL345::isTapDetectionOnY(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 1); 
}
void ADXL345::setTapDetectionOnY(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 1, state); 
   d5434:	460b      	mov	r3, r1
   d5436:	2201      	movs	r2, #1
   d5438:	212a      	movs	r1, #42	; 0x2a
   d543a:	f7ff bfa7 	b.w	d538c <_ZN7ADXL34514setRegisterBitEhib>

000d543e <_ZN7ADXL34518setTapDetectionOnZEb>:
}
bool ADXL345::isTapDetectionOnZ(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 0); 
}
void ADXL345::setTapDetectionOnZ(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 0, state); 
   d543e:	460b      	mov	r3, r1
   d5440:	2200      	movs	r2, #0
   d5442:	212a      	movs	r1, #42	; 0x2a
   d5444:	f7ff bfa2 	b.w	d538c <_ZN7ADXL34514setRegisterBitEhib>

000d5448 <_ZN7ADXL34511setLowPowerEb>:

bool ADXL345::isLowPower(){ 
  return getRegisterBit(ADXL345_BW_RATE, 4); 
}
void ADXL345::setLowPower(bool state) {  
  setRegisterBit(ADXL345_BW_RATE, 4, state); 
   d5448:	460b      	mov	r3, r1
   d544a:	2204      	movs	r2, #4
   d544c:	212c      	movs	r1, #44	; 0x2c
   d544e:	f7ff bf9d 	b.w	d538c <_ZN7ADXL34514setRegisterBitEhib>

000d5452 <_ZN7ADXL34519setInterruptMappingEhb>:
}

// Set the mapping of an interrupt to pin1 or pin2
// eg: setInterruptMapping(ADXL345_INT_DOUBLE_TAP_BIT,ADXL345_INT2_PIN);
void ADXL345::setInterruptMapping(byte interruptBit, bool interruptPin) {
  setRegisterBit(ADXL345_INT_MAP, interruptBit, interruptPin);
   d5452:	4613      	mov	r3, r2
   d5454:	460a      	mov	r2, r1
   d5456:	212f      	movs	r1, #47	; 0x2f
   d5458:	f7ff bf98 	b.w	d538c <_ZN7ADXL34514setRegisterBitEhib>

000d545c <_ZN7ADXL34512setInterruptEhb>:
bool ADXL345::isInterruptEnabled(byte interruptBit) {
  return getRegisterBit(ADXL345_INT_ENABLE,interruptBit);
}

void ADXL345::setInterrupt(byte interruptBit, bool state) {
  setRegisterBit(ADXL345_INT_ENABLE, interruptBit, state);
   d545c:	4613      	mov	r3, r2
   d545e:	460a      	mov	r2, r1
   d5460:	212e      	movs	r1, #46	; 0x2e
   d5462:	f7ff bf93 	b.w	d538c <_ZN7ADXL34514setRegisterBitEhib>

000d5466 <_ZN7ADXL34514getRegisterBitEhi>:
    _b &= ~(1 << bitPos); // forces nth bit of _b to be 0.  all other bits left alone.
  }
  writeTo(regAdress, _b);  
}

bool ADXL345::getRegisterBit(byte regAdress, int bitPos) {
   d5466:	b513      	push	{r0, r1, r4, lr}
   d5468:	4614      	mov	r4, r2
  byte _b;
  readFrom(regAdress, 1, &_b);
   d546a:	f10d 0307 	add.w	r3, sp, #7
   d546e:	2201      	movs	r2, #1
   d5470:	f7ff fd9f 	bl	d4fb2 <_ZN7ADXL3458readFromEhiPh>
  return ((_b >> bitPos) & 1);
   d5474:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5478:	4120      	asrs	r0, r4
}
   d547a:	f000 0001 	and.w	r0, r0, #1
   d547e:	b002      	add	sp, #8
   d5480:	bd10      	pop	{r4, pc}

000d5482 <_ZN7ADXL34514getSelfTestBitEv>:
  _s |= (_b & B11101100);
  writeTo(ADXL345_DATA_FORMAT, _s);
}
// gets the state of the SELF_TEST bit
bool ADXL345::getSelfTestBit() {
  return getRegisterBit(ADXL345_DATA_FORMAT, 7);
   d5482:	2207      	movs	r2, #7
   d5484:	2131      	movs	r1, #49	; 0x31
   d5486:	f7ff bfee 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d548a <_ZN7ADXL34518isActivityXEnabledEv>:
  readFrom(ADXL345_TIME_FF, 1, &_b);  
  return int (_b);
}

bool ADXL345::isActivityXEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 6); 
   d548a:	2206      	movs	r2, #6
   d548c:	2127      	movs	r1, #39	; 0x27
   d548e:	f7ff bfea 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d5492 <_ZN7ADXL34518isActivityYEnabledEv>:
}
bool ADXL345::isActivityYEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 5); 
   d5492:	2205      	movs	r2, #5
   d5494:	2127      	movs	r1, #39	; 0x27
   d5496:	f7ff bfe6 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d549a <_ZN7ADXL34518isActivityZEnabledEv>:
}
bool ADXL345::isActivityZEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 4); 
   d549a:	2204      	movs	r2, #4
   d549c:	2127      	movs	r1, #39	; 0x27
   d549e:	f7ff bfe2 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d54a2 <_ZN7ADXL34520isInactivityXEnabledEv>:
}
bool ADXL345::isInactivityXEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 2); 
   d54a2:	2202      	movs	r2, #2
   d54a4:	2127      	movs	r1, #39	; 0x27
   d54a6:	f7ff bfde 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d54aa <_ZN7ADXL34520isInactivityYEnabledEv>:
}
bool ADXL345::isInactivityYEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 1); 
   d54aa:	2201      	movs	r2, #1
   d54ac:	2127      	movs	r1, #39	; 0x27
   d54ae:	f7ff bfda 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d54b2 <_ZN7ADXL34520isInactivityZEnabledEv>:
}
bool ADXL345::isInactivityZEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 0); 
   d54b2:	2200      	movs	r2, #0
   d54b4:	2127      	movs	r1, #39	; 0x27
   d54b6:	f7ff bfd6 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d54ba <_ZN7ADXL34514isInactivityAcEv>:

bool ADXL345::isActivityAc() { 
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 7); 
}
bool ADXL345::isInactivityAc(){ 
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 3); 
   d54ba:	2203      	movs	r2, #3
   d54bc:	2127      	movs	r1, #39	; 0x27
   d54be:	f7ff bfd2 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d54c2 <_ZN7ADXL34514getSuppressBitEv>:
void ADXL345::setInactivityAc(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 3, state); 
}

bool ADXL345::getSuppressBit(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 3); 
   d54c2:	2203      	movs	r2, #3
   d54c4:	212a      	movs	r1, #42	; 0x2a
   d54c6:	f7ff bfce 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d54ca <_ZN7ADXL34517isTapDetectionOnXEv>:
void ADXL345::setSuppressBit(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 3, state); 
}

bool ADXL345::isTapDetectionOnX(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 2); 
   d54ca:	2202      	movs	r2, #2
   d54cc:	212a      	movs	r1, #42	; 0x2a
   d54ce:	f7ff bfca 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d54d2 <_ZN7ADXL34517isTapDetectionOnYEv>:
}
void ADXL345::setTapDetectionOnX(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 2, state); 
}
bool ADXL345::isTapDetectionOnY(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 1); 
   d54d2:	2201      	movs	r2, #1
   d54d4:	212a      	movs	r1, #42	; 0x2a
   d54d6:	f7ff bfc6 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d54da <_ZN7ADXL34517isTapDetectionOnZEv>:
}
void ADXL345::setTapDetectionOnY(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 1, state); 
}
bool ADXL345::isTapDetectionOnZ(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 0); 
   d54da:	2200      	movs	r2, #0
   d54dc:	212a      	movs	r1, #42	; 0x2a
   d54de:	f7ff bfc2 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d54e2 <_ZN7ADXL34519isActivitySourceOnXEv>:
void ADXL345::setTapDetectionOnZ(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 0, state); 
}

bool ADXL345::isActivitySourceOnX(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 6); 
   d54e2:	2206      	movs	r2, #6
   d54e4:	212b      	movs	r1, #43	; 0x2b
   d54e6:	f7ff bfbe 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d54ea <_ZN7ADXL34519isActivitySourceOnYEv>:
}
bool ADXL345::isActivitySourceOnY(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 5); 
   d54ea:	2205      	movs	r2, #5
   d54ec:	212b      	movs	r1, #43	; 0x2b
   d54ee:	f7ff bfba 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d54f2 <_ZN7ADXL34519isActivitySourceOnZEv>:
}
bool ADXL345::isActivitySourceOnZ(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 4); 
   d54f2:	2204      	movs	r2, #4
   d54f4:	212b      	movs	r1, #43	; 0x2b
   d54f6:	f7ff bfb6 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d54fa <_ZN7ADXL34514isTapSourceOnXEv>:
}

bool ADXL345::isTapSourceOnX(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 2); 
   d54fa:	2202      	movs	r2, #2
   d54fc:	212b      	movs	r1, #43	; 0x2b
   d54fe:	f7ff bfb2 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d5502 <_ZN7ADXL34514isTapSourceOnYEv>:
}
bool ADXL345::isTapSourceOnY(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 1); 
   d5502:	2201      	movs	r2, #1
   d5504:	212b      	movs	r1, #43	; 0x2b
   d5506:	f7ff bfae 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d550a <_ZN7ADXL34514isTapSourceOnZEv>:
}
bool ADXL345::isTapSourceOnZ(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 0); 
   d550a:	2200      	movs	r2, #0
   d550c:	212b      	movs	r1, #43	; 0x2b
   d550e:	f7ff bfaa 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d5512 <_ZN7ADXL3458isAsleepEv>:
}

bool ADXL345::isAsleep(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 3); 
   d5512:	2203      	movs	r2, #3
   d5514:	212b      	movs	r1, #43	; 0x2b
   d5516:	f7ff bfa6 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d551a <_ZN7ADXL34510isLowPowerEv>:
}

bool ADXL345::isLowPower(){ 
  return getRegisterBit(ADXL345_BW_RATE, 4); 
   d551a:	2204      	movs	r2, #4
   d551c:	212c      	movs	r1, #44	; 0x2c
   d551e:	f7ff bfa2 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d5522 <_ZN7ADXL34518getInterruptSourceEh>:
  readFrom(ADXL345_INT_SOURCE, 1, &_b);
  return _b;
}

bool ADXL345::getInterruptSource(byte interruptBit) {
  return getRegisterBit(ADXL345_INT_SOURCE,interruptBit);
   d5522:	460a      	mov	r2, r1
   d5524:	2130      	movs	r1, #48	; 0x30
   d5526:	f7ff bf9e 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d552a <_ZN7ADXL34519getInterruptMappingEh>:
}

bool ADXL345::getInterruptMapping(byte interruptBit) {
  return getRegisterBit(ADXL345_INT_MAP,interruptBit);
   d552a:	460a      	mov	r2, r1
   d552c:	212f      	movs	r1, #47	; 0x2f
   d552e:	f7ff bf9a 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>

000d5532 <_ZN7ADXL34518isInterruptEnabledEh>:
void ADXL345::setInterruptMapping(byte interruptBit, bool interruptPin) {
  setRegisterBit(ADXL345_INT_MAP, interruptBit, interruptPin);
}

bool ADXL345::isInterruptEnabled(byte interruptBit) {
  return getRegisterBit(ADXL345_INT_ENABLE,interruptBit);
   d5532:	460a      	mov	r2, r1
   d5534:	212e      	movs	r1, #46	; 0x2e
   d5536:	f7ff bf96 	b.w	d5466 <_ZN7ADXL34514getRegisterBitEhi>
	...

000d553c <_Z10print_byteh>:
    print_byte(_b);
    Serial.println("");    
  }
}

void print_byte(byte val){
   d553c:	b538      	push	{r3, r4, r5, lr}
   d553e:	4605      	mov	r5, r0
  int i;
  Serial.print("B");
   d5540:	f001 fd0c 	bl	d6f5c <_Z16_fetch_usbserialv>
   d5544:	4908      	ldr	r1, [pc, #32]	; (d5568 <_Z10print_byteh+0x2c>)
   d5546:	f000 ff67 	bl	d6418 <_ZN5Print5printEPKc>
  for(i=7; i>=0; i--){
   d554a:	2407      	movs	r4, #7
    Serial.print(val >> i & 1, BIN);
   d554c:	f001 fd06 	bl	d6f5c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5550:	fa45 f104 	asr.w	r1, r5, r4
   d5554:	2202      	movs	r2, #2
   d5556:	f001 0101 	and.w	r1, r1, #1
   d555a:	f000 ff7a 	bl	d6452 <_ZN5Print11printNumberEmh>
}

void print_byte(byte val){
  int i;
  Serial.print("B");
  for(i=7; i>=0; i--){
   d555e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   d5562:	d2f3      	bcs.n	d554c <_Z10print_byteh+0x10>
    Serial.print(val >> i & 1, BIN);
  }
   d5564:	bd38      	pop	{r3, r4, r5, pc}
   d5566:	bf00      	nop
   d5568:	000d968a 	.word	0x000d968a

000d556c <_ZN7ADXL34516printAllRegisterEv>:
  return ((_b >> bitPos) & 1);
}

// print all register value to the serial ouptut, which requires it to be setup
// this can be used to manually to check the current configuration of the device
void ADXL345::printAllRegister() {
   d556c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d556e:	4605      	mov	r5, r0
  byte _b;
  Serial.print("0x00: ");
   d5570:	f001 fcf4 	bl	d6f5c <_Z16_fetch_usbserialv>
   d5574:	491c      	ldr	r1, [pc, #112]	; (d55e8 <_ZN7ADXL34516printAllRegisterEv+0x7c>)
   d5576:	f000 ff4f 	bl	d6418 <_ZN5Print5printEPKc>
  readFrom(0x00, 1, &_b);
   d557a:	f10d 0307 	add.w	r3, sp, #7
   d557e:	2201      	movs	r2, #1
   d5580:	2100      	movs	r1, #0
   d5582:	4628      	mov	r0, r5
   d5584:	f7ff fd15 	bl	d4fb2 <_ZN7ADXL3458readFromEhiPh>
  print_byte(_b);
   d5588:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d558c:	f7ff ffd6 	bl	d553c <_Z10print_byteh>
  Serial.println("");
   d5590:	f001 fce4 	bl	d6f5c <_Z16_fetch_usbserialv>
   d5594:	4915      	ldr	r1, [pc, #84]	; (d55ec <_ZN7ADXL34516printAllRegisterEv+0x80>)
   d5596:	f000 ff52 	bl	d643e <_ZN5Print7printlnEPKc>
  int i;
  for (i=29;i<=57;i++){
   d559a:	241d      	movs	r4, #29
    Serial.print("0x");
   d559c:	f001 fcde 	bl	d6f5c <_Z16_fetch_usbserialv>
   d55a0:	4913      	ldr	r1, [pc, #76]	; (d55f0 <_ZN7ADXL34516printAllRegisterEv+0x84>)
   d55a2:	f000 ff39 	bl	d6418 <_ZN5Print5printEPKc>
    Serial.print(i, HEX);
   d55a6:	f001 fcd9 	bl	d6f5c <_Z16_fetch_usbserialv>
   d55aa:	2210      	movs	r2, #16
   d55ac:	4621      	mov	r1, r4
   d55ae:	f000 ff50 	bl	d6452 <_ZN5Print11printNumberEmh>
    Serial.print(": ");
   d55b2:	f001 fcd3 	bl	d6f5c <_Z16_fetch_usbserialv>
   d55b6:	490f      	ldr	r1, [pc, #60]	; (d55f4 <_ZN7ADXL34516printAllRegisterEv+0x88>)
   d55b8:	f000 ff2e 	bl	d6418 <_ZN5Print5printEPKc>
    readFrom(i, 1, &_b);
   d55bc:	b2e1      	uxtb	r1, r4
   d55be:	f10d 0307 	add.w	r3, sp, #7
   d55c2:	2201      	movs	r2, #1
   d55c4:	4628      	mov	r0, r5
   d55c6:	f7ff fcf4 	bl	d4fb2 <_ZN7ADXL3458readFromEhiPh>
    print_byte(_b);
   d55ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d55ce:	f7ff ffb5 	bl	d553c <_Z10print_byteh>
  Serial.print("0x00: ");
  readFrom(0x00, 1, &_b);
  print_byte(_b);
  Serial.println("");
  int i;
  for (i=29;i<=57;i++){
   d55d2:	3401      	adds	r4, #1
    Serial.print("0x");
    Serial.print(i, HEX);
    Serial.print(": ");
    readFrom(i, 1, &_b);
    print_byte(_b);
    Serial.println("");    
   d55d4:	f001 fcc2 	bl	d6f5c <_Z16_fetch_usbserialv>
   d55d8:	4904      	ldr	r1, [pc, #16]	; (d55ec <_ZN7ADXL34516printAllRegisterEv+0x80>)
   d55da:	f000 ff30 	bl	d643e <_ZN5Print7printlnEPKc>
  Serial.print("0x00: ");
  readFrom(0x00, 1, &_b);
  print_byte(_b);
  Serial.println("");
  int i;
  for (i=29;i<=57;i++){
   d55de:	2c3a      	cmp	r4, #58	; 0x3a
   d55e0:	d1dc      	bne.n	d559c <_ZN7ADXL34516printAllRegisterEv+0x30>
    Serial.print(": ");
    readFrom(i, 1, &_b);
    print_byte(_b);
    Serial.println("");    
  }
}
   d55e2:	b003      	add	sp, #12
   d55e4:	bd30      	pop	{r4, r5, pc}
   d55e6:	bf00      	nop
   d55e8:	000d968c 	.word	0x000d968c
   d55ec:	000d97af 	.word	0x000d97af
   d55f0:	000d9693 	.word	0x000d9693
   d55f4:	000d9697 	.word	0x000d9697

000d55f8 <_GLOBAL__sub_I__ZN7ADXL345C2Ev>:
   d55f8:	f000 b9dc 	b.w	d59b4 <HAL_Pin_Map>

000d55fc <_ZN10OSCMessage12setupMessageEv>:
    outputAddress = address;
}

void OSCMessage::setupMessage()
{
    incomingBuffer = NULL;
   d55fc:	2300      	movs	r3, #0
   d55fe:	6003      	str	r3, [r0, #0]
    inputDatas = NULL;
   d5600:	6283      	str	r3, [r0, #40]	; 0x28
    incomingBufferSize = 0;
   d5602:	6043      	str	r3, [r0, #4]
    
    outputDatas = NULL;
   d5604:	64c3      	str	r3, [r0, #76]	; 0x4c
    outputDatasSize = 0;
   d5606:	6503      	str	r3, [r0, #80]	; 0x50
   d5608:	4770      	bx	lr
	...

000d560c <_ZN10OSCMessageC1EPKc>:
OSCMessage::OSCMessage()
{
    setupMessage();
}

OSCMessage::OSCMessage(const char * address)
   d560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d560e:	4d10      	ldr	r5, [pc, #64]	; (d5650 <_ZN10OSCMessageC1EPKc+0x44>)
   d5610:	4604      	mov	r4, r0
   d5612:	460f      	mov	r7, r1
   d5614:	3008      	adds	r0, #8
   d5616:	4629      	mov	r1, r5
   d5618:	f001 f88e 	bl	d6738 <_ZN6StringC1EPK19__FlashStringHelper>
   d561c:	f104 062c 	add.w	r6, r4, #44	; 0x2c
   d5620:	4629      	mov	r1, r5
   d5622:	f104 0018 	add.w	r0, r4, #24
   d5626:	f001 f887 	bl	d6738 <_ZN6StringC1EPK19__FlashStringHelper>
   d562a:	4629      	mov	r1, r5
   d562c:	4630      	mov	r0, r6
   d562e:	f001 f883 	bl	d6738 <_ZN6StringC1EPK19__FlashStringHelper>
   d5632:	4629      	mov	r1, r5
   d5634:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5638:	f001 f87e 	bl	d6738 <_ZN6StringC1EPK19__FlashStringHelper>
{
    setupMessage();
   d563c:	4620      	mov	r0, r4
   d563e:	f7ff ffdd 	bl	d55fc <_ZN10OSCMessage12setupMessageEv>
    outputAddress = address;
   d5642:	4639      	mov	r1, r7
   d5644:	4630      	mov	r0, r6
   d5646:	f001 f88a 	bl	d675e <_ZN6StringaSEPKc>
}
   d564a:	4620      	mov	r0, r4
   d564c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d564e:	bf00      	nop
   d5650:	000d97af 	.word	0x000d97af

000d5654 <_ZN10OSCMessageD1Ev>:
    outputDatas = NULL;
    outputDatasSize = 0;
}

//DESTRUCTOR
OSCMessage::~OSCMessage()
   d5654:	b510      	push	{r4, lr}
   d5656:	4604      	mov	r4, r0
{
    free(incomingBuffer);
   d5658:	6800      	ldr	r0, [r0, #0]
   d565a:	f000 fbaf 	bl	d5dbc <free>
    free(inputDatas);
   d565e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5660:	f000 fbac 	bl	d5dbc <free>
    free(outputDatas);
   d5664:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d5666:	f000 fba9 	bl	d5dbc <free>
    outputDatas = NULL;
    outputDatasSize = 0;
}

//DESTRUCTOR
OSCMessage::~OSCMessage()
   d566a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d566e:	f001 f81c 	bl	d66aa <_ZN6StringD1Ev>
   d5672:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d5676:	f001 f818 	bl	d66aa <_ZN6StringD1Ev>
   d567a:	f104 0018 	add.w	r0, r4, #24
   d567e:	f001 f814 	bl	d66aa <_ZN6StringD1Ev>
   d5682:	f104 0008 	add.w	r0, r4, #8
   d5686:	f001 f810 	bl	d66aa <_ZN6StringD1Ev>
{
    free(incomingBuffer);
    free(inputDatas);
    free(outputDatas);
}
   d568a:	4620      	mov	r0, r4
   d568c:	bd10      	pop	{r4, pc}

000d568e <_ZN10OSCMessage8addFloatEf>:
        outputTypes.concat('i');
    }
}

void OSCMessage::addFloat(float value)
{
   d568e:	b538      	push	{r3, r4, r5, lr}
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
   d5690:	6d01      	ldr	r1, [r0, #80]	; 0x50
        outputTypes.concat('i');
    }
}

void OSCMessage::addFloat(float value)
{
   d5692:	4604      	mov	r4, r0
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
   d5694:	3104      	adds	r1, #4
   d5696:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
        outputTypes.concat('i');
    }
}

void OSCMessage::addFloat(float value)
{
   d5698:	ee10 5a10 	vmov	r5, s0
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
   d569c:	f000 fb96 	bl	d5dcc <realloc>
   d56a0:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (outputDatas != NULL)
   d56a2:	b1e8      	cbz	r0, d56e0 <_ZN10OSCMessage8addFloatEf+0x52>
        union {
            float f;
            char b[4];
        } u;
        u.f = value;
        outputDatas[outputDatasSize] = u.b[3];
   d56a4:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d56a6:	f3c5 6107 	ubfx	r1, r5, #24, #8
   d56aa:	5481      	strb	r1, [r0, r2]
        outputDatas[outputDatasSize+1] = u.b[2];
   d56ac:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d56ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d56b0:	440a      	add	r2, r1
   d56b2:	f3c5 4107 	ubfx	r1, r5, #16, #8
   d56b6:	7051      	strb	r1, [r2, #1]
        outputDatas[outputDatasSize+2] = u.b[1];
   d56b8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d56ba:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d56bc:	440a      	add	r2, r1
   d56be:	f3c5 2107 	ubfx	r1, r5, #8, #8
   d56c2:	7091      	strb	r1, [r2, #2]
        outputDatas[outputDatasSize+3] = u.b[0];
   d56c4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d56c6:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d56c8:	440a      	add	r2, r1
        outputDatasSize += 4;
        outputTypes.concat('f');
   d56ca:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        } u;
        u.f = value;
        outputDatas[outputDatasSize] = u.b[3];
        outputDatas[outputDatasSize+1] = u.b[2];
        outputDatas[outputDatasSize+2] = u.b[1];
        outputDatas[outputDatasSize+3] = u.b[0];
   d56ce:	70d5      	strb	r5, [r2, #3]
        outputDatasSize += 4;
   d56d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d56d2:	3304      	adds	r3, #4
   d56d4:	6523      	str	r3, [r4, #80]	; 0x50
        outputTypes.concat('f');
   d56d6:	2166      	movs	r1, #102	; 0x66
    }
}
   d56d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        outputDatas[outputDatasSize] = u.b[3];
        outputDatas[outputDatasSize+1] = u.b[2];
        outputDatas[outputDatasSize+2] = u.b[1];
        outputDatas[outputDatasSize+3] = u.b[0];
        outputDatasSize += 4;
        outputTypes.concat('f');
   d56dc:	f001 b867 	b.w	d67ae <_ZN6String6concatEc>
   d56e0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d56e4 <_ZN10OSCMessage4sendER3UDP9IPAddressj>:
    Serial.println("\n----");
}


void OSCMessage::send(UDP &udp, IPAddress remoteIP, unsigned int outPort)
{
   d56e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d56e8:	b08b      	sub	sp, #44	; 0x2c
   d56ea:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
   d56ee:	af00      	add	r7, sp, #0
   d56f0:	4681      	mov	r9, r0
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
   d56f2:	4640      	mov	r0, r8
    Serial.println("\n----");
}


void OSCMessage::send(UDP &udp, IPAddress remoteIP, unsigned int outPort)
{
   d56f4:	460e      	mov	r6, r1
   d56f6:	60fa      	str	r2, [r7, #12]
   d56f8:	60bb      	str	r3, [r7, #8]
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
   d56fa:	f003 fd5f 	bl	d91bc <strlen>
   d56fe:	4605      	mov	r5, r0
   d5700:	3003      	adds	r0, #3
   d5702:	0880      	lsrs	r0, r0, #2
   d5704:	f003 f99a 	bl	d8a3c <__aeabi_ui2d>
   d5708:	2200      	movs	r2, #0
   d570a:	4b40      	ldr	r3, [pc, #256]	; (d580c <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x128>)
   d570c:	f003 f85a 	bl	d87c4 <__adddf3>
   d5710:	f003 fcba 	bl	d9088 <__aeabi_d2iz>
   d5714:	f8d9 a03c 	ldr.w	sl, [r9, #60]	; 0x3c
   d5718:	0084      	lsls	r4, r0, #2
    int addresszeroCount = addressBitCount-strlen(outputAddress);
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
   d571a:	4650      	mov	r0, sl
   d571c:	f003 fd4e 	bl	d91bc <strlen>
{
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
    int addresszeroCount = addressBitCount-strlen(outputAddress);
   d5720:	1b65      	subs	r5, r4, r5
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
   d5722:	3401      	adds	r4, #1
   d5724:	4683      	mov	fp, r0
   d5726:	4404      	add	r4, r0
    int outputTypesBitsCount = 4*round((strlen(outputTypes)+1)/4)+3;
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
   d5728:	3001      	adds	r0, #1
   d572a:	0880      	lsrs	r0, r0, #2
   d572c:	f003 f986 	bl	d8a3c <__aeabi_ui2d>
   d5730:	2200      	movs	r2, #0
   d5732:	4b36      	ldr	r3, [pc, #216]	; (d580c <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x128>)
   d5734:	f003 f846 	bl	d87c4 <__adddf3>
   d5738:	f003 fca6 	bl	d9088 <__aeabi_d2iz>
   d573c:	f1cb 0b03 	rsb	fp, fp, #3
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
    outputBufferSize += outputDatasSize;
   d5740:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
   d5744:	603b      	str	r3, [r7, #0]
    int addresszeroCount = addressBitCount-strlen(outputAddress);
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
    int outputTypesBitsCount = 4*round((strlen(outputTypes)+1)/4)+3;
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
   d5746:	eb0b 0b80 	add.w	fp, fp, r0, lsl #2
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
   d574a:	445c      	add	r4, fp
    outputBufferSize += outputDatasSize;
   d574c:	441c      	add	r4, r3
    //Serial.print ("bufferSize : ");  Serial.println(outputBufferSize);
    uint8_t nullChar = '\0';
    
    char outputBuffer[outputBufferSize];
   d574e:	1de2      	adds	r2, r4, #7
   d5750:	f022 0207 	bic.w	r2, r2, #7
   d5754:	ebad 0d02 	sub.w	sp, sp, r2
    memset(outputBuffer,nullChar,outputBufferSize);
   d5758:	2100      	movs	r1, #0
   d575a:	4622      	mov	r2, r4
   d575c:	4668      	mov	r0, sp
   d575e:	f003 fcf4 	bl	d914a <memset>
    memcpy(&outputBuffer[0],outputAddress,strlen(outputAddress));
   d5762:	4640      	mov	r0, r8
   d5764:	f003 fd2a 	bl	d91bc <strlen>
   d5768:	4641      	mov	r1, r8
   d576a:	4602      	mov	r2, r0
   d576c:	4668      	mov	r0, sp
   d576e:	f003 fce1 	bl	d9134 <memcpy>
    outputBuffer[strlen(outputAddress)+addresszeroCount] = ',';
   d5772:	4640      	mov	r0, r8
   d5774:	f003 fd22 	bl	d91bc <strlen>
   d5778:	eb0d 0205 	add.w	r2, sp, r5
   d577c:	212c      	movs	r1, #44	; 0x2c
   d577e:	5411      	strb	r1, [r2, r0]
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1],outputTypes,strlen(outputTypes));
   d5780:	4640      	mov	r0, r8
   d5782:	f003 fd1b 	bl	d91bc <strlen>
   d5786:	6078      	str	r0, [r7, #4]
   d5788:	4650      	mov	r0, sl
   d578a:	f003 fd17 	bl	d91bc <strlen>
   d578e:	687a      	ldr	r2, [r7, #4]
   d5790:	f102 0e01 	add.w	lr, r2, #1
   d5794:	44ae      	add	lr, r5
   d5796:	4602      	mov	r2, r0
   d5798:	4651      	mov	r1, sl
   d579a:	eb0d 000e 	add.w	r0, sp, lr
   d579e:	f003 fcc9 	bl	d9134 <memcpy>
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1+strlen(outputTypes)+outputTypesZerosCount],outputDatas,outputDatasSize);
   d57a2:	4640      	mov	r0, r8
   d57a4:	f003 fd0a 	bl	d91bc <strlen>
   d57a8:	4680      	mov	r8, r0
   d57aa:	4650      	mov	r0, sl
   d57ac:	f003 fd06 	bl	d91bc <strlen>
   d57b0:	4440      	add	r0, r8
   d57b2:	3001      	adds	r0, #1
   d57b4:	683b      	ldr	r3, [r7, #0]
   d57b6:	f8d9 104c 	ldr.w	r1, [r9, #76]	; 0x4c
   d57ba:	4405      	add	r5, r0
   d57bc:	eb05 000b 	add.w	r0, r5, fp
   d57c0:	461a      	mov	r2, r3
   d57c2:	4468      	add	r0, sp
   d57c4:	f003 fcb6 	bl	d9134 <memcpy>
    
    udp.beginPacket(remoteIP,outPort);
   d57c8:	6833      	ldr	r3, [r6, #0]
   d57ca:	68fd      	ldr	r5, [r7, #12]
   d57cc:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d57d0:	4b0f      	ldr	r3, [pc, #60]	; (d5810 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x12c>)
   d57d2:	613b      	str	r3, [r7, #16]
   d57d4:	3504      	adds	r5, #4
   d57d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d57d8:	f107 0e14 	add.w	lr, r7, #20
   d57dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d57e0:	682b      	ldr	r3, [r5, #0]
   d57e2:	f88e 3000 	strb.w	r3, [lr]
   d57e6:	893a      	ldrh	r2, [r7, #8]
   d57e8:	f107 0110 	add.w	r1, r7, #16
   d57ec:	4630      	mov	r0, r6
   d57ee:	47c0      	blx	r8
    udp.write((uint8_t *)&outputBuffer,outputBufferSize);
   d57f0:	6833      	ldr	r3, [r6, #0]
   d57f2:	4622      	mov	r2, r4
   d57f4:	4669      	mov	r1, sp
   d57f6:	68db      	ldr	r3, [r3, #12]
   d57f8:	4630      	mov	r0, r6
   d57fa:	4798      	blx	r3
    udp.endPacket();
   d57fc:	6833      	ldr	r3, [r6, #0]
   d57fe:	4630      	mov	r0, r6
   d5800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5802:	4798      	blx	r3
}
   d5804:	372c      	adds	r7, #44	; 0x2c
   d5806:	46bd      	mov	sp, r7
   d5808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d580c:	3fe00000 	.word	0x3fe00000
   d5810:	000d9704 	.word	0x000d9704

000d5814 <_GLOBAL__sub_I__ZN10OSCMessageC2Ev>:
   d5814:	f000 b8ce 	b.w	d59b4 <HAL_Pin_Map>

000d5818 <_ZN16Adafruit_DRV2605C1Ev>:
    @brief  Instantiates a new DRV2605 class
*/
/**************************************************************************/
// I2C, no address adjustments or pins
Adafruit_DRV2605::Adafruit_DRV2605() {
}
   d5818:	4770      	bx	lr

000d581a <_ZN16Adafruit_DRV260513readRegister8Eh>:
  writeRegister8(DRV2605_REG_RTPIN, rtp);
}

/********************************************************************/

uint8_t Adafruit_DRV2605::readRegister8(uint8_t reg) {
   d581a:	b510      	push	{r4, lr}
   d581c:	460c      	mov	r4, r1
  uint8_t x ;
   // use i2c
    Wire.beginTransmission(DRV2605_ADDR);
   d581e:	f001 fd01 	bl	d7224 <_Z19__fetch_global_Wirev>
   d5822:	215a      	movs	r1, #90	; 0x5a
   d5824:	f000 fbcb 	bl	d5fbe <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((byte)reg);
   d5828:	f001 fcfc 	bl	d7224 <_Z19__fetch_global_Wirev>
   d582c:	6803      	ldr	r3, [r0, #0]
   d582e:	4621      	mov	r1, r4
   d5830:	689b      	ldr	r3, [r3, #8]
   d5832:	4798      	blx	r3
    Wire.endTransmission();
   d5834:	f001 fcf6 	bl	d7224 <_Z19__fetch_global_Wirev>
   d5838:	f000 fbc8 	bl	d5fcc <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom((byte)DRV2605_ADDR, (byte)1);
   d583c:	f001 fcf2 	bl	d7224 <_Z19__fetch_global_Wirev>
   d5840:	2201      	movs	r2, #1
   d5842:	215a      	movs	r1, #90	; 0x5a
   d5844:	f000 fbb4 	bl	d5fb0 <_ZN7TwoWire11requestFromEhj>
    x = Wire.read();
   d5848:	f001 fcec 	bl	d7224 <_Z19__fetch_global_Wirev>
   d584c:	6803      	ldr	r3, [r0, #0]
   d584e:	695b      	ldr	r3, [r3, #20]
   d5850:	4798      	blx	r3

  //  Serial.print("$"); Serial.print(reg, HEX);
  //  Serial.print(": 0x"); Serial.println(x, HEX);

  return x;
}
   d5852:	b2c0      	uxtb	r0, r0
   d5854:	bd10      	pop	{r4, pc}

000d5856 <_ZN16Adafruit_DRV260514writeRegister8Ehh>:

void Adafruit_DRV2605::writeRegister8(uint8_t reg, uint8_t val) {
   d5856:	b538      	push	{r3, r4, r5, lr}
   d5858:	4614      	mov	r4, r2
   d585a:	460d      	mov	r5, r1
   // use i2c
    Wire.beginTransmission(DRV2605_ADDR);
   d585c:	f001 fce2 	bl	d7224 <_Z19__fetch_global_Wirev>
   d5860:	215a      	movs	r1, #90	; 0x5a
   d5862:	f000 fbac 	bl	d5fbe <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((byte)reg);
   d5866:	f001 fcdd 	bl	d7224 <_Z19__fetch_global_Wirev>
   d586a:	6803      	ldr	r3, [r0, #0]
   d586c:	4629      	mov	r1, r5
   d586e:	689b      	ldr	r3, [r3, #8]
   d5870:	4798      	blx	r3
    Wire.write((byte)val);
   d5872:	f001 fcd7 	bl	d7224 <_Z19__fetch_global_Wirev>
   d5876:	6803      	ldr	r3, [r0, #0]
   d5878:	4621      	mov	r1, r4
   d587a:	689b      	ldr	r3, [r3, #8]
   d587c:	4798      	blx	r3
    Wire.endTransmission();
   d587e:	f001 fcd1 	bl	d7224 <_Z19__fetch_global_Wirev>
}
   d5882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_DRV2605::writeRegister8(uint8_t reg, uint8_t val) {
   // use i2c
    Wire.beginTransmission(DRV2605_ADDR);
    Wire.write((byte)reg);
    Wire.write((byte)val);
    Wire.endTransmission();
   d5886:	f000 bba1 	b.w	d5fcc <_ZN7TwoWire15endTransmissionEv>

000d588a <_ZN16Adafruit_DRV26055beginEv>:
/**************************************************************************/
/*!
    @brief  Setups the HW
*/
/**************************************************************************/
boolean Adafruit_DRV2605::begin() {
   d588a:	b510      	push	{r4, lr}
   d588c:	4604      	mov	r4, r0
  Wire.begin();
   d588e:	f001 fcc9 	bl	d7224 <_Z19__fetch_global_Wirev>
   d5892:	f000 fb59 	bl	d5f48 <_ZN7TwoWire5beginEv>
  uint8_t id = readRegister8(DRV2605_REG_STATUS);
   d5896:	2100      	movs	r1, #0
   d5898:	4620      	mov	r0, r4
   d589a:	f7ff ffbe 	bl	d581a <_ZN16Adafruit_DRV260513readRegister8Eh>
  //Serial.print("Status 0x"); Serial.println(id, HEX);

  writeRegister8(DRV2605_REG_MODE, 0x00); // out of standby
   d589e:	4620      	mov	r0, r4
   d58a0:	2200      	movs	r2, #0
   d58a2:	2101      	movs	r1, #1
   d58a4:	f7ff ffd7 	bl	d5856 <_ZN16Adafruit_DRV260514writeRegister8Ehh>

  writeRegister8(DRV2605_REG_RTPIN, 0x00); // no real-time-playback
   d58a8:	4620      	mov	r0, r4
   d58aa:	2200      	movs	r2, #0
   d58ac:	2102      	movs	r1, #2
   d58ae:	f7ff ffd2 	bl	d5856 <_ZN16Adafruit_DRV260514writeRegister8Ehh>

  writeRegister8(DRV2605_REG_WAVESEQ1, 1); // strong click
   d58b2:	4620      	mov	r0, r4
   d58b4:	2201      	movs	r2, #1
   d58b6:	2104      	movs	r1, #4
   d58b8:	f7ff ffcd 	bl	d5856 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_WAVESEQ2, 0);
   d58bc:	4620      	mov	r0, r4
   d58be:	2200      	movs	r2, #0
   d58c0:	2105      	movs	r1, #5
   d58c2:	f7ff ffc8 	bl	d5856 <_ZN16Adafruit_DRV260514writeRegister8Ehh>

  writeRegister8(DRV2605_REG_OVERDRIVE, 0); // no overdrive
   d58c6:	4620      	mov	r0, r4
   d58c8:	2200      	movs	r2, #0
   d58ca:	210d      	movs	r1, #13
   d58cc:	f7ff ffc3 	bl	d5856 <_ZN16Adafruit_DRV260514writeRegister8Ehh>

  writeRegister8(DRV2605_REG_SUSTAINPOS, 0);
   d58d0:	4620      	mov	r0, r4
   d58d2:	2200      	movs	r2, #0
   d58d4:	210e      	movs	r1, #14
   d58d6:	f7ff ffbe 	bl	d5856 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_SUSTAINNEG, 0);
   d58da:	4620      	mov	r0, r4
   d58dc:	2200      	movs	r2, #0
   d58de:	210f      	movs	r1, #15
   d58e0:	f7ff ffb9 	bl	d5856 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_BREAK, 0);
   d58e4:	4620      	mov	r0, r4
   d58e6:	2200      	movs	r2, #0
   d58e8:	2110      	movs	r1, #16
   d58ea:	f7ff ffb4 	bl	d5856 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_AUDIOMAX, 0x64);
   d58ee:	2264      	movs	r2, #100	; 0x64
   d58f0:	4620      	mov	r0, r4
   d58f2:	2113      	movs	r1, #19
   d58f4:	f7ff ffaf 	bl	d5856 <_ZN16Adafruit_DRV260514writeRegister8Ehh>

  // ERM open loop

  // turn off N_ERM_LRA
  writeRegister8(DRV2605_REG_FEEDBACK, readRegister8(DRV2605_REG_FEEDBACK) & 0x7F);
   d58f8:	211a      	movs	r1, #26
   d58fa:	4620      	mov	r0, r4
   d58fc:	f7ff ff8d 	bl	d581a <_ZN16Adafruit_DRV260513readRegister8Eh>
   d5900:	211a      	movs	r1, #26
   d5902:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   d5906:	4620      	mov	r0, r4
   d5908:	f7ff ffa5 	bl	d5856 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
  // turn on ERM_OPEN_LOOP
  writeRegister8(DRV2605_REG_CONTROL3, readRegister8(DRV2605_REG_CONTROL3) | 0x20);
   d590c:	211d      	movs	r1, #29
   d590e:	4620      	mov	r0, r4
   d5910:	f7ff ff83 	bl	d581a <_ZN16Adafruit_DRV260513readRegister8Eh>
   d5914:	f040 0220 	orr.w	r2, r0, #32
   d5918:	b2d2      	uxtb	r2, r2
   d591a:	4620      	mov	r0, r4
   d591c:	211d      	movs	r1, #29
   d591e:	f7ff ff9a 	bl	d5856 <_ZN16Adafruit_DRV260514writeRegister8Ehh>

  return true;
}
   d5922:	2001      	movs	r0, #1
   d5924:	bd10      	pop	{r4, pc}

000d5926 <_ZN16Adafruit_DRV260511setWaveformEhh>:

void Adafruit_DRV2605::setWaveform(uint8_t slot, uint8_t w) {
  writeRegister8(DRV2605_REG_WAVESEQ1+slot, w);
   d5926:	3104      	adds	r1, #4
   d5928:	b2c9      	uxtb	r1, r1
   d592a:	f7ff bf94 	b.w	d5856 <_ZN16Adafruit_DRV260514writeRegister8Ehh>

000d592e <_ZN16Adafruit_DRV260513selectLibraryEh>:
}

void Adafruit_DRV2605::selectLibrary(uint8_t lib) {
  writeRegister8(DRV2605_REG_LIBRARY, lib);
   d592e:	460a      	mov	r2, r1
   d5930:	2103      	movs	r1, #3
   d5932:	f7ff bf90 	b.w	d5856 <_ZN16Adafruit_DRV260514writeRegister8Ehh>

000d5936 <_ZN16Adafruit_DRV26057setModeEh>:
void Adafruit_DRV2605::go() {
  writeRegister8(DRV2605_REG_GO, 1);
}

void Adafruit_DRV2605::setMode(uint8_t mode) {
  writeRegister8(DRV2605_REG_MODE, mode);
   d5936:	460a      	mov	r2, r1
   d5938:	2101      	movs	r1, #1
   d593a:	f7ff bf8c 	b.w	d5856 <_ZN16Adafruit_DRV260514writeRegister8Ehh>

000d593e <_GLOBAL__sub_I__ZN16Adafruit_DRV2605C2Ev>:
   d593e:	f000 b839 	b.w	d59b4 <HAL_Pin_Map>
	...

000d5944 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5944:	b508      	push	{r3, lr}
   d5946:	4b02      	ldr	r3, [pc, #8]	; (d5950 <os_thread_is_current+0xc>)
   d5948:	681b      	ldr	r3, [r3, #0]
   d594a:	689b      	ldr	r3, [r3, #8]
   d594c:	9301      	str	r3, [sp, #4]
   d594e:	bd08      	pop	{r3, pc}
   d5950:	00030248 	.word	0x00030248

000d5954 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5954:	b508      	push	{r3, lr}
   d5956:	4b02      	ldr	r3, [pc, #8]	; (d5960 <os_thread_join+0xc>)
   d5958:	681b      	ldr	r3, [r3, #0]
   d595a:	691b      	ldr	r3, [r3, #16]
   d595c:	9301      	str	r3, [sp, #4]
   d595e:	bd08      	pop	{r3, pc}
   d5960:	00030248 	.word	0x00030248

000d5964 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5964:	b508      	push	{r3, lr}
   d5966:	4b02      	ldr	r3, [pc, #8]	; (d5970 <os_thread_cleanup+0xc>)
   d5968:	681b      	ldr	r3, [r3, #0]
   d596a:	695b      	ldr	r3, [r3, #20]
   d596c:	9301      	str	r3, [sp, #4]
   d596e:	bd08      	pop	{r3, pc}
   d5970:	00030248 	.word	0x00030248

000d5974 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5974:	b508      	push	{r3, lr}
   d5976:	4b02      	ldr	r3, [pc, #8]	; (d5980 <os_mutex_recursive_create+0xc>)
   d5978:	681b      	ldr	r3, [r3, #0]
   d597a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d597c:	9301      	str	r3, [sp, #4]
   d597e:	bd08      	pop	{r3, pc}
   d5980:	00030248 	.word	0x00030248

000d5984 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5984:	b508      	push	{r3, lr}
   d5986:	4b02      	ldr	r3, [pc, #8]	; (d5990 <os_mutex_recursive_destroy+0xc>)
   d5988:	681b      	ldr	r3, [r3, #0]
   d598a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d598c:	9301      	str	r3, [sp, #4]
   d598e:	bd08      	pop	{r3, pc}
   d5990:	00030248 	.word	0x00030248

000d5994 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5994:	b508      	push	{r3, lr}
   d5996:	4b02      	ldr	r3, [pc, #8]	; (d59a0 <HAL_RNG_GetRandomNumber+0xc>)
   d5998:	681b      	ldr	r3, [r3, #0]
   d599a:	685b      	ldr	r3, [r3, #4]
   d599c:	9301      	str	r3, [sp, #4]
   d599e:	bd08      	pop	{r3, pc}
   d59a0:	00030218 	.word	0x00030218

000d59a4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d59a4:	b508      	push	{r3, lr}
   d59a6:	4b02      	ldr	r3, [pc, #8]	; (d59b0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d59a8:	681b      	ldr	r3, [r3, #0]
   d59aa:	695b      	ldr	r3, [r3, #20]
   d59ac:	9301      	str	r3, [sp, #4]
   d59ae:	bd08      	pop	{r3, pc}
   d59b0:	00030218 	.word	0x00030218

000d59b4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d59b4:	b508      	push	{r3, lr}
   d59b6:	4b02      	ldr	r3, [pc, #8]	; (d59c0 <HAL_Pin_Map+0xc>)
   d59b8:	681b      	ldr	r3, [r3, #0]
   d59ba:	681b      	ldr	r3, [r3, #0]
   d59bc:	9301      	str	r3, [sp, #4]
   d59be:	bd08      	pop	{r3, pc}
   d59c0:	0003022c 	.word	0x0003022c

000d59c4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d59c4:	b508      	push	{r3, lr}
   d59c6:	4b02      	ldr	r3, [pc, #8]	; (d59d0 <HAL_Validate_Pin_Function+0xc>)
   d59c8:	681b      	ldr	r3, [r3, #0]
   d59ca:	685b      	ldr	r3, [r3, #4]
   d59cc:	9301      	str	r3, [sp, #4]
   d59ce:	bd08      	pop	{r3, pc}
   d59d0:	0003022c 	.word	0x0003022c

000d59d4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d59d4:	b508      	push	{r3, lr}
   d59d6:	4b02      	ldr	r3, [pc, #8]	; (d59e0 <HAL_Pin_Mode+0xc>)
   d59d8:	681b      	ldr	r3, [r3, #0]
   d59da:	689b      	ldr	r3, [r3, #8]
   d59dc:	9301      	str	r3, [sp, #4]
   d59de:	bd08      	pop	{r3, pc}
   d59e0:	0003022c 	.word	0x0003022c

000d59e4 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d59e4:	b508      	push	{r3, lr}
   d59e6:	4b02      	ldr	r3, [pc, #8]	; (d59f0 <HAL_ADC_Read+0xc>)
   d59e8:	681b      	ldr	r3, [r3, #0]
   d59ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d59ec:	9301      	str	r3, [sp, #4]
   d59ee:	bd08      	pop	{r3, pc}
   d59f0:	0003022c 	.word	0x0003022c

000d59f4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d59f4:	b508      	push	{r3, lr}
   d59f6:	4b02      	ldr	r3, [pc, #8]	; (d5a00 <HAL_I2C_Begin+0xc>)
   d59f8:	681b      	ldr	r3, [r3, #0]
   d59fa:	68db      	ldr	r3, [r3, #12]
   d59fc:	9301      	str	r3, [sp, #4]
   d59fe:	bd08      	pop	{r3, pc}
   d5a00:	00030228 	.word	0x00030228

000d5a04 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5a04:	b508      	push	{r3, lr}
   d5a06:	4b02      	ldr	r3, [pc, #8]	; (d5a10 <HAL_I2C_Begin_Transmission+0xc>)
   d5a08:	681b      	ldr	r3, [r3, #0]
   d5a0a:	699b      	ldr	r3, [r3, #24]
   d5a0c:	9301      	str	r3, [sp, #4]
   d5a0e:	bd08      	pop	{r3, pc}
   d5a10:	00030228 	.word	0x00030228

000d5a14 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5a14:	b508      	push	{r3, lr}
   d5a16:	4b02      	ldr	r3, [pc, #8]	; (d5a20 <HAL_I2C_End_Transmission+0xc>)
   d5a18:	681b      	ldr	r3, [r3, #0]
   d5a1a:	69db      	ldr	r3, [r3, #28]
   d5a1c:	9301      	str	r3, [sp, #4]
   d5a1e:	bd08      	pop	{r3, pc}
   d5a20:	00030228 	.word	0x00030228

000d5a24 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5a24:	b508      	push	{r3, lr}
   d5a26:	4b02      	ldr	r3, [pc, #8]	; (d5a30 <HAL_I2C_Write_Data+0xc>)
   d5a28:	681b      	ldr	r3, [r3, #0]
   d5a2a:	6a1b      	ldr	r3, [r3, #32]
   d5a2c:	9301      	str	r3, [sp, #4]
   d5a2e:	bd08      	pop	{r3, pc}
   d5a30:	00030228 	.word	0x00030228

000d5a34 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5a34:	b508      	push	{r3, lr}
   d5a36:	4b02      	ldr	r3, [pc, #8]	; (d5a40 <HAL_I2C_Available_Data+0xc>)
   d5a38:	681b      	ldr	r3, [r3, #0]
   d5a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a3c:	9301      	str	r3, [sp, #4]
   d5a3e:	bd08      	pop	{r3, pc}
   d5a40:	00030228 	.word	0x00030228

000d5a44 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5a44:	b508      	push	{r3, lr}
   d5a46:	4b02      	ldr	r3, [pc, #8]	; (d5a50 <HAL_I2C_Read_Data+0xc>)
   d5a48:	681b      	ldr	r3, [r3, #0]
   d5a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5a4c:	9301      	str	r3, [sp, #4]
   d5a4e:	bd08      	pop	{r3, pc}
   d5a50:	00030228 	.word	0x00030228

000d5a54 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5a54:	b508      	push	{r3, lr}
   d5a56:	4b02      	ldr	r3, [pc, #8]	; (d5a60 <HAL_I2C_Peek_Data+0xc>)
   d5a58:	681b      	ldr	r3, [r3, #0]
   d5a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5a5c:	9301      	str	r3, [sp, #4]
   d5a5e:	bd08      	pop	{r3, pc}
   d5a60:	00030228 	.word	0x00030228

000d5a64 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5a64:	b508      	push	{r3, lr}
   d5a66:	4b02      	ldr	r3, [pc, #8]	; (d5a70 <HAL_I2C_Flush_Data+0xc>)
   d5a68:	681b      	ldr	r3, [r3, #0]
   d5a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a6c:	9301      	str	r3, [sp, #4]
   d5a6e:	bd08      	pop	{r3, pc}
   d5a70:	00030228 	.word	0x00030228

000d5a74 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5a74:	b508      	push	{r3, lr}
   d5a76:	4b02      	ldr	r3, [pc, #8]	; (d5a80 <HAL_I2C_Is_Enabled+0xc>)
   d5a78:	681b      	ldr	r3, [r3, #0]
   d5a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5a7c:	9301      	str	r3, [sp, #4]
   d5a7e:	bd08      	pop	{r3, pc}
   d5a80:	00030228 	.word	0x00030228

000d5a84 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5a84:	b508      	push	{r3, lr}
   d5a86:	4b02      	ldr	r3, [pc, #8]	; (d5a90 <HAL_I2C_Init+0xc>)
   d5a88:	681b      	ldr	r3, [r3, #0]
   d5a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5a8c:	9301      	str	r3, [sp, #4]
   d5a8e:	bd08      	pop	{r3, pc}
   d5a90:	00030228 	.word	0x00030228

000d5a94 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d5a94:	b508      	push	{r3, lr}
   d5a96:	4b02      	ldr	r3, [pc, #8]	; (d5aa0 <HAL_I2C_Request_Data_Ex+0xc>)
   d5a98:	681b      	ldr	r3, [r3, #0]
   d5a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5a9c:	9301      	str	r3, [sp, #4]
   d5a9e:	bd08      	pop	{r3, pc}
   d5aa0:	00030228 	.word	0x00030228

000d5aa4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5aa4:	b508      	push	{r3, lr}
   d5aa6:	4b02      	ldr	r3, [pc, #8]	; (d5ab0 <if_index_to_name+0xc>)
   d5aa8:	681b      	ldr	r3, [r3, #0]
   d5aaa:	695b      	ldr	r3, [r3, #20]
   d5aac:	9301      	str	r3, [sp, #4]
   d5aae:	bd08      	pop	{r3, pc}
   d5ab0:	0003026c 	.word	0x0003026c

000d5ab4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5ab4:	b508      	push	{r3, lr}
   d5ab6:	4b02      	ldr	r3, [pc, #8]	; (d5ac0 <inet_inet_ntop+0xc>)
   d5ab8:	681b      	ldr	r3, [r3, #0]
   d5aba:	695b      	ldr	r3, [r3, #20]
   d5abc:	9301      	str	r3, [sp, #4]
   d5abe:	bd08      	pop	{r3, pc}
   d5ac0:	00030264 	.word	0x00030264

000d5ac4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5ac4:	b508      	push	{r3, lr}
   d5ac6:	4b02      	ldr	r3, [pc, #8]	; (d5ad0 <inet_htonl+0xc>)
   d5ac8:	681b      	ldr	r3, [r3, #0]
   d5aca:	6a1b      	ldr	r3, [r3, #32]
   d5acc:	9301      	str	r3, [sp, #4]
   d5ace:	bd08      	pop	{r3, pc}
   d5ad0:	00030264 	.word	0x00030264

000d5ad4 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d5ad4:	b508      	push	{r3, lr}
   d5ad6:	4b02      	ldr	r3, [pc, #8]	; (d5ae0 <inet_ntohs+0xc>)
   d5ad8:	681b      	ldr	r3, [r3, #0]
   d5ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5adc:	9301      	str	r3, [sp, #4]
   d5ade:	bd08      	pop	{r3, pc}
   d5ae0:	00030264 	.word	0x00030264

000d5ae4 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5ae4:	b508      	push	{r3, lr}
   d5ae6:	4b02      	ldr	r3, [pc, #8]	; (d5af0 <inet_htons+0xc>)
   d5ae8:	681b      	ldr	r3, [r3, #0]
   d5aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5aec:	9301      	str	r3, [sp, #4]
   d5aee:	bd08      	pop	{r3, pc}
   d5af0:	00030264 	.word	0x00030264

000d5af4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5af4:	b508      	push	{r3, lr}
   d5af6:	4b02      	ldr	r3, [pc, #8]	; (d5b00 <netdb_freeaddrinfo+0xc>)
   d5af8:	681b      	ldr	r3, [r3, #0]
   d5afa:	689b      	ldr	r3, [r3, #8]
   d5afc:	9301      	str	r3, [sp, #4]
   d5afe:	bd08      	pop	{r3, pc}
   d5b00:	00030268 	.word	0x00030268

000d5b04 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5b04:	b508      	push	{r3, lr}
   d5b06:	4b02      	ldr	r3, [pc, #8]	; (d5b10 <netdb_getaddrinfo+0xc>)
   d5b08:	681b      	ldr	r3, [r3, #0]
   d5b0a:	68db      	ldr	r3, [r3, #12]
   d5b0c:	9301      	str	r3, [sp, #4]
   d5b0e:	bd08      	pop	{r3, pc}
   d5b10:	00030268 	.word	0x00030268

000d5b14 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d5b14:	b508      	push	{r3, lr}
   d5b16:	4b02      	ldr	r3, [pc, #8]	; (d5b20 <sock_bind+0xc>)
   d5b18:	681b      	ldr	r3, [r3, #0]
   d5b1a:	685b      	ldr	r3, [r3, #4]
   d5b1c:	9301      	str	r3, [sp, #4]
   d5b1e:	bd08      	pop	{r3, pc}
   d5b20:	00030238 	.word	0x00030238

000d5b24 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5b24:	b508      	push	{r3, lr}
   d5b26:	4b02      	ldr	r3, [pc, #8]	; (d5b30 <sock_setsockopt+0xc>)
   d5b28:	681b      	ldr	r3, [r3, #0]
   d5b2a:	699b      	ldr	r3, [r3, #24]
   d5b2c:	9301      	str	r3, [sp, #4]
   d5b2e:	bd08      	pop	{r3, pc}
   d5b30:	00030238 	.word	0x00030238

000d5b34 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5b34:	b508      	push	{r3, lr}
   d5b36:	4b02      	ldr	r3, [pc, #8]	; (d5b40 <sock_close+0xc>)
   d5b38:	681b      	ldr	r3, [r3, #0]
   d5b3a:	69db      	ldr	r3, [r3, #28]
   d5b3c:	9301      	str	r3, [sp, #4]
   d5b3e:	bd08      	pop	{r3, pc}
   d5b40:	00030238 	.word	0x00030238

000d5b44 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d5b44:	b508      	push	{r3, lr}
   d5b46:	4b02      	ldr	r3, [pc, #8]	; (d5b50 <sock_recvfrom+0xc>)
   d5b48:	681b      	ldr	r3, [r3, #0]
   d5b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5b4c:	9301      	str	r3, [sp, #4]
   d5b4e:	bd08      	pop	{r3, pc}
   d5b50:	00030238 	.word	0x00030238

000d5b54 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d5b54:	b508      	push	{r3, lr}
   d5b56:	4b02      	ldr	r3, [pc, #8]	; (d5b60 <sock_sendto+0xc>)
   d5b58:	681b      	ldr	r3, [r3, #0]
   d5b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5b5c:	9301      	str	r3, [sp, #4]
   d5b5e:	bd08      	pop	{r3, pc}
   d5b60:	00030238 	.word	0x00030238

000d5b64 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5b64:	b508      	push	{r3, lr}
   d5b66:	4b02      	ldr	r3, [pc, #8]	; (d5b70 <sock_socket+0xc>)
   d5b68:	681b      	ldr	r3, [r3, #0]
   d5b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5b6c:	9301      	str	r3, [sp, #4]
   d5b6e:	bd08      	pop	{r3, pc}
   d5b70:	00030238 	.word	0x00030238

000d5b74 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5b74:	b508      	push	{r3, lr}
   d5b76:	4b02      	ldr	r3, [pc, #8]	; (d5b80 <HAL_SPI_Init+0xc>)
   d5b78:	681b      	ldr	r3, [r3, #0]
   d5b7a:	69db      	ldr	r3, [r3, #28]
   d5b7c:	9301      	str	r3, [sp, #4]
   d5b7e:	bd08      	pop	{r3, pc}
   d5b80:	00030230 	.word	0x00030230

000d5b84 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5b84:	b508      	push	{r3, lr}
   d5b86:	4b02      	ldr	r3, [pc, #8]	; (d5b90 <HAL_SPI_Is_Enabled+0xc>)
   d5b88:	681b      	ldr	r3, [r3, #0]
   d5b8a:	6a1b      	ldr	r3, [r3, #32]
   d5b8c:	9301      	str	r3, [sp, #4]
   d5b8e:	bd08      	pop	{r3, pc}
   d5b90:	00030230 	.word	0x00030230

000d5b94 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5b94:	b508      	push	{r3, lr}
   d5b96:	4b02      	ldr	r3, [pc, #8]	; (d5ba0 <HAL_USART_Init+0xc>)
   d5b98:	681b      	ldr	r3, [r3, #0]
   d5b9a:	681b      	ldr	r3, [r3, #0]
   d5b9c:	9301      	str	r3, [sp, #4]
   d5b9e:	bd08      	pop	{r3, pc}
   d5ba0:	0003023c 	.word	0x0003023c

000d5ba4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5ba4:	b508      	push	{r3, lr}
   d5ba6:	4b02      	ldr	r3, [pc, #8]	; (d5bb0 <HAL_USART_Write_Data+0xc>)
   d5ba8:	681b      	ldr	r3, [r3, #0]
   d5baa:	68db      	ldr	r3, [r3, #12]
   d5bac:	9301      	str	r3, [sp, #4]
   d5bae:	bd08      	pop	{r3, pc}
   d5bb0:	0003023c 	.word	0x0003023c

000d5bb4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5bb4:	b508      	push	{r3, lr}
   d5bb6:	4b02      	ldr	r3, [pc, #8]	; (d5bc0 <HAL_USART_Available_Data+0xc>)
   d5bb8:	681b      	ldr	r3, [r3, #0]
   d5bba:	691b      	ldr	r3, [r3, #16]
   d5bbc:	9301      	str	r3, [sp, #4]
   d5bbe:	bd08      	pop	{r3, pc}
   d5bc0:	0003023c 	.word	0x0003023c

000d5bc4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5bc4:	b508      	push	{r3, lr}
   d5bc6:	4b02      	ldr	r3, [pc, #8]	; (d5bd0 <HAL_USART_Read_Data+0xc>)
   d5bc8:	681b      	ldr	r3, [r3, #0]
   d5bca:	695b      	ldr	r3, [r3, #20]
   d5bcc:	9301      	str	r3, [sp, #4]
   d5bce:	bd08      	pop	{r3, pc}
   d5bd0:	0003023c 	.word	0x0003023c

000d5bd4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5bd4:	b508      	push	{r3, lr}
   d5bd6:	4b02      	ldr	r3, [pc, #8]	; (d5be0 <HAL_USART_Peek_Data+0xc>)
   d5bd8:	681b      	ldr	r3, [r3, #0]
   d5bda:	699b      	ldr	r3, [r3, #24]
   d5bdc:	9301      	str	r3, [sp, #4]
   d5bde:	bd08      	pop	{r3, pc}
   d5be0:	0003023c 	.word	0x0003023c

000d5be4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5be4:	b508      	push	{r3, lr}
   d5be6:	4b02      	ldr	r3, [pc, #8]	; (d5bf0 <HAL_USART_Flush_Data+0xc>)
   d5be8:	681b      	ldr	r3, [r3, #0]
   d5bea:	69db      	ldr	r3, [r3, #28]
   d5bec:	9301      	str	r3, [sp, #4]
   d5bee:	bd08      	pop	{r3, pc}
   d5bf0:	0003023c 	.word	0x0003023c

000d5bf4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5bf4:	b508      	push	{r3, lr}
   d5bf6:	4b02      	ldr	r3, [pc, #8]	; (d5c00 <HAL_USART_Is_Enabled+0xc>)
   d5bf8:	681b      	ldr	r3, [r3, #0]
   d5bfa:	6a1b      	ldr	r3, [r3, #32]
   d5bfc:	9301      	str	r3, [sp, #4]
   d5bfe:	bd08      	pop	{r3, pc}
   d5c00:	0003023c 	.word	0x0003023c

000d5c04 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5c04:	b508      	push	{r3, lr}
   d5c06:	4b02      	ldr	r3, [pc, #8]	; (d5c10 <HAL_USART_Available_Data_For_Write+0xc>)
   d5c08:	681b      	ldr	r3, [r3, #0]
   d5c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c0c:	9301      	str	r3, [sp, #4]
   d5c0e:	bd08      	pop	{r3, pc}
   d5c10:	0003023c 	.word	0x0003023c

000d5c14 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5c14:	b508      	push	{r3, lr}
   d5c16:	4b02      	ldr	r3, [pc, #8]	; (d5c20 <HAL_USB_USART_Init+0xc>)
   d5c18:	681b      	ldr	r3, [r3, #0]
   d5c1a:	681b      	ldr	r3, [r3, #0]
   d5c1c:	9301      	str	r3, [sp, #4]
   d5c1e:	bd08      	pop	{r3, pc}
   d5c20:	0003024c 	.word	0x0003024c

000d5c24 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5c24:	b508      	push	{r3, lr}
   d5c26:	4b02      	ldr	r3, [pc, #8]	; (d5c30 <HAL_USB_USART_Begin+0xc>)
   d5c28:	681b      	ldr	r3, [r3, #0]
   d5c2a:	685b      	ldr	r3, [r3, #4]
   d5c2c:	9301      	str	r3, [sp, #4]
   d5c2e:	bd08      	pop	{r3, pc}
   d5c30:	0003024c 	.word	0x0003024c

000d5c34 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5c34:	b508      	push	{r3, lr}
   d5c36:	4b02      	ldr	r3, [pc, #8]	; (d5c40 <HAL_USB_USART_Available_Data+0xc>)
   d5c38:	681b      	ldr	r3, [r3, #0]
   d5c3a:	691b      	ldr	r3, [r3, #16]
   d5c3c:	9301      	str	r3, [sp, #4]
   d5c3e:	bd08      	pop	{r3, pc}
   d5c40:	0003024c 	.word	0x0003024c

000d5c44 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5c44:	b508      	push	{r3, lr}
   d5c46:	4b02      	ldr	r3, [pc, #8]	; (d5c50 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5c48:	681b      	ldr	r3, [r3, #0]
   d5c4a:	695b      	ldr	r3, [r3, #20]
   d5c4c:	9301      	str	r3, [sp, #4]
   d5c4e:	bd08      	pop	{r3, pc}
   d5c50:	0003024c 	.word	0x0003024c

000d5c54 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5c54:	b508      	push	{r3, lr}
   d5c56:	4b02      	ldr	r3, [pc, #8]	; (d5c60 <HAL_USB_USART_Receive_Data+0xc>)
   d5c58:	681b      	ldr	r3, [r3, #0]
   d5c5a:	699b      	ldr	r3, [r3, #24]
   d5c5c:	9301      	str	r3, [sp, #4]
   d5c5e:	bd08      	pop	{r3, pc}
   d5c60:	0003024c 	.word	0x0003024c

000d5c64 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5c64:	b508      	push	{r3, lr}
   d5c66:	4b02      	ldr	r3, [pc, #8]	; (d5c70 <HAL_USB_USART_Send_Data+0xc>)
   d5c68:	681b      	ldr	r3, [r3, #0]
   d5c6a:	69db      	ldr	r3, [r3, #28]
   d5c6c:	9301      	str	r3, [sp, #4]
   d5c6e:	bd08      	pop	{r3, pc}
   d5c70:	0003024c 	.word	0x0003024c

000d5c74 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5c74:	b508      	push	{r3, lr}
   d5c76:	4b02      	ldr	r3, [pc, #8]	; (d5c80 <HAL_USB_USART_Flush_Data+0xc>)
   d5c78:	681b      	ldr	r3, [r3, #0]
   d5c7a:	6a1b      	ldr	r3, [r3, #32]
   d5c7c:	9301      	str	r3, [sp, #4]
   d5c7e:	bd08      	pop	{r3, pc}
   d5c80:	0003024c 	.word	0x0003024c

000d5c84 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d5c84:	b508      	push	{r3, lr}
   d5c86:	4b02      	ldr	r3, [pc, #8]	; (d5c90 <HAL_USB_USART_Is_Enabled+0xc>)
   d5c88:	681b      	ldr	r3, [r3, #0]
   d5c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5c8c:	9301      	str	r3, [sp, #4]
   d5c8e:	bd08      	pop	{r3, pc}
   d5c90:	0003024c 	.word	0x0003024c

000d5c94 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5c94:	b508      	push	{r3, lr}
   d5c96:	4b02      	ldr	r3, [pc, #8]	; (d5ca0 <set_system_mode+0xc>)
   d5c98:	681b      	ldr	r3, [r3, #0]
   d5c9a:	685b      	ldr	r3, [r3, #4]
   d5c9c:	9301      	str	r3, [sp, #4]
   d5c9e:	bd08      	pop	{r3, pc}
   d5ca0:	00030220 	.word	0x00030220

000d5ca4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5ca4:	b508      	push	{r3, lr}
   d5ca6:	4b02      	ldr	r3, [pc, #8]	; (d5cb0 <system_delay_ms+0xc>)
   d5ca8:	681b      	ldr	r3, [r3, #0]
   d5caa:	695b      	ldr	r3, [r3, #20]
   d5cac:	9301      	str	r3, [sp, #4]
   d5cae:	bd08      	pop	{r3, pc}
   d5cb0:	00030220 	.word	0x00030220

000d5cb4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5cb4:	b508      	push	{r3, lr}
   d5cb6:	4b02      	ldr	r3, [pc, #8]	; (d5cc0 <system_thread_set_state+0xc>)
   d5cb8:	681b      	ldr	r3, [r3, #0]
   d5cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5cbc:	9301      	str	r3, [sp, #4]
   d5cbe:	bd08      	pop	{r3, pc}
   d5cc0:	00030220 	.word	0x00030220

000d5cc4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5cc4:	b508      	push	{r3, lr}
   d5cc6:	4b03      	ldr	r3, [pc, #12]	; (d5cd4 <system_ctrl_set_app_request_handler+0x10>)
   d5cc8:	681b      	ldr	r3, [r3, #0]
   d5cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5cce:	9301      	str	r3, [sp, #4]
   d5cd0:	bd08      	pop	{r3, pc}
   d5cd2:	0000      	.short	0x0000
   d5cd4:	00030220 	.word	0x00030220

000d5cd8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5cd8:	b508      	push	{r3, lr}
   d5cda:	4b03      	ldr	r3, [pc, #12]	; (d5ce8 <system_ctrl_set_result+0x10>)
   d5cdc:	681b      	ldr	r3, [r3, #0]
   d5cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5ce2:	9301      	str	r3, [sp, #4]
   d5ce4:	bd08      	pop	{r3, pc}
   d5ce6:	0000      	.short	0x0000
   d5ce8:	00030220 	.word	0x00030220

000d5cec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5cec:	b508      	push	{r3, lr}
   d5cee:	4b02      	ldr	r3, [pc, #8]	; (d5cf8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5cf0:	681b      	ldr	r3, [r3, #0]
   d5cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5cf4:	9301      	str	r3, [sp, #4]
   d5cf6:	bd08      	pop	{r3, pc}
   d5cf8:	00030244 	.word	0x00030244

000d5cfc <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   d5cfc:	b508      	push	{r3, lr}
   d5cfe:	4b02      	ldr	r3, [pc, #8]	; (d5d08 <network_config+0xc>)
   d5d00:	681b      	ldr	r3, [r3, #0]
   d5d02:	681b      	ldr	r3, [r3, #0]
   d5d04:	9301      	str	r3, [sp, #4]
   d5d06:	bd08      	pop	{r3, pc}
   d5d08:	00030240 	.word	0x00030240

000d5d0c <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d0c:	b508      	push	{r3, lr}
   d5d0e:	4b02      	ldr	r3, [pc, #8]	; (d5d18 <network_connect+0xc>)
   d5d10:	681b      	ldr	r3, [r3, #0]
   d5d12:	685b      	ldr	r3, [r3, #4]
   d5d14:	9301      	str	r3, [sp, #4]
   d5d16:	bd08      	pop	{r3, pc}
   d5d18:	00030240 	.word	0x00030240

000d5d1c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5d1c:	b508      	push	{r3, lr}
   d5d1e:	4b02      	ldr	r3, [pc, #8]	; (d5d28 <network_connecting+0xc>)
   d5d20:	681b      	ldr	r3, [r3, #0]
   d5d22:	689b      	ldr	r3, [r3, #8]
   d5d24:	9301      	str	r3, [sp, #4]
   d5d26:	bd08      	pop	{r3, pc}
   d5d28:	00030240 	.word	0x00030240

000d5d2c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5d2c:	b508      	push	{r3, lr}
   d5d2e:	4b02      	ldr	r3, [pc, #8]	; (d5d38 <network_disconnect+0xc>)
   d5d30:	681b      	ldr	r3, [r3, #0]
   d5d32:	68db      	ldr	r3, [r3, #12]
   d5d34:	9301      	str	r3, [sp, #4]
   d5d36:	bd08      	pop	{r3, pc}
   d5d38:	00030240 	.word	0x00030240

000d5d3c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5d3c:	b508      	push	{r3, lr}
   d5d3e:	4b02      	ldr	r3, [pc, #8]	; (d5d48 <network_ready+0xc>)
   d5d40:	681b      	ldr	r3, [r3, #0]
   d5d42:	691b      	ldr	r3, [r3, #16]
   d5d44:	9301      	str	r3, [sp, #4]
   d5d46:	bd08      	pop	{r3, pc}
   d5d48:	00030240 	.word	0x00030240

000d5d4c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d4c:	b508      	push	{r3, lr}
   d5d4e:	4b02      	ldr	r3, [pc, #8]	; (d5d58 <network_on+0xc>)
   d5d50:	681b      	ldr	r3, [r3, #0]
   d5d52:	695b      	ldr	r3, [r3, #20]
   d5d54:	9301      	str	r3, [sp, #4]
   d5d56:	bd08      	pop	{r3, pc}
   d5d58:	00030240 	.word	0x00030240

000d5d5c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d5c:	b508      	push	{r3, lr}
   d5d5e:	4b02      	ldr	r3, [pc, #8]	; (d5d68 <network_off+0xc>)
   d5d60:	681b      	ldr	r3, [r3, #0]
   d5d62:	699b      	ldr	r3, [r3, #24]
   d5d64:	9301      	str	r3, [sp, #4]
   d5d66:	bd08      	pop	{r3, pc}
   d5d68:	00030240 	.word	0x00030240

000d5d6c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5d6c:	b508      	push	{r3, lr}
   d5d6e:	4b02      	ldr	r3, [pc, #8]	; (d5d78 <network_listen+0xc>)
   d5d70:	681b      	ldr	r3, [r3, #0]
   d5d72:	69db      	ldr	r3, [r3, #28]
   d5d74:	9301      	str	r3, [sp, #4]
   d5d76:	bd08      	pop	{r3, pc}
   d5d78:	00030240 	.word	0x00030240

000d5d7c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5d7c:	b508      	push	{r3, lr}
   d5d7e:	4b02      	ldr	r3, [pc, #8]	; (d5d88 <network_listening+0xc>)
   d5d80:	681b      	ldr	r3, [r3, #0]
   d5d82:	6a1b      	ldr	r3, [r3, #32]
   d5d84:	9301      	str	r3, [sp, #4]
   d5d86:	bd08      	pop	{r3, pc}
   d5d88:	00030240 	.word	0x00030240

000d5d8c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5d8c:	b508      	push	{r3, lr}
   d5d8e:	4b02      	ldr	r3, [pc, #8]	; (d5d98 <network_set_listen_timeout+0xc>)
   d5d90:	681b      	ldr	r3, [r3, #0]
   d5d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5d94:	9301      	str	r3, [sp, #4]
   d5d96:	bd08      	pop	{r3, pc}
   d5d98:	00030240 	.word	0x00030240

000d5d9c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5d9c:	b508      	push	{r3, lr}
   d5d9e:	4b02      	ldr	r3, [pc, #8]	; (d5da8 <network_get_listen_timeout+0xc>)
   d5da0:	681b      	ldr	r3, [r3, #0]
   d5da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5da4:	9301      	str	r3, [sp, #4]
   d5da6:	bd08      	pop	{r3, pc}
   d5da8:	00030240 	.word	0x00030240

000d5dac <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5dac:	b508      	push	{r3, lr}
   d5dae:	4b02      	ldr	r3, [pc, #8]	; (d5db8 <malloc+0xc>)
   d5db0:	681b      	ldr	r3, [r3, #0]
   d5db2:	681b      	ldr	r3, [r3, #0]
   d5db4:	9301      	str	r3, [sp, #4]
   d5db6:	bd08      	pop	{r3, pc}
   d5db8:	0003021c 	.word	0x0003021c

000d5dbc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5dbc:	b508      	push	{r3, lr}
   d5dbe:	4b02      	ldr	r3, [pc, #8]	; (d5dc8 <free+0xc>)
   d5dc0:	681b      	ldr	r3, [r3, #0]
   d5dc2:	685b      	ldr	r3, [r3, #4]
   d5dc4:	9301      	str	r3, [sp, #4]
   d5dc6:	bd08      	pop	{r3, pc}
   d5dc8:	0003021c 	.word	0x0003021c

000d5dcc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5dcc:	b508      	push	{r3, lr}
   d5dce:	4b02      	ldr	r3, [pc, #8]	; (d5dd8 <realloc+0xc>)
   d5dd0:	681b      	ldr	r3, [r3, #0]
   d5dd2:	689b      	ldr	r3, [r3, #8]
   d5dd4:	9301      	str	r3, [sp, #4]
   d5dd6:	bd08      	pop	{r3, pc}
   d5dd8:	0003021c 	.word	0x0003021c

000d5ddc <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d5ddc:	b508      	push	{r3, lr}
   d5dde:	4b02      	ldr	r3, [pc, #8]	; (d5de8 <sprintf+0xc>)
   d5de0:	681b      	ldr	r3, [r3, #0]
   d5de2:	68db      	ldr	r3, [r3, #12]
   d5de4:	9301      	str	r3, [sp, #4]
   d5de6:	bd08      	pop	{r3, pc}
   d5de8:	0003021c 	.word	0x0003021c

000d5dec <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5dec:	b508      	push	{r3, lr}
   d5dee:	4b02      	ldr	r3, [pc, #8]	; (d5df8 <__errno+0xc>)
   d5df0:	681b      	ldr	r3, [r3, #0]
   d5df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5df4:	9301      	str	r3, [sp, #4]
   d5df6:	bd08      	pop	{r3, pc}
   d5df8:	0003021c 	.word	0x0003021c

000d5dfc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5dfc:	2100      	movs	r1, #0
   d5dfe:	f7ff bf51 	b.w	d5ca4 <system_delay_ms>

000d5e02 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5e02:	b510      	push	{r4, lr}
   d5e04:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5e06:	6800      	ldr	r0, [r0, #0]
   d5e08:	b108      	cbz	r0, d5e0e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5e0a:	f7ff fdbb 	bl	d5984 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5e0e:	4620      	mov	r0, r4
   d5e10:	bd10      	pop	{r4, pc}
	...

000d5e14 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5e14:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5e16:	4c06      	ldr	r4, [pc, #24]	; (d5e30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5e18:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5e1a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5e1c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5e1e:	f7ff fda9 	bl	d5974 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5e22:	4620      	mov	r0, r4
   d5e24:	4a03      	ldr	r2, [pc, #12]	; (d5e34 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5e26:	4904      	ldr	r1, [pc, #16]	; (d5e38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5e2c:	f001 ba20 	b.w	d7270 <__aeabi_atexit>
   d5e30:	2003e3d4 	.word	0x2003e3d4
   d5e34:	2003e2d8 	.word	0x2003e2d8
   d5e38:	000d5e03 	.word	0x000d5e03

000d5e3c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5e3c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5e3e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5e40:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5e42:	b113      	cbz	r3, d5e4a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5e44:	2203      	movs	r2, #3
   d5e46:	4601      	mov	r1, r0
   d5e48:	4798      	blx	r3
    }
   d5e4a:	4620      	mov	r0, r4
   d5e4c:	bd10      	pop	{r4, pc}

000d5e4e <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5e4e:	2200      	movs	r2, #0
   d5e50:	4611      	mov	r1, r2
   d5e52:	6840      	ldr	r0, [r0, #4]
   d5e54:	f7ff bf92 	b.w	d5d7c <network_listening>

000d5e58 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5e58:	2200      	movs	r2, #0
   d5e5a:	4611      	mov	r1, r2
   d5e5c:	6840      	ldr	r0, [r0, #4]
   d5e5e:	f7ff bf9d 	b.w	d5d9c <network_get_listen_timeout>

000d5e62 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5e62:	2200      	movs	r2, #0
   d5e64:	6840      	ldr	r0, [r0, #4]
   d5e66:	f7ff bf91 	b.w	d5d8c <network_set_listen_timeout>

000d5e6a <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5e6a:	2200      	movs	r2, #0
   d5e6c:	f081 0101 	eor.w	r1, r1, #1
   d5e70:	6840      	ldr	r0, [r0, #4]
   d5e72:	f7ff bf7b 	b.w	d5d6c <network_listen>

000d5e76 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5e76:	2300      	movs	r3, #0
   d5e78:	461a      	mov	r2, r3
   d5e7a:	4619      	mov	r1, r3
   d5e7c:	6840      	ldr	r0, [r0, #4]
   d5e7e:	f7ff bf6d 	b.w	d5d5c <network_off>

000d5e82 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5e82:	2300      	movs	r3, #0
   d5e84:	461a      	mov	r2, r3
   d5e86:	4619      	mov	r1, r3
   d5e88:	6840      	ldr	r0, [r0, #4]
   d5e8a:	f7ff bf5f 	b.w	d5d4c <network_on>

000d5e8e <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5e8e:	2200      	movs	r2, #0
   d5e90:	4611      	mov	r1, r2
   d5e92:	6840      	ldr	r0, [r0, #4]
   d5e94:	f7ff bf52 	b.w	d5d3c <network_ready>

000d5e98 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5e98:	2200      	movs	r2, #0
   d5e9a:	4611      	mov	r1, r2
   d5e9c:	6840      	ldr	r0, [r0, #4]
   d5e9e:	f7ff bf3d 	b.w	d5d1c <network_connecting>

000d5ea2 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ea2:	2200      	movs	r2, #0
   d5ea4:	2102      	movs	r1, #2
   d5ea6:	6840      	ldr	r0, [r0, #4]
   d5ea8:	f7ff bf40 	b.w	d5d2c <network_disconnect>

000d5eac <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5eac:	2300      	movs	r3, #0
   d5eae:	461a      	mov	r2, r3
   d5eb0:	6840      	ldr	r0, [r0, #4]
   d5eb2:	f7ff bf2b 	b.w	d5d0c <network_connect>
	...

000d5eb8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5eb8:	4b02      	ldr	r3, [pc, #8]	; (d5ec4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5eba:	2203      	movs	r2, #3
   d5ebc:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5ebe:	4a02      	ldr	r2, [pc, #8]	; (d5ec8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5ec0:	601a      	str	r2, [r3, #0]
   d5ec2:	4770      	bx	lr
   d5ec4:	2003e3d8 	.word	0x2003e3d8
   d5ec8:	000d96a8 	.word	0x000d96a8

000d5ecc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5ecc:	4770      	bx	lr

000d5ece <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ed0:	4606      	mov	r6, r0
   d5ed2:	4615      	mov	r5, r2
   d5ed4:	460c      	mov	r4, r1
   d5ed6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5ed8:	42bc      	cmp	r4, r7
   d5eda:	d006      	beq.n	d5eea <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5edc:	6833      	ldr	r3, [r6, #0]
   d5ede:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5ee2:	689b      	ldr	r3, [r3, #8]
   d5ee4:	4630      	mov	r0, r6
   d5ee6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5ee8:	e7f6      	b.n	d5ed8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5eea:	4628      	mov	r0, r5
   d5eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5eee <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5eee:	2200      	movs	r2, #0
   d5ef0:	7c00      	ldrb	r0, [r0, #16]
   d5ef2:	f7ff bd97 	b.w	d5a24 <HAL_I2C_Write_Data>

000d5ef6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5ef6:	2100      	movs	r1, #0
   d5ef8:	7c00      	ldrb	r0, [r0, #16]
   d5efa:	f7ff bd9b 	b.w	d5a34 <HAL_I2C_Available_Data>

000d5efe <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5efe:	2100      	movs	r1, #0
   d5f00:	7c00      	ldrb	r0, [r0, #16]
   d5f02:	f7ff bd9f 	b.w	d5a44 <HAL_I2C_Read_Data>

000d5f06 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5f06:	2100      	movs	r1, #0
   d5f08:	7c00      	ldrb	r0, [r0, #16]
   d5f0a:	f7ff bda3 	b.w	d5a54 <HAL_I2C_Peek_Data>

000d5f0e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5f0e:	2100      	movs	r1, #0
   d5f10:	7c00      	ldrb	r0, [r0, #16]
   d5f12:	f7ff bda7 	b.w	d5a64 <HAL_I2C_Flush_Data>

000d5f16 <_ZN7TwoWireD0Ev>:
   d5f16:	b510      	push	{r4, lr}
   d5f18:	2114      	movs	r1, #20
   d5f1a:	4604      	mov	r4, r0
   d5f1c:	f001 f9ad 	bl	d727a <_ZdlPvj>
   d5f20:	4620      	mov	r0, r4
   d5f22:	bd10      	pop	{r4, pc}

000d5f24 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5f24:	b510      	push	{r4, lr}
   d5f26:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5f28:	2300      	movs	r3, #0
   d5f2a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5f30:	60a3      	str	r3, [r4, #8]
   d5f32:	4b04      	ldr	r3, [pc, #16]	; (d5f44 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5f34:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5f36:	4608      	mov	r0, r1
   d5f38:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5f3a:	4611      	mov	r1, r2
   d5f3c:	f7ff fda2 	bl	d5a84 <HAL_I2C_Init>
}
   d5f40:	4620      	mov	r0, r4
   d5f42:	bd10      	pop	{r4, pc}
   d5f44:	000d96dc 	.word	0x000d96dc

000d5f48 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5f48:	2300      	movs	r3, #0
   d5f4a:	461a      	mov	r2, r3
   d5f4c:	4619      	mov	r1, r3
   d5f4e:	7c00      	ldrb	r0, [r0, #16]
   d5f50:	f7ff bd50 	b.w	d59f4 <HAL_I2C_Begin>

000d5f54 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5f54:	b570      	push	{r4, r5, r6, lr}
   d5f56:	460c      	mov	r4, r1
   d5f58:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d5f5a:	2514      	movs	r5, #20
   d5f5c:	4606      	mov	r6, r0
   d5f5e:	462a      	mov	r2, r5
   d5f60:	2100      	movs	r1, #0
   d5f62:	a801      	add	r0, sp, #4
   d5f64:	f003 f8f1 	bl	d914a <memset>
   d5f68:	7823      	ldrb	r3, [r4, #0]
   d5f6a:	f88d 3008 	strb.w	r3, [sp, #8]
   d5f6e:	6863      	ldr	r3, [r4, #4]
   d5f70:	9303      	str	r3, [sp, #12]
   d5f72:	68e3      	ldr	r3, [r4, #12]
   d5f74:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d5f76:	2200      	movs	r2, #0
   d5f78:	7a23      	ldrb	r3, [r4, #8]
   d5f7a:	7c30      	ldrb	r0, [r6, #16]
   d5f7c:	f8ad 5004 	strh.w	r5, [sp, #4]
   d5f80:	a901      	add	r1, sp, #4
   d5f82:	9305      	str	r3, [sp, #20]
   d5f84:	f7ff fd86 	bl	d5a94 <HAL_I2C_Request_Data_Ex>
}
   d5f88:	b006      	add	sp, #24
   d5f8a:	bd70      	pop	{r4, r5, r6, pc}

000d5f8c <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d5f8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5f8e:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5f90:	f88d 1000 	strb.w	r1, [sp]
   d5f94:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5f98:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5f9a:	bf18      	it	ne
   d5f9c:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5f9e:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d5fa0:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5fa2:	f88d 3008 	strb.w	r3, [sp, #8]
   d5fa6:	f7ff ffd5 	bl	d5f54 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5faa:	b005      	add	sp, #20
   d5fac:	f85d fb04 	ldr.w	pc, [sp], #4

000d5fb0 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d5fb0:	2301      	movs	r3, #1
   d5fb2:	f7ff bfeb 	b.w	d5f8c <_ZN7TwoWire11requestFromEhjh>

000d5fb6 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5fb6:	2200      	movs	r2, #0
   d5fb8:	7c00      	ldrb	r0, [r0, #16]
   d5fba:	f7ff bd23 	b.w	d5a04 <HAL_I2C_Begin_Transmission>

000d5fbe <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5fbe:	b2c9      	uxtb	r1, r1
   d5fc0:	f7ff bff9 	b.w	d5fb6 <_ZN7TwoWire17beginTransmissionEh>

000d5fc4 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5fc4:	2200      	movs	r2, #0
   d5fc6:	7c00      	ldrb	r0, [r0, #16]
   d5fc8:	f7ff bd24 	b.w	d5a14 <HAL_I2C_End_Transmission>

000d5fcc <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5fcc:	2101      	movs	r1, #1
   d5fce:	f7ff bff9 	b.w	d5fc4 <_ZN7TwoWire15endTransmissionEh>

000d5fd2 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5fd2:	2100      	movs	r1, #0
   d5fd4:	7c00      	ldrb	r0, [r0, #16]
   d5fd6:	f7ff bd4d 	b.w	d5a74 <HAL_I2C_Is_Enabled>

000d5fda <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5fda:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5fdc:	7d03      	ldrb	r3, [r0, #20]
   d5fde:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5fe0:	b08d      	sub	sp, #52	; 0x34
   d5fe2:	460e      	mov	r6, r1
   d5fe4:	f100 0704 	add.w	r7, r0, #4
   d5fe8:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5fec:	d002      	beq.n	d5ff4 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5fee:	f100 0508 	add.w	r5, r0, #8
   d5ff2:	e018      	b.n	d6026 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5ff4:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5ff6:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5ff8:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5ffc:	232f      	movs	r3, #47	; 0x2f
   d5ffe:	462a      	mov	r2, r5
   d6000:	200a      	movs	r0, #10
   d6002:	f7ff fd57 	bl	d5ab4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6006:	4628      	mov	r0, r5
   d6008:	f003 f8d8 	bl	d91bc <strlen>
   d600c:	6833      	ldr	r3, [r6, #0]
   d600e:	4602      	mov	r2, r0
   d6010:	68db      	ldr	r3, [r3, #12]
   d6012:	4629      	mov	r1, r5
   d6014:	4630      	mov	r0, r6
   d6016:	4798      	blx	r3
   d6018:	e00f      	b.n	d603a <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d601a:	b124      	cbz	r4, d6026 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d601c:	212e      	movs	r1, #46	; 0x2e
   d601e:	4630      	mov	r0, r6
   d6020:	f000 f9fe 	bl	d6420 <_ZN5Print5printEc>
   d6024:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6026:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d602a:	220a      	movs	r2, #10
   d602c:	4630      	mov	r0, r6
   d602e:	f000 fa10 	bl	d6452 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6032:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6034:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6036:	d1f0      	bne.n	d601a <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6038:	4620      	mov	r0, r4
    }
    return n;
}
   d603a:	b00d      	add	sp, #52	; 0x34
   d603c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6040 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6040:	b510      	push	{r4, lr}
   d6042:	4b05      	ldr	r3, [pc, #20]	; (d6058 <_ZN9IPAddressC1Ev+0x18>)
   d6044:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6046:	2211      	movs	r2, #17
   d6048:	f840 3b04 	str.w	r3, [r0], #4
   d604c:	2100      	movs	r1, #0
   d604e:	f003 f87c 	bl	d914a <memset>
{
    clear();
}
   d6052:	4620      	mov	r0, r4
   d6054:	bd10      	pop	{r4, pc}
   d6056:	bf00      	nop
   d6058:	000d9704 	.word	0x000d9704

000d605c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d605c:	4603      	mov	r3, r0
   d605e:	4a07      	ldr	r2, [pc, #28]	; (d607c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6060:	b510      	push	{r4, lr}
   d6062:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6066:	f101 0210 	add.w	r2, r1, #16
   d606a:	f851 4b04 	ldr.w	r4, [r1], #4
   d606e:	f843 4b04 	str.w	r4, [r3], #4
   d6072:	4291      	cmp	r1, r2
   d6074:	d1f9      	bne.n	d606a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6076:	780a      	ldrb	r2, [r1, #0]
   d6078:	701a      	strb	r2, [r3, #0]
}
   d607a:	bd10      	pop	{r4, pc}
   d607c:	000d9704 	.word	0x000d9704

000d6080 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d6080:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d6082:	2b04      	cmp	r3, #4
   d6084:	d101      	bne.n	d608a <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d6086:	6840      	ldr	r0, [r0, #4]
   d6088:	e008      	b.n	d609c <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d608a:	2b06      	cmp	r3, #6
   d608c:	d10a      	bne.n	d60a4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d608e:	6843      	ldr	r3, [r0, #4]
   d6090:	b953      	cbnz	r3, d60a8 <_ZNK9IPAddresscvbEv+0x28>
   d6092:	6883      	ldr	r3, [r0, #8]
   d6094:	b943      	cbnz	r3, d60a8 <_ZNK9IPAddresscvbEv+0x28>
   d6096:	68c3      	ldr	r3, [r0, #12]
   d6098:	b933      	cbnz	r3, d60a8 <_ZNK9IPAddresscvbEv+0x28>
   d609a:	6900      	ldr	r0, [r0, #16]
   d609c:	3000      	adds	r0, #0
   d609e:	bf18      	it	ne
   d60a0:	2001      	movne	r0, #1
   d60a2:	4770      	bx	lr
    } else {
        return false;
   d60a4:	2000      	movs	r0, #0
   d60a6:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d60a8:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d60aa:	4770      	bx	lr

000d60ac <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d60ac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d60ae:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d60b2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d60b6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d60ba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d60be:	2304      	movs	r3, #4
   d60c0:	6041      	str	r1, [r0, #4]
   d60c2:	7503      	strb	r3, [r0, #20]
   d60c4:	bd10      	pop	{r4, pc}
	...

000d60c8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d60c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d60ca:	4d04      	ldr	r5, [pc, #16]	; (d60dc <_ZN9IPAddressC1Ehhhh+0x14>)
   d60cc:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d60ce:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d60d2:	9500      	str	r5, [sp, #0]
   d60d4:	f7ff ffea 	bl	d60ac <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d60d8:	b003      	add	sp, #12
   d60da:	bd30      	pop	{r4, r5, pc}
   d60dc:	000d9704 	.word	0x000d9704

000d60e0 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d60e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d60e2:	780d      	ldrb	r5, [r1, #0]
   d60e4:	788b      	ldrb	r3, [r1, #2]
   d60e6:	784a      	ldrb	r2, [r1, #1]
   d60e8:	78c9      	ldrb	r1, [r1, #3]
   d60ea:	9100      	str	r1, [sp, #0]
   d60ec:	4629      	mov	r1, r5
   d60ee:	f7ff ffdd 	bl	d60ac <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d60f2:	b003      	add	sp, #12
   d60f4:	bd30      	pop	{r4, r5, pc}
	...

000d60f8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d60f8:	4b01      	ldr	r3, [pc, #4]	; (d6100 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d60fa:	4a02      	ldr	r2, [pc, #8]	; (d6104 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d60fc:	601a      	str	r2, [r3, #0]
   d60fe:	4770      	bx	lr
   d6100:	2003e3e0 	.word	0x2003e3e0
   d6104:	000d9783 	.word	0x000d9783

000d6108 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6108:	2200      	movs	r2, #0
   d610a:	4611      	mov	r1, r2
   d610c:	6840      	ldr	r0, [r0, #4]
   d610e:	f7ff be35 	b.w	d5d7c <network_listening>

000d6112 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6112:	2200      	movs	r2, #0
   d6114:	4611      	mov	r1, r2
   d6116:	6840      	ldr	r0, [r0, #4]
   d6118:	f7ff be40 	b.w	d5d9c <network_get_listen_timeout>

000d611c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d611c:	2200      	movs	r2, #0
   d611e:	6840      	ldr	r0, [r0, #4]
   d6120:	f7ff be34 	b.w	d5d8c <network_set_listen_timeout>

000d6124 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6124:	2200      	movs	r2, #0
   d6126:	f081 0101 	eor.w	r1, r1, #1
   d612a:	6840      	ldr	r0, [r0, #4]
   d612c:	f7ff be1e 	b.w	d5d6c <network_listen>

000d6130 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6130:	2300      	movs	r3, #0
   d6132:	461a      	mov	r2, r3
   d6134:	2101      	movs	r1, #1
   d6136:	6840      	ldr	r0, [r0, #4]
   d6138:	f7ff be10 	b.w	d5d5c <network_off>

000d613c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d613c:	2300      	movs	r3, #0
   d613e:	461a      	mov	r2, r3
   d6140:	4619      	mov	r1, r3
   d6142:	6840      	ldr	r0, [r0, #4]
   d6144:	f7ff be02 	b.w	d5d4c <network_on>

000d6148 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6148:	2200      	movs	r2, #0
   d614a:	4611      	mov	r1, r2
   d614c:	6840      	ldr	r0, [r0, #4]
   d614e:	f7ff bdf5 	b.w	d5d3c <network_ready>

000d6152 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6152:	2200      	movs	r2, #0
   d6154:	4611      	mov	r1, r2
   d6156:	6840      	ldr	r0, [r0, #4]
   d6158:	f7ff bde0 	b.w	d5d1c <network_connecting>

000d615c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d615c:	2200      	movs	r2, #0
   d615e:	2102      	movs	r1, #2
   d6160:	6840      	ldr	r0, [r0, #4]
   d6162:	f7ff bde3 	b.w	d5d2c <network_disconnect>

000d6166 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6166:	2300      	movs	r3, #0
   d6168:	461a      	mov	r2, r3
   d616a:	6840      	ldr	r0, [r0, #4]
   d616c:	f7ff bdce 	b.w	d5d0c <network_connect>

000d6170 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6170:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6172:	4605      	mov	r5, r0
   d6174:	b188      	cbz	r0, d619a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6176:	6804      	ldr	r4, [r0, #0]
   d6178:	b14c      	cbz	r4, d618e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d617a:	68a3      	ldr	r3, [r4, #8]
   d617c:	b11b      	cbz	r3, d6186 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d617e:	2203      	movs	r2, #3
   d6180:	4621      	mov	r1, r4
   d6182:	4620      	mov	r0, r4
   d6184:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6186:	2110      	movs	r1, #16
   d6188:	4620      	mov	r0, r4
   d618a:	f001 f876 	bl	d727a <_ZdlPvj>
   d618e:	4628      	mov	r0, r5
   d6190:	2114      	movs	r1, #20
      }
   d6192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6196:	f001 b870 	b.w	d727a <_ZdlPvj>
   d619a:	bd38      	pop	{r3, r4, r5, pc}

000d619c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d619c:	b110      	cbz	r0, d61a4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d619e:	6803      	ldr	r3, [r0, #0]
   d61a0:	685b      	ldr	r3, [r3, #4]
   d61a2:	4718      	bx	r3
   d61a4:	4770      	bx	lr

000d61a6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d61a6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d61a8:	6803      	ldr	r3, [r0, #0]
   d61aa:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d61ac:	b1bb      	cbz	r3, d61de <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d61ae:	6858      	ldr	r0, [r3, #4]
   d61b0:	f7ff fbc8 	bl	d5944 <os_thread_is_current>
   d61b4:	b978      	cbnz	r0, d61d6 <_ZN6ThreadD1Ev+0x30>
   d61b6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d61b8:	7c5a      	ldrb	r2, [r3, #17]
   d61ba:	b912      	cbnz	r2, d61c2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d61bc:	6858      	ldr	r0, [r3, #4]
   d61be:	f7ff fbc9 	bl	d5954 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d61c2:	6823      	ldr	r3, [r4, #0]
   d61c4:	6858      	ldr	r0, [r3, #4]
   d61c6:	f7ff fbcd 	bl	d5964 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61ca:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d61cc:	2300      	movs	r3, #0
   d61ce:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d61d0:	b128      	cbz	r0, d61de <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d61d2:	f7ff ffcd 	bl	d6170 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d61d6:	6820      	ldr	r0, [r4, #0]
   d61d8:	b108      	cbz	r0, d61de <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d61da:	f7ff ffc9 	bl	d6170 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d61de:	4620      	mov	r0, r4
   d61e0:	bd10      	pop	{r4, pc}

000d61e2 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d61e2:	b538      	push	{r3, r4, r5, lr}
   d61e4:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d61e6:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d61ea:	b108      	cbz	r0, d61f0 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d61ec:	f7fd ff59 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d61f0:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d61f4:	b108      	cbz	r0, d61fa <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d61f6:	f7ff fbc5 	bl	d5984 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d61fa:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d61fe:	b135      	cbz	r5, d620e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6200:	4628      	mov	r0, r5
   d6202:	f7ff ffd0 	bl	d61a6 <_ZN6ThreadD1Ev>
   d6206:	2104      	movs	r1, #4
   d6208:	4628      	mov	r0, r5
   d620a:	f001 f836 	bl	d727a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d620e:	6820      	ldr	r0, [r4, #0]
   d6210:	b108      	cbz	r0, d6216 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6212:	f7ff ffc3 	bl	d619c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6216:	4620      	mov	r0, r4
   d6218:	bd38      	pop	{r3, r4, r5, pc}
	...

000d621c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d621c:	b510      	push	{r4, lr}
   d621e:	4b04      	ldr	r3, [pc, #16]	; (d6230 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6220:	4604      	mov	r4, r0
   d6222:	f840 3b08 	str.w	r3, [r0], #8
   d6226:	f7ff ffdc 	bl	d61e2 <_ZN5spark11MeshPublishD1Ev>
   d622a:	4620      	mov	r0, r4
   d622c:	bd10      	pop	{r4, pc}
   d622e:	bf00      	nop
   d6230:	000d97f0 	.word	0x000d97f0

000d6234 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6234:	b538      	push	{r3, r4, r5, lr}
   d6236:	4c0e      	ldr	r4, [pc, #56]	; (d6270 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6238:	4b0e      	ldr	r3, [pc, #56]	; (d6274 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d623a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d623c:	2500      	movs	r5, #0
   d623e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6240:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6244:	6063      	str	r3, [r4, #4]
   d6246:	60a5      	str	r5, [r4, #8]
   d6248:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d624c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6250:	f7ff fb90 	bl	d5974 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6254:	4b08      	ldr	r3, [pc, #32]	; (d6278 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6256:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d625a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d625e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6260:	4620      	mov	r0, r4
   d6262:	4a06      	ldr	r2, [pc, #24]	; (d627c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6264:	4906      	ldr	r1, [pc, #24]	; (d6280 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d626a:	f001 b801 	b.w	d7270 <__aeabi_atexit>
   d626e:	bf00      	nop
   d6270:	2003e3e4 	.word	0x2003e3e4
   d6274:	000d9824 	.word	0x000d9824
   d6278:	000d97f0 	.word	0x000d97f0
   d627c:	2003e2d8 	.word	0x2003e2d8
   d6280:	000d621d 	.word	0x000d621d

000d6284 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6284:	2300      	movs	r3, #0
   d6286:	461a      	mov	r2, r3
   d6288:	6840      	ldr	r0, [r0, #4]
   d628a:	f7ff bd3f 	b.w	d5d0c <network_connect>

000d628e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d628e:	2200      	movs	r2, #0
   d6290:	2102      	movs	r1, #2
   d6292:	6840      	ldr	r0, [r0, #4]
   d6294:	f7ff bd4a 	b.w	d5d2c <network_disconnect>

000d6298 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6298:	2200      	movs	r2, #0
   d629a:	4611      	mov	r1, r2
   d629c:	6840      	ldr	r0, [r0, #4]
   d629e:	f7ff bd3d 	b.w	d5d1c <network_connecting>

000d62a2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d62a2:	2200      	movs	r2, #0
   d62a4:	4611      	mov	r1, r2
   d62a6:	6840      	ldr	r0, [r0, #4]
   d62a8:	f7ff bd48 	b.w	d5d3c <network_ready>

000d62ac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d62ac:	2300      	movs	r3, #0
   d62ae:	461a      	mov	r2, r3
   d62b0:	4619      	mov	r1, r3
   d62b2:	6840      	ldr	r0, [r0, #4]
   d62b4:	f7ff bd4a 	b.w	d5d4c <network_on>

000d62b8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d62b8:	2300      	movs	r3, #0
   d62ba:	461a      	mov	r2, r3
   d62bc:	4619      	mov	r1, r3
   d62be:	6840      	ldr	r0, [r0, #4]
   d62c0:	f7ff bd4c 	b.w	d5d5c <network_off>

000d62c4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d62c4:	2200      	movs	r2, #0
   d62c6:	f081 0101 	eor.w	r1, r1, #1
   d62ca:	6840      	ldr	r0, [r0, #4]
   d62cc:	f7ff bd4e 	b.w	d5d6c <network_listen>

000d62d0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d62d0:	2200      	movs	r2, #0
   d62d2:	6840      	ldr	r0, [r0, #4]
   d62d4:	f7ff bd5a 	b.w	d5d8c <network_set_listen_timeout>

000d62d8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d62d8:	2200      	movs	r2, #0
   d62da:	4611      	mov	r1, r2
   d62dc:	6840      	ldr	r0, [r0, #4]
   d62de:	f7ff bd5d 	b.w	d5d9c <network_get_listen_timeout>

000d62e2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d62e2:	2200      	movs	r2, #0
   d62e4:	4611      	mov	r1, r2
   d62e6:	6840      	ldr	r0, [r0, #4]
   d62e8:	f7ff bd48 	b.w	d5d7c <network_listening>

000d62ec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d62ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d62f0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d62f2:	b095      	sub	sp, #84	; 0x54
   d62f4:	4616      	mov	r6, r2
   d62f6:	460d      	mov	r5, r1
   d62f8:	4607      	mov	r7, r0
    IPAddress addr;
   d62fa:	f7ff fea1 	bl	d6040 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d62fe:	4621      	mov	r1, r4
   d6300:	2220      	movs	r2, #32
   d6302:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6304:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6306:	f002 ff20 	bl	d914a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d630a:	2340      	movs	r3, #64	; 0x40
   d630c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d630e:	4621      	mov	r1, r4
   d6310:	466b      	mov	r3, sp
   d6312:	aa0c      	add	r2, sp, #48	; 0x30
   d6314:	4630      	mov	r0, r6
   d6316:	f7ff fbf5 	bl	d5b04 <netdb_getaddrinfo>
    if (!r) {
   d631a:	4604      	mov	r4, r0
   d631c:	2800      	cmp	r0, #0
   d631e:	d144      	bne.n	d63aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6320:	4602      	mov	r2, r0
   d6322:	2101      	movs	r1, #1
   d6324:	6868      	ldr	r0, [r5, #4]
   d6326:	f7ff fd09 	bl	d5d3c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d632a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d632c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d632e:	4622      	mov	r2, r4
   d6330:	6868      	ldr	r0, [r5, #4]
   d6332:	f7ff fd03 	bl	d5d3c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6336:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6338:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d633a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d633c:	2e00      	cmp	r6, #0
   d633e:	d034      	beq.n	d63aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6340:	2900      	cmp	r1, #0
   d6342:	d132      	bne.n	d63aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6344:	6873      	ldr	r3, [r6, #4]
   d6346:	2b02      	cmp	r3, #2
   d6348:	d002      	beq.n	d6350 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d634a:	2b0a      	cmp	r3, #10
   d634c:	d009      	beq.n	d6362 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d634e:	e02a      	b.n	d63a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6350:	f1b8 0f00 	cmp.w	r8, #0
   d6354:	d027      	beq.n	d63a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6356:	6971      	ldr	r1, [r6, #20]
   d6358:	4638      	mov	r0, r7
   d635a:	3104      	adds	r1, #4
   d635c:	f7ff fec0 	bl	d60e0 <_ZN9IPAddressaSEPKh>
   d6360:	e020      	b.n	d63a4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6362:	f1b9 0f00 	cmp.w	r9, #0
   d6366:	d01e      	beq.n	d63a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6368:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d636a:	2211      	movs	r2, #17
   d636c:	a801      	add	r0, sp, #4
   d636e:	f002 feec 	bl	d914a <memset>
                    a.v = 6;
   d6372:	2306      	movs	r3, #6
   d6374:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6378:	ad01      	add	r5, sp, #4
   d637a:	f104 0308 	add.w	r3, r4, #8
   d637e:	3418      	adds	r4, #24
   d6380:	6818      	ldr	r0, [r3, #0]
   d6382:	6859      	ldr	r1, [r3, #4]
   d6384:	462a      	mov	r2, r5
   d6386:	c203      	stmia	r2!, {r0, r1}
   d6388:	3308      	adds	r3, #8
   d638a:	42a3      	cmp	r3, r4
   d638c:	4615      	mov	r5, r2
   d638e:	d1f7      	bne.n	d6380 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6390:	a901      	add	r1, sp, #4
   d6392:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6394:	ad07      	add	r5, sp, #28
   d6396:	f7ff fe61 	bl	d605c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d639a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d639c:	1d3c      	adds	r4, r7, #4
   d639e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d63a0:	682b      	ldr	r3, [r5, #0]
   d63a2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d63a4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d63a6:	69f6      	ldr	r6, [r6, #28]
   d63a8:	e7c8      	b.n	d633c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d63aa:	9800      	ldr	r0, [sp, #0]
   d63ac:	f7ff fba2 	bl	d5af4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d63b0:	4638      	mov	r0, r7
   d63b2:	b015      	add	sp, #84	; 0x54
   d63b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d63b8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d63b8:	4b02      	ldr	r3, [pc, #8]	; (d63c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d63ba:	4a03      	ldr	r2, [pc, #12]	; (d63c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d63bc:	601a      	str	r2, [r3, #0]
   d63be:	2200      	movs	r2, #0
   d63c0:	605a      	str	r2, [r3, #4]
   d63c2:	4770      	bx	lr
   d63c4:	2003e5b8 	.word	0x2003e5b8
   d63c8:	000d9824 	.word	0x000d9824

000d63cc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d63cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63ce:	4606      	mov	r6, r0
   d63d0:	460d      	mov	r5, r1
   d63d2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d63d4:	2400      	movs	r4, #0
  while (size--) {
   d63d6:	42bd      	cmp	r5, r7
   d63d8:	d00c      	beq.n	d63f4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d63da:	6833      	ldr	r3, [r6, #0]
   d63dc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d63e0:	689b      	ldr	r3, [r3, #8]
   d63e2:	4630      	mov	r0, r6
   d63e4:	4798      	blx	r3
     if (chunk>=0)
   d63e6:	2800      	cmp	r0, #0
   d63e8:	db01      	blt.n	d63ee <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d63ea:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d63ec:	e7f3      	b.n	d63d6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d63ee:	2c00      	cmp	r4, #0
   d63f0:	bf08      	it	eq
   d63f2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d63f4:	4620      	mov	r0, r4
   d63f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d63f8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d63f8:	b570      	push	{r4, r5, r6, lr}
   d63fa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d63fc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d63fe:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6400:	b149      	cbz	r1, d6416 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6402:	f002 fedb 	bl	d91bc <strlen>
   d6406:	682b      	ldr	r3, [r5, #0]
   d6408:	4602      	mov	r2, r0
   d640a:	4621      	mov	r1, r4
   d640c:	4628      	mov	r0, r5
   d640e:	68db      	ldr	r3, [r3, #12]
    }
   d6410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6414:	4718      	bx	r3
    }
   d6416:	bd70      	pop	{r4, r5, r6, pc}

000d6418 <_ZN5Print5printEPKc>:
   d6418:	b508      	push	{r3, lr}
   d641a:	f7ff ffed 	bl	d63f8 <_ZN5Print5writeEPKc>
   d641e:	bd08      	pop	{r3, pc}

000d6420 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6420:	6803      	ldr	r3, [r0, #0]
   d6422:	689b      	ldr	r3, [r3, #8]
   d6424:	4718      	bx	r3

000d6426 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6426:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6428:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d642a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d642c:	f7ff fff8 	bl	d6420 <_ZN5Print5printEc>
  n += print('\n');
   d6430:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6432:	4604      	mov	r4, r0
  n += print('\n');
   d6434:	4628      	mov	r0, r5
   d6436:	f7ff fff3 	bl	d6420 <_ZN5Print5printEc>
  return n;
}
   d643a:	4420      	add	r0, r4
   d643c:	bd38      	pop	{r3, r4, r5, pc}

000d643e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d643e:	b538      	push	{r3, r4, r5, lr}
   d6440:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6442:	f7ff ffd9 	bl	d63f8 <_ZN5Print5writeEPKc>
   d6446:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6448:	4628      	mov	r0, r5
   d644a:	f7ff ffec 	bl	d6426 <_ZN5Print7printlnEv>
  return n;
}
   d644e:	4420      	add	r0, r4
   d6450:	bd38      	pop	{r3, r4, r5, pc}

000d6452 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6452:	b530      	push	{r4, r5, lr}
   d6454:	b08b      	sub	sp, #44	; 0x2c
   d6456:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6458:	2100      	movs	r1, #0
   d645a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d645e:	2a01      	cmp	r2, #1
   d6460:	bf98      	it	ls
   d6462:	220a      	movls	r2, #10
   d6464:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6468:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d646c:	fb05 3312 	mls	r3, r5, r2, r3
   d6470:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6474:	2b09      	cmp	r3, #9
   d6476:	bf94      	ite	ls
   d6478:	3330      	addls	r3, #48	; 0x30
   d647a:	3337      	addhi	r3, #55	; 0x37
   d647c:	b2db      	uxtb	r3, r3
   d647e:	4621      	mov	r1, r4
   d6480:	f804 3901 	strb.w	r3, [r4], #-1
   d6484:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6486:	2d00      	cmp	r5, #0
   d6488:	d1ee      	bne.n	d6468 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d648a:	f7ff ffb5 	bl	d63f8 <_ZN5Print5writeEPKc>
}
   d648e:	b00b      	add	sp, #44	; 0x2c
   d6490:	bd30      	pop	{r4, r5, pc}
	...

000d6494 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d6494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6498:	ec57 6b10 	vmov	r6, r7, d0
   d649c:	4682      	mov	sl, r0
   d649e:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d64a0:	ee10 2a10 	vmov	r2, s0
   d64a4:	463b      	mov	r3, r7
   d64a6:	ee10 0a10 	vmov	r0, s0
   d64aa:	4639      	mov	r1, r7
   d64ac:	f002 fdd6 	bl	d905c <__aeabi_dcmpun>
   d64b0:	b108      	cbz	r0, d64b6 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d64b2:	494e      	ldr	r1, [pc, #312]	; (d65ec <_ZN5Print10printFloatEdh+0x158>)
   d64b4:	e012      	b.n	d64dc <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d64b6:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d64ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d64be:	4b4c      	ldr	r3, [pc, #304]	; (d65f0 <_ZN5Print10printFloatEdh+0x15c>)
   d64c0:	4630      	mov	r0, r6
   d64c2:	4649      	mov	r1, r9
   d64c4:	f002 fdca 	bl	d905c <__aeabi_dcmpun>
   d64c8:	b968      	cbnz	r0, d64e6 <_ZN5Print10printFloatEdh+0x52>
   d64ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d64ce:	4b48      	ldr	r3, [pc, #288]	; (d65f0 <_ZN5Print10printFloatEdh+0x15c>)
   d64d0:	4630      	mov	r0, r6
   d64d2:	4649      	mov	r1, r9
   d64d4:	f002 fda4 	bl	d9020 <__aeabi_dcmple>
   d64d8:	b928      	cbnz	r0, d64e6 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d64da:	4946      	ldr	r1, [pc, #280]	; (d65f4 <_ZN5Print10printFloatEdh+0x160>)
   d64dc:	4650      	mov	r0, sl
   d64de:	f7ff ff8b 	bl	d63f8 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d64e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d64e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d64ea:	4b43      	ldr	r3, [pc, #268]	; (d65f8 <_ZN5Print10printFloatEdh+0x164>)
   d64ec:	4630      	mov	r0, r6
   d64ee:	4639      	mov	r1, r7
   d64f0:	f002 fdaa 	bl	d9048 <__aeabi_dcmpgt>
   d64f4:	b108      	cbz	r0, d64fa <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d64f6:	4941      	ldr	r1, [pc, #260]	; (d65fc <_ZN5Print10printFloatEdh+0x168>)
   d64f8:	e7f0      	b.n	d64dc <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d64fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d64fe:	4b40      	ldr	r3, [pc, #256]	; (d6600 <_ZN5Print10printFloatEdh+0x16c>)
   d6500:	4630      	mov	r0, r6
   d6502:	4639      	mov	r1, r7
   d6504:	f002 fd82 	bl	d900c <__aeabi_dcmplt>
   d6508:	2800      	cmp	r0, #0
   d650a:	d1f4      	bne.n	d64f6 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d650c:	2200      	movs	r2, #0
   d650e:	2300      	movs	r3, #0
   d6510:	4630      	mov	r0, r6
   d6512:	4639      	mov	r1, r7
   d6514:	f002 fd7a 	bl	d900c <__aeabi_dcmplt>
   d6518:	b140      	cbz	r0, d652c <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d651a:	212d      	movs	r1, #45	; 0x2d
   d651c:	4650      	mov	r0, sl
   d651e:	f7ff ff7f 	bl	d6420 <_ZN5Print5printEc>
     number = -number;
   d6522:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d6526:	4604      	mov	r4, r0
     number = -number;
   d6528:	461f      	mov	r7, r3
   d652a:	e000      	b.n	d652e <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d652c:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d652e:	4935      	ldr	r1, [pc, #212]	; (d6604 <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6530:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d6534:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d6536:	fa5f f388 	uxtb.w	r3, r8
   d653a:	429d      	cmp	r5, r3
   d653c:	d906      	bls.n	d654c <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d653e:	2200      	movs	r2, #0
   d6540:	4b31      	ldr	r3, [pc, #196]	; (d6608 <_ZN5Print10printFloatEdh+0x174>)
   d6542:	f002 fc1b 	bl	d8d7c <__aeabi_ddiv>
   d6546:	f108 0801 	add.w	r8, r8, #1
   d654a:	e7f4      	b.n	d6536 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d654c:	4632      	mov	r2, r6
   d654e:	463b      	mov	r3, r7
   d6550:	f002 f938 	bl	d87c4 <__adddf3>
   d6554:	460f      	mov	r7, r1
   d6556:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d6558:	f002 fdbe 	bl	d90d8 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d655c:	220a      	movs	r2, #10
   d655e:	4601      	mov	r1, r0
   d6560:	4680      	mov	r8, r0
   d6562:	4650      	mov	r0, sl
   d6564:	f7ff ff75 	bl	d6452 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6568:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d656a:	b3e5      	cbz	r5, d65e6 <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d656c:	4640      	mov	r0, r8
   d656e:	f002 fa65 	bl	d8a3c <__aeabi_ui2d>
   d6572:	4602      	mov	r2, r0
   d6574:	460b      	mov	r3, r1
   d6576:	4630      	mov	r0, r6
   d6578:	4639      	mov	r1, r7
   d657a:	f002 f921 	bl	d87c0 <__aeabi_dsub>
   d657e:	4606      	mov	r6, r0
   d6580:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6582:	4650      	mov	r0, sl
   d6584:	4921      	ldr	r1, [pc, #132]	; (d660c <_ZN5Print10printFloatEdh+0x178>)
   d6586:	f7ff ff37 	bl	d63f8 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d658a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d658c:	2200      	movs	r2, #0
   d658e:	4b1e      	ldr	r3, [pc, #120]	; (d6608 <_ZN5Print10printFloatEdh+0x174>)
   d6590:	4630      	mov	r0, r6
   d6592:	4639      	mov	r1, r7
   d6594:	f002 fac8 	bl	d8b28 <__aeabi_dmul>
   d6598:	4606      	mov	r6, r0
   d659a:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d659c:	f002 fd74 	bl	d9088 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d65a0:	f1b0 0900 	subs.w	r9, r0, #0
   d65a4:	da07      	bge.n	d65b6 <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d65a6:	212d      	movs	r1, #45	; 0x2d
   d65a8:	4650      	mov	r0, sl
   d65aa:	f7ff ff39 	bl	d6420 <_ZN5Print5printEc>
            val = -n;
   d65ae:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d65b2:	4680      	mov	r8, r0
   d65b4:	e002      	b.n	d65bc <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d65b6:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d65b8:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d65bc:	220a      	movs	r2, #10
   d65be:	4650      	mov	r0, sl
   d65c0:	f7ff ff47 	bl	d6452 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d65c4:	4440      	add	r0, r8
   d65c6:	4404      	add	r4, r0
    remainder -= toPrint;
   d65c8:	4648      	mov	r0, r9
   d65ca:	f002 fa47 	bl	d8a5c <__aeabi_i2d>
   d65ce:	4602      	mov	r2, r0
   d65d0:	460b      	mov	r3, r1
   d65d2:	4630      	mov	r0, r6
   d65d4:	4639      	mov	r1, r7
   d65d6:	f002 f8f3 	bl	d87c0 <__aeabi_dsub>
   d65da:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d65dc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d65e0:	4606      	mov	r6, r0
   d65e2:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d65e4:	d1d2      	bne.n	d658c <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d65e6:	4620      	mov	r0, r4
   d65e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d65ec:	000d9850 	.word	0x000d9850
   d65f0:	7fefffff 	.word	0x7fefffff
   d65f4:	000d985a 	.word	0x000d985a
   d65f8:	41efffff 	.word	0x41efffff
   d65fc:	000d9854 	.word	0x000d9854
   d6600:	c1efffff 	.word	0xc1efffff
   d6604:	3fe00000 	.word	0x3fe00000
   d6608:	40240000 	.word	0x40240000
   d660c:	000d9858 	.word	0x000d9858

000d6610 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
   d6610:	b538      	push	{r3, r4, r5, lr}
   d6612:	4604      	mov	r4, r0
  return printFloat((double)n, digits);
   d6614:	ee10 0a10 	vmov	r0, s0
   d6618:	b2cd      	uxtb	r5, r1
   d661a:	f002 fa31 	bl	d8a80 <__aeabi_f2d>
   d661e:	ec41 0b10 	vmov	d0, r0, r1
   d6622:	4629      	mov	r1, r5
   d6624:	4620      	mov	r0, r4
}
   d6626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return write(c);
}

size_t Print::print(float n, int digits)
{
  return printFloat((double)n, digits);
   d662a:	f7ff bf33 	b.w	d6494 <_ZN5Print10printFloatEdh>

000d662e <_ZN5Print5printEdi>:
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d662e:	b2c9      	uxtb	r1, r1
   d6630:	f7ff bf30 	b.w	d6494 <_ZN5Print10printFloatEdh>

000d6634 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d6634:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d6636:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d6638:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d663a:	f7ff ff2b 	bl	d6494 <_ZN5Print10printFloatEdh>
   d663e:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d6640:	4628      	mov	r0, r5
   d6642:	f7ff fef0 	bl	d6426 <_ZN5Print7printlnEv>
  return n;
}
   d6646:	4420      	add	r0, r4
   d6648:	bd38      	pop	{r3, r4, r5, pc}

000d664a <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d664a:	b538      	push	{r3, r4, r5, lr}
   d664c:	4604      	mov	r4, r0
    return println((double)num, digits);
   d664e:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d6652:	460d      	mov	r5, r1
    return println((double)num, digits);
   d6654:	f002 fa14 	bl	d8a80 <__aeabi_f2d>
   d6658:	ec41 0b10 	vmov	d0, r0, r1
   d665c:	4629      	mov	r1, r5
   d665e:	4620      	mov	r0, r4
}
   d6660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d6664:	f7ff bfe6 	b.w	d6634 <_ZN5Print7printlnEdi>

000d6668 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6668:	b510      	push	{r4, lr}
   d666a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d666c:	f7ff fbe6 	bl	d5e3c <_ZNSt14_Function_baseD1Ev>
   d6670:	4620      	mov	r0, r4
   d6672:	bd10      	pop	{r4, pc}

000d6674 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6674:	4803      	ldr	r0, [pc, #12]	; (d6684 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6676:	4a04      	ldr	r2, [pc, #16]	; (d6688 <_GLOBAL__sub_I_RGB+0x14>)
   d6678:	4904      	ldr	r1, [pc, #16]	; (d668c <_GLOBAL__sub_I_RGB+0x18>)
   d667a:	2300      	movs	r3, #0
   d667c:	6083      	str	r3, [r0, #8]
   d667e:	f000 bdf7 	b.w	d7270 <__aeabi_atexit>
   d6682:	bf00      	nop
   d6684:	2003e5c0 	.word	0x2003e5c0
   d6688:	2003e2d8 	.word	0x2003e2d8
   d668c:	000d6669 	.word	0x000d6669

000d6690 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6690:	b510      	push	{r4, lr}
   d6692:	4604      	mov	r4, r0
{
    _spi = spi;
   d6694:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d6696:	4608      	mov	r0, r1
   d6698:	f7ff fa6c 	bl	d5b74 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d669c:	2300      	movs	r3, #0
   d669e:	6063      	str	r3, [r4, #4]
}
   d66a0:	4620      	mov	r0, r4
   d66a2:	bd10      	pop	{r4, pc}

000d66a4 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d66a4:	7800      	ldrb	r0, [r0, #0]
   d66a6:	f7ff ba6d 	b.w	d5b84 <HAL_SPI_Is_Enabled>

000d66aa <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d66aa:	b510      	push	{r4, lr}
   d66ac:	4604      	mov	r4, r0
{
	free(buffer);
   d66ae:	6800      	ldr	r0, [r0, #0]
   d66b0:	f7ff fb84 	bl	d5dbc <free>
}
   d66b4:	4620      	mov	r0, r4
   d66b6:	bd10      	pop	{r4, pc}

000d66b8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d66b8:	b510      	push	{r4, lr}
   d66ba:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d66bc:	6800      	ldr	r0, [r0, #0]
   d66be:	b108      	cbz	r0, d66c4 <_ZN6String10invalidateEv+0xc>
   d66c0:	f7ff fb7c 	bl	d5dbc <free>
	buffer = NULL;
   d66c4:	2300      	movs	r3, #0
   d66c6:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d66c8:	60a3      	str	r3, [r4, #8]
   d66ca:	6063      	str	r3, [r4, #4]
   d66cc:	bd10      	pop	{r4, pc}

000d66ce <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d66ce:	b538      	push	{r3, r4, r5, lr}
   d66d0:	4604      	mov	r4, r0
   d66d2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d66d4:	6800      	ldr	r0, [r0, #0]
   d66d6:	3101      	adds	r1, #1
   d66d8:	f7ff fb78 	bl	d5dcc <realloc>
	if (newbuffer) {
   d66dc:	b110      	cbz	r0, d66e4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d66de:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d66e2:	2001      	movs	r0, #1
	}
	return 0;
}
   d66e4:	bd38      	pop	{r3, r4, r5, pc}

000d66e6 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d66e6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d66e8:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d66ea:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d66ec:	b113      	cbz	r3, d66f4 <_ZN6String7reserveEj+0xe>
   d66ee:	6843      	ldr	r3, [r0, #4]
   d66f0:	428b      	cmp	r3, r1
   d66f2:	d207      	bcs.n	d6704 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d66f4:	4620      	mov	r0, r4
   d66f6:	f7ff ffea 	bl	d66ce <_ZN6String12changeBufferEj>
   d66fa:	b120      	cbz	r0, d6706 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d66fc:	68a3      	ldr	r3, [r4, #8]
   d66fe:	b90b      	cbnz	r3, d6704 <_ZN6String7reserveEj+0x1e>
   d6700:	6822      	ldr	r2, [r4, #0]
   d6702:	7013      	strb	r3, [r2, #0]
   d6704:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6706:	bd10      	pop	{r4, pc}

000d6708 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6708:	b570      	push	{r4, r5, r6, lr}
   d670a:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d670c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d670e:	4604      	mov	r4, r0
   d6710:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6712:	f7ff ffe8 	bl	d66e6 <_ZN6String7reserveEj>
   d6716:	b918      	cbnz	r0, d6720 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6718:	4620      	mov	r0, r4
   d671a:	f7ff ffcd 	bl	d66b8 <_ZN6String10invalidateEv>
		return *this;
   d671e:	e009      	b.n	d6734 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6720:	462a      	mov	r2, r5
   d6722:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6724:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6726:	6820      	ldr	r0, [r4, #0]
   d6728:	f002 fd04 	bl	d9134 <memcpy>
	buffer[len] = 0;
   d672c:	6822      	ldr	r2, [r4, #0]
   d672e:	68a3      	ldr	r3, [r4, #8]
   d6730:	2100      	movs	r1, #0
   d6732:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6734:	4620      	mov	r0, r4
   d6736:	bd70      	pop	{r4, r5, r6, pc}

000d6738 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6738:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d673a:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d673c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d673e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6740:	6043      	str	r3, [r0, #4]
	len = 0;
   d6742:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6744:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6746:	460d      	mov	r5, r1
   d6748:	b139      	cbz	r1, d675a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d674a:	4608      	mov	r0, r1
   d674c:	f002 fd36 	bl	d91bc <strlen>
   d6750:	4629      	mov	r1, r5
   d6752:	4602      	mov	r2, r0
   d6754:	4620      	mov	r0, r4
   d6756:	f7ff ffd7 	bl	d6708 <_ZN6String4copyEPKcj>
}
   d675a:	4620      	mov	r0, r4
   d675c:	bd38      	pop	{r3, r4, r5, pc}

000d675e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d675e:	b538      	push	{r3, r4, r5, lr}
   d6760:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6762:	460c      	mov	r4, r1
   d6764:	b141      	cbz	r1, d6778 <_ZN6StringaSEPKc+0x1a>
   d6766:	4608      	mov	r0, r1
   d6768:	f002 fd28 	bl	d91bc <strlen>
   d676c:	4621      	mov	r1, r4
   d676e:	4602      	mov	r2, r0
   d6770:	4628      	mov	r0, r5
   d6772:	f7ff ffc9 	bl	d6708 <_ZN6String4copyEPKcj>
   d6776:	e001      	b.n	d677c <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d6778:	f7ff ff9e 	bl	d66b8 <_ZN6String10invalidateEv>

	return *this;
}
   d677c:	4628      	mov	r0, r5
   d677e:	bd38      	pop	{r3, r4, r5, pc}

000d6780 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6780:	b570      	push	{r4, r5, r6, lr}
   d6782:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6784:	460e      	mov	r6, r1
   d6786:	b909      	cbnz	r1, d678c <_ZN6String6concatEPKcj+0xc>
   d6788:	2000      	movs	r0, #0
   d678a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d678c:	b16a      	cbz	r2, d67aa <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d678e:	6883      	ldr	r3, [r0, #8]
   d6790:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d6792:	4629      	mov	r1, r5
   d6794:	f7ff ffa7 	bl	d66e6 <_ZN6String7reserveEj>
   d6798:	2800      	cmp	r0, #0
   d679a:	d0f5      	beq.n	d6788 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d679c:	6820      	ldr	r0, [r4, #0]
   d679e:	68a3      	ldr	r3, [r4, #8]
   d67a0:	4631      	mov	r1, r6
   d67a2:	4418      	add	r0, r3
   d67a4:	f002 fd02 	bl	d91ac <strcpy>
	len = newlen;
   d67a8:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d67aa:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d67ac:	bd70      	pop	{r4, r5, r6, pc}

000d67ae <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d67ae:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d67b0:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d67b2:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d67b6:	2201      	movs	r2, #1
   d67b8:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d67ba:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d67be:	f7ff ffdf 	bl	d6780 <_ZN6String6concatEPKcj>
}
   d67c2:	b003      	add	sp, #12
   d67c4:	f85d fb04 	ldr.w	pc, [sp], #4

000d67c8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d67c8:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d67ca:	4c09      	ldr	r4, [pc, #36]	; (d67f0 <_GLOBAL__sub_I_System+0x28>)
   d67cc:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d67ce:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d67d2:	6020      	str	r0, [r4, #0]
   d67d4:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d67d6:	71a0      	strb	r0, [r4, #6]
   d67d8:	8120      	strh	r0, [r4, #8]
   d67da:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d67dc:	f7ff fa5a 	bl	d5c94 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d67e0:	4620      	mov	r0, r4
   d67e2:	4a04      	ldr	r2, [pc, #16]	; (d67f4 <_GLOBAL__sub_I_System+0x2c>)
   d67e4:	4904      	ldr	r1, [pc, #16]	; (d67f8 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d67e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d67ea:	f000 bd41 	b.w	d7270 <__aeabi_atexit>
   d67ee:	bf00      	nop
   d67f0:	2003e5d0 	.word	0x2003e5d0
   d67f4:	2003e2d8 	.word	0x2003e2d8
   d67f8:	000d40d9 	.word	0x000d40d9

000d67fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d67fc:	4b02      	ldr	r3, [pc, #8]	; (d6808 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d67fe:	681a      	ldr	r2, [r3, #0]
   d6800:	4b02      	ldr	r3, [pc, #8]	; (d680c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6802:	601a      	str	r2, [r3, #0]
   d6804:	4770      	bx	lr
   d6806:	bf00      	nop
   d6808:	2003e268 	.word	0x2003e268
   d680c:	2003e5dc 	.word	0x2003e5dc

000d6810 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d6810:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d6812:	6804      	ldr	r4, [r0, #0]
   d6814:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d6816:	46a4      	mov	ip, r4
    }
   d6818:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d681c:	4760      	bx	ip

000d681e <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d681e:	6803      	ldr	r3, [r0, #0]
   d6820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6822:	4718      	bx	r3

000d6824 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d6824:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d6826:	4770      	bx	lr

000d6828 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d6828:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d682a:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d682c:	1a10      	subs	r0, r2, r0
   d682e:	4770      	bx	lr

000d6830 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d6830:	b513      	push	{r0, r1, r4, lr}
   d6832:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d6834:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d6836:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d683a:	68d4      	ldr	r4, [r2, #12]
   d683c:	4619      	mov	r1, r3
   d683e:	2201      	movs	r2, #1
   d6840:	47a0      	blx	r4
}
   d6842:	b002      	add	sp, #8
   d6844:	bd10      	pop	{r4, pc}

000d6846 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d6846:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d6848:	6803      	ldr	r3, [r0, #0]
   d684a:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d684c:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d684e:	4798      	blx	r3
   d6850:	b128      	cbz	r0, d685e <_ZN3UDP4readEv+0x18>
   d6852:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6854:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d6856:	1c59      	adds	r1, r3, #1
   d6858:	86e1      	strh	r1, [r4, #54]	; 0x36
   d685a:	5cd0      	ldrb	r0, [r2, r3]
   d685c:	bd10      	pop	{r4, pc}
   d685e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d6862:	bd10      	pop	{r4, pc}

000d6864 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d6864:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d6866:	6803      	ldr	r3, [r0, #0]
   d6868:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d686a:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d686c:	4798      	blx	r3
   d686e:	b118      	cbz	r0, d6878 <_ZN3UDP4peekEv+0x14>
   d6870:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6872:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d6874:	5cd0      	ldrb	r0, [r2, r3]
   d6876:	bd10      	pop	{r4, pc}
   d6878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d687c:	bd10      	pop	{r4, pc}

000d687e <_ZN3UDP5flushEv>:

void UDP::flush() {
   d687e:	4770      	bx	lr

000d6880 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d6880:	b410      	push	{r4}
   d6882:	4603      	mov	r3, r0
   d6884:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d6886:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d6888:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d688a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d688c:	6803      	ldr	r3, [r0, #0]
   d688e:	1a52      	subs	r2, r2, r1
   d6890:	68db      	ldr	r3, [r3, #12]
   d6892:	4421      	add	r1, r4
}
   d6894:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d6898:	4718      	bx	r3

000d689a <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d689a:	f1a0 0010 	sub.w	r0, r0, #16
   d689e:	f7ff bfef 	b.w	d6880 <_ZNK3UDP7printToER5Print>

000d68a2 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d68a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d68a4:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d68a6:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d68a8:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d68aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d68ac:	4604      	mov	r4, r0
   d68ae:	460f      	mov	r7, r1
   d68b0:	4615      	mov	r5, r2
    stop();
   d68b2:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d68b4:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d68b6:	4632      	mov	r2, r6
   d68b8:	2100      	movs	r1, #0
   d68ba:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d68bc:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d68be:	f002 fc44 	bl	d914a <memset>
    saddr.sin6_len = sizeof(saddr);
   d68c2:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d68c6:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d68c8:	260a      	movs	r6, #10
   d68ca:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d68ce:	f7ff f909 	bl	d5ae4 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d68d2:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d68d4:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d68d8:	2102      	movs	r1, #2
   d68da:	4630      	mov	r0, r6
   d68dc:	f7ff f942 	bl	d5b64 <sock_socket>

    if (_sock < 0) {
   d68e0:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d68e2:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d68e4:	db24      	blt.n	d6930 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d68e6:	2204      	movs	r2, #4
   d68e8:	9200      	str	r2, [sp, #0]
   d68ea:	ab02      	add	r3, sp, #8
   d68ec:	f640 71ff 	movw	r1, #4095	; 0xfff
   d68f0:	f7ff f918 	bl	d5b24 <sock_setsockopt>
   d68f4:	b9e0      	cbnz	r0, d6930 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d68f6:	b195      	cbz	r5, d691e <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d68f8:	9003      	str	r0, [sp, #12]
   d68fa:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d68fe:	a903      	add	r1, sp, #12
   d6900:	b2e8      	uxtb	r0, r5
   d6902:	f7ff f8cf 	bl	d5aa4 <if_index_to_name>
   d6906:	b998      	cbnz	r0, d6930 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d6908:	2306      	movs	r3, #6
   d690a:	9300      	str	r3, [sp, #0]
   d690c:	f241 020b 	movw	r2, #4107	; 0x100b
   d6910:	ab03      	add	r3, sp, #12
   d6912:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6916:	6960      	ldr	r0, [r4, #20]
   d6918:	f7ff f904 	bl	d5b24 <sock_setsockopt>
   d691c:	b940      	cbnz	r0, d6930 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d691e:	221c      	movs	r2, #28
   d6920:	a905      	add	r1, sp, #20
   d6922:	6960      	ldr	r0, [r4, #20]
   d6924:	f7ff f8f6 	bl	d5b14 <sock_bind>
   d6928:	b910      	cbnz	r0, d6930 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d692a:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d692c:	2001      	movs	r0, #1
   d692e:	e004      	b.n	d693a <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d6930:	6823      	ldr	r3, [r4, #0]
   d6932:	4620      	mov	r0, r4
   d6934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6936:	4798      	blx	r3
   d6938:	2000      	movs	r0, #0
    }
    return bound;
}
   d693a:	b00d      	add	sp, #52	; 0x34
   d693c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d693e <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d693e:	b510      	push	{r4, lr}
   d6940:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d6942:	6940      	ldr	r0, [r0, #20]
   d6944:	2800      	cmp	r0, #0
   d6946:	db01      	blt.n	d694c <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d6948:	f7ff f8f4 	bl	d5b34 <sock_close>
    }

    _sock = -1;
   d694c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6950:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6952:	2300      	movs	r3, #0
   d6954:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d6956:	8723      	strh	r3, [r4, #56]	; 0x38
   d6958:	bd10      	pop	{r4, pc}

000d695a <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d695a:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d695c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d695e:	4605      	mov	r5, r0
   d6960:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d6962:	b113      	cbz	r3, d696a <_ZN3UDP5writeEPKhj+0x10>
   d6964:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d6966:	1a24      	subs	r4, r4, r0
   d6968:	e000      	b.n	d696c <_ZN3UDP5writeEPKhj+0x12>
   d696a:	461c      	mov	r4, r3
   d696c:	4294      	cmp	r4, r2
   d696e:	bf28      	it	cs
   d6970:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d6972:	4622      	mov	r2, r4
   d6974:	4418      	add	r0, r3
   d6976:	f002 fbdd 	bl	d9134 <memcpy>
    _offset += size;
   d697a:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d697c:	4423      	add	r3, r4
   d697e:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d6980:	4620      	mov	r0, r4
   d6982:	bd38      	pop	{r3, r4, r5, pc}

000d6984 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d6984:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d6986:	6803      	ldr	r3, [r0, #0]
   d6988:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d698a:	4604      	mov	r4, r0
   d698c:	460e      	mov	r6, r1
   d698e:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d6990:	4798      	blx	r3
   d6992:	b188      	cbz	r0, d69b8 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d6994:	6823      	ldr	r3, [r4, #0]
   d6996:	4620      	mov	r0, r4
   d6998:	691b      	ldr	r3, [r3, #16]
   d699a:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d699c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d699e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d69a0:	4285      	cmp	r5, r0
   d69a2:	bfa8      	it	ge
   d69a4:	4605      	movge	r5, r0
   d69a6:	4419      	add	r1, r3
   d69a8:	462a      	mov	r2, r5
   d69aa:	4630      	mov	r0, r6
   d69ac:	f002 fbc2 	bl	d9134 <memcpy>
        _offset += read;
   d69b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d69b2:	442b      	add	r3, r5
   d69b4:	86e3      	strh	r3, [r4, #54]	; 0x36
   d69b6:	e001      	b.n	d69bc <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d69b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d69bc:	4628      	mov	r0, r5
   d69be:	bd70      	pop	{r4, r5, r6, pc}

000d69c0 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d69c0:	b570      	push	{r4, r5, r6, lr}
   d69c2:	4604      	mov	r4, r0
   d69c4:	4b05      	ldr	r3, [pc, #20]	; (d69dc <_ZN3UDP8remoteIPEv+0x1c>)
   d69c6:	f844 3b04 	str.w	r3, [r4], #4
   d69ca:	f101 0520 	add.w	r5, r1, #32
   d69ce:	4606      	mov	r6, r0
   d69d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d69d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d69d4:	682b      	ldr	r3, [r5, #0]
   d69d6:	7023      	strb	r3, [r4, #0]
   d69d8:	4630      	mov	r0, r6
   d69da:	bd70      	pop	{r4, r5, r6, pc}
   d69dc:	000d9704 	.word	0x000d9704

000d69e0 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d69e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d69e2:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d69e4:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d69e6:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d69e8:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d69ea:	4a0a      	ldr	r2, [pc, #40]	; (d6a14 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d69ec:	9202      	str	r2, [sp, #8]
   d69ee:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d69f0:	468e      	mov	lr, r1
   d69f2:	4606      	mov	r6, r0
   d69f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d69f6:	ac03      	add	r4, sp, #12
   d69f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d69fa:	682b      	ldr	r3, [r5, #0]
   d69fc:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d69fe:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d6a02:	9300      	str	r3, [sp, #0]
   d6a04:	4662      	mov	r2, ip
   d6a06:	ab02      	add	r3, sp, #8
   d6a08:	4671      	mov	r1, lr
   d6a0a:	4630      	mov	r0, r6
   d6a0c:	47b8      	blx	r7
    }
   d6a0e:	b009      	add	sp, #36	; 0x24
   d6a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6a12:	bf00      	nop
   d6a14:	000d9704 	.word	0x000d9704

000d6a18 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d6a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6a1a:	6803      	ldr	r3, [r0, #0]
   d6a1c:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d6a20:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d6a22:	4b0d      	ldr	r3, [pc, #52]	; (d6a58 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d6a24:	b089      	sub	sp, #36	; 0x24
   d6a26:	f100 0620 	add.w	r6, r0, #32
   d6a2a:	4604      	mov	r4, r0
   d6a2c:	9302      	str	r3, [sp, #8]
   d6a2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6a30:	ad03      	add	r5, sp, #12
   d6a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6a34:	6833      	ldr	r3, [r6, #0]
   d6a36:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6a38:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d6a3a:	9300      	str	r3, [sp, #0]
   d6a3c:	4672      	mov	r2, lr
   d6a3e:	ab02      	add	r3, sp, #8
   d6a40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6a42:	4620      	mov	r0, r4
   d6a44:	47b8      	blx	r7
    flush(); // wait for send to complete
   d6a46:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6a48:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d6a4a:	69db      	ldr	r3, [r3, #28]
   d6a4c:	4620      	mov	r0, r4
   d6a4e:	4798      	blx	r3
    return result;
}
   d6a50:	4628      	mov	r0, r5
   d6a52:	b009      	add	sp, #36	; 0x24
   d6a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6a56:	bf00      	nop
   d6a58:	000d9704 	.word	0x000d9704

000d6a5c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d6a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d6a5e:	7843      	ldrb	r3, [r0, #1]
   d6a60:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d6a62:	b08d      	sub	sp, #52	; 0x34
   d6a64:	4605      	mov	r5, r0
   d6a66:	460c      	mov	r4, r1
   d6a68:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d6a6a:	d101      	bne.n	d6a70 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6a6c:	1d01      	adds	r1, r0, #4
   d6a6e:	e033      	b.n	d6ad8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d6a70:	2b0a      	cmp	r3, #10
   d6a72:	d135      	bne.n	d6ae0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d6a74:	2211      	movs	r2, #17
   d6a76:	2100      	movs	r1, #0
   d6a78:	a801      	add	r0, sp, #4
   d6a7a:	f002 fb66 	bl	d914a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6a7e:	68ab      	ldr	r3, [r5, #8]
   d6a80:	b943      	cbnz	r3, d6a94 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d6a82:	68eb      	ldr	r3, [r5, #12]
   d6a84:	b933      	cbnz	r3, d6a94 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d6a86:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6a8a:	692e      	ldr	r6, [r5, #16]
   d6a8c:	f7ff f81a 	bl	d5ac4 <inet_htonl>
   d6a90:	4286      	cmp	r6, r0
   d6a92:	d01f      	beq.n	d6ad4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6a94:	f105 0308 	add.w	r3, r5, #8
   d6a98:	ae01      	add	r6, sp, #4
   d6a9a:	f105 0e18 	add.w	lr, r5, #24
   d6a9e:	6818      	ldr	r0, [r3, #0]
   d6aa0:	6859      	ldr	r1, [r3, #4]
   d6aa2:	4632      	mov	r2, r6
   d6aa4:	c203      	stmia	r2!, {r0, r1}
   d6aa6:	3308      	adds	r3, #8
   d6aa8:	4573      	cmp	r3, lr
   d6aaa:	4616      	mov	r6, r2
   d6aac:	d1f7      	bne.n	d6a9e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d6aae:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6ab0:	a901      	add	r1, sp, #4
   d6ab2:	a806      	add	r0, sp, #24
   d6ab4:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d6ab6:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6aba:	f7ff facf 	bl	d605c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6abe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6ac0:	3404      	adds	r4, #4
   d6ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6ac4:	6833      	ldr	r3, [r6, #0]
   d6ac6:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d6ac8:	b157      	cbz	r7, d6ae0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d6aca:	8868      	ldrh	r0, [r5, #2]
   d6acc:	f7ff f802 	bl	d5ad4 <inet_ntohs>
   d6ad0:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d6ad2:	e005      	b.n	d6ae0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6ad4:	f105 0114 	add.w	r1, r5, #20
   d6ad8:	4620      	mov	r0, r4
   d6ada:	f7ff fb01 	bl	d60e0 <_ZN9IPAddressaSEPKh>
   d6ade:	e7f3      	b.n	d6ac8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d6ae0:	b00d      	add	sp, #52	; 0x34
   d6ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6ae4 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d6ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6ae8:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d6aea:	ab0e      	add	r3, sp, #56	; 0x38
   d6aec:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d6aee:	4606      	mov	r6, r0
   d6af0:	4617      	mov	r7, r2
   d6af2:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d6af4:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d6af8:	462a      	mov	r2, r5
   d6afa:	4629      	mov	r1, r5
   d6afc:	f7ff f802 	bl	d5b04 <netdb_getaddrinfo>
   d6b00:	2800      	cmp	r0, #0
   d6b02:	db1f      	blt.n	d6b44 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6b04:	9b01      	ldr	r3, [sp, #4]
   d6b06:	b1fb      	cbz	r3, d6b48 <_ZN3UDP11beginPacketEPKct+0x64>
   d6b08:	695b      	ldr	r3, [r3, #20]
   d6b0a:	b1eb      	cbz	r3, d6b48 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d6b0c:	a802      	add	r0, sp, #8
   d6b0e:	f7ff fa97 	bl	d6040 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6b12:	9b01      	ldr	r3, [sp, #4]
   d6b14:	462a      	mov	r2, r5
   d6b16:	6958      	ldr	r0, [r3, #20]
   d6b18:	a902      	add	r1, sp, #8
   d6b1a:	f7ff ff9f 	bl	d6a5c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6b1e:	a802      	add	r0, sp, #8
   d6b20:	f7ff faae 	bl	d6080 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6b24:	b180      	cbz	r0, d6b48 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d6b26:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6b28:	ad03      	add	r5, sp, #12
   d6b2a:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d6b2e:	4b0b      	ldr	r3, [pc, #44]	; (d6b5c <_ZN3UDP11beginPacketEPKct+0x78>)
   d6b30:	9308      	str	r3, [sp, #32]
   d6b32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6b34:	ac09      	add	r4, sp, #36	; 0x24
   d6b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6b38:	682b      	ldr	r3, [r5, #0]
   d6b3a:	7023      	strb	r3, [r4, #0]
   d6b3c:	463a      	mov	r2, r7
   d6b3e:	a908      	add	r1, sp, #32
   d6b40:	4630      	mov	r0, r6
   d6b42:	47c0      	blx	r8
   d6b44:	4604      	mov	r4, r0
   d6b46:	e001      	b.n	d6b4c <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d6b48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d6b4c:	9801      	ldr	r0, [sp, #4]
   d6b4e:	f7fe ffd1 	bl	d5af4 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d6b52:	4620      	mov	r0, r4
   d6b54:	b00e      	add	sp, #56	; 0x38
   d6b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6b5a:	bf00      	nop
   d6b5c:	000d9704 	.word	0x000d9704

000d6b60 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d6b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d6b64:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d6b68:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d6b6c:	b08c      	sub	sp, #48	; 0x30
   d6b6e:	4605      	mov	r5, r0
   d6b70:	460c      	mov	r4, r1
   d6b72:	4617      	mov	r7, r2
   d6b74:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d6b76:	db00      	blt.n	d6b7a <_ZN3UDP13receivePacketEPhjm+0x1a>
   d6b78:	b911      	cbnz	r1, d6b80 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d6b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6b7e:	e035      	b.n	d6bec <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d6b80:	f04f 0a1c 	mov.w	sl, #28
   d6b84:	ae05      	add	r6, sp, #20
   d6b86:	4652      	mov	r2, sl
   d6b88:	2100      	movs	r1, #0
   d6b8a:	4630      	mov	r0, r6
   d6b8c:	f002 fadd 	bl	d914a <memset>
        socklen_t slen = sizeof(saddr);
   d6b90:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d6b94:	f1b9 0f00 	cmp.w	r9, #0
   d6b98:	d014      	beq.n	d6bc4 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d6b9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6b9e:	fbb9 f1f2 	udiv	r1, r9, r2
   d6ba2:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d6ba4:	fb02 9111 	mls	r1, r2, r1, r9
   d6ba8:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d6baa:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d6bac:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d6bae:	9300      	str	r3, [sp, #0]
   d6bb0:	f241 0206 	movw	r2, #4102	; 0x1006
   d6bb4:	ab03      	add	r3, sp, #12
   d6bb6:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6bba:	4640      	mov	r0, r8
   d6bbc:	f7fe ffb2 	bl	d5b24 <sock_setsockopt>
            if (ret) {
   d6bc0:	b108      	cbz	r0, d6bc6 <_ZN3UDP13receivePacketEPhjm+0x66>
   d6bc2:	e013      	b.n	d6bec <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d6bc4:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d6bc6:	ab02      	add	r3, sp, #8
   d6bc8:	9301      	str	r3, [sp, #4]
   d6bca:	4621      	mov	r1, r4
   d6bcc:	4603      	mov	r3, r0
   d6bce:	9600      	str	r6, [sp, #0]
   d6bd0:	463a      	mov	r2, r7
   d6bd2:	6968      	ldr	r0, [r5, #20]
   d6bd4:	f7fe ffb6 	bl	d5b44 <sock_recvfrom>
        if (ret >= 0) {
   d6bd8:	1e04      	subs	r4, r0, #0
   d6bda:	db06      	blt.n	d6bea <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d6bdc:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d6be0:	f105 011c 	add.w	r1, r5, #28
   d6be4:	4630      	mov	r0, r6
   d6be6:	f7ff ff39 	bl	d6a5c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d6bea:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d6bec:	b00c      	add	sp, #48	; 0x30
   d6bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d6bf2 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d6bf2:	b538      	push	{r3, r4, r5, lr}
   d6bf4:	4605      	mov	r5, r0
   d6bf6:	4614      	mov	r4, r2
   d6bf8:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d6bfa:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d6bfc:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d6bfe:	d111      	bne.n	d6c24 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d6c00:	231c      	movs	r3, #28
   d6c02:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d6c04:	230a      	movs	r3, #10
   d6c06:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d6c08:	f7fe ff6c 	bl	d5ae4 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d6c0c:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d6c0e:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d6c12:	1d2b      	adds	r3, r5, #4
   d6c14:	3514      	adds	r5, #20
   d6c16:	f853 2b04 	ldr.w	r2, [r3], #4
   d6c1a:	f844 2b04 	str.w	r2, [r4], #4
   d6c1e:	42ab      	cmp	r3, r5
   d6c20:	d1f9      	bne.n	d6c16 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d6c22:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d6c24:	2b04      	cmp	r3, #4
   d6c26:	d10a      	bne.n	d6c3e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d6c28:	2310      	movs	r3, #16
   d6c2a:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d6c2c:	2302      	movs	r3, #2
   d6c2e:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d6c30:	f7fe ff58 	bl	d5ae4 <inet_htons>
   d6c34:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d6c36:	6868      	ldr	r0, [r5, #4]
   d6c38:	f7fe ff44 	bl	d5ac4 <inet_htonl>
   d6c3c:	6060      	str	r0, [r4, #4]
   d6c3e:	bd38      	pop	{r3, r4, r5, pc}

000d6c40 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d6c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6c44:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d6c46:	ac03      	add	r4, sp, #12
   d6c48:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d6c4a:	4699      	mov	r9, r3
   d6c4c:	4606      	mov	r6, r0
   d6c4e:	460f      	mov	r7, r1
   d6c50:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d6c52:	2100      	movs	r1, #0
   d6c54:	462a      	mov	r2, r5
   d6c56:	4620      	mov	r0, r4
   d6c58:	f002 fa77 	bl	d914a <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d6c5c:	4622      	mov	r2, r4
   d6c5e:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d6c62:	4648      	mov	r0, r9
   d6c64:	f7ff ffc5 	bl	d6bf2 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d6c68:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6c6c:	b143      	cbz	r3, d6c80 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d6c6e:	e88d 0030 	stmia.w	sp, {r4, r5}
   d6c72:	2300      	movs	r3, #0
   d6c74:	4642      	mov	r2, r8
   d6c76:	4639      	mov	r1, r7
   d6c78:	6970      	ldr	r0, [r6, #20]
   d6c7a:	f7fe ff6b 	bl	d5b54 <sock_sendto>
   d6c7e:	e001      	b.n	d6c84 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d6c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d6c84:	b00b      	add	sp, #44	; 0x2c
   d6c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6c8c <_ZN3UDPC1Ev>:
    return -1;
}

} // anonymous

UDP::UDP()
   d6c8c:	b538      	push	{r3, r4, r5, lr}
   d6c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6c92:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d6c94:	4b0b      	ldr	r3, [pc, #44]	; (d6cc4 <_ZN3UDPC1Ev+0x38>)
   d6c96:	f103 0208 	add.w	r2, r3, #8
   d6c9a:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6c9c:	2500      	movs	r5, #0
   d6c9e:	6103      	str	r3, [r0, #16]
   d6ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d6ca4:	4604      	mov	r4, r0
   d6ca6:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d6ca8:	6002      	str	r2, [r0, #0]
   d6caa:	6143      	str	r3, [r0, #20]
   d6cac:	301c      	adds	r0, #28
   d6cae:	f7ff f9c7 	bl	d6040 <_ZN9IPAddressC1Ev>
   d6cb2:	f44f 7300 	mov.w	r3, #512	; 0x200
   d6cb6:	86e5      	strh	r5, [r4, #54]	; 0x36
   d6cb8:	8725      	strh	r5, [r4, #56]	; 0x38
   d6cba:	63e5      	str	r5, [r4, #60]	; 0x3c
   d6cbc:	6423      	str	r3, [r4, #64]	; 0x40
   d6cbe:	6465      	str	r5, [r4, #68]	; 0x44
}
   d6cc0:	4620      	mov	r0, r4
   d6cc2:	bd38      	pop	{r3, r4, r5, pc}
   d6cc4:	000d9888 	.word	0x000d9888

000d6cc8 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d6cc8:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d6cca:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d6cce:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d6cd0:	b123      	cbz	r3, d6cdc <_ZN3UDP13releaseBufferEv+0x14>
   d6cd2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d6cd4:	b110      	cbz	r0, d6cdc <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d6cd6:	2101      	movs	r1, #1
   d6cd8:	f000 facf 	bl	d727a <_ZdlPvj>
    }
    _buffer = NULL;
   d6cdc:	2300      	movs	r3, #0
   d6cde:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d6ce0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d6ce4:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6ce6:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d6ce8:	8723      	strh	r3, [r4, #56]	; 0x38
   d6cea:	bd10      	pop	{r4, pc}

000d6cec <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d6cec:	b570      	push	{r4, r5, r6, lr}
   d6cee:	4604      	mov	r4, r0
   d6cf0:	4616      	mov	r6, r2
   d6cf2:	460d      	mov	r5, r1
    releaseBuffer();
   d6cf4:	f7ff ffe8 	bl	d6cc8 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d6cf8:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d6cfa:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d6cfc:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d6cfe:	b93e      	cbnz	r6, d6d10 <_ZN3UDP9setBufferEjPh+0x24>
   d6d00:	b135      	cbz	r5, d6d10 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d6d02:	4628      	mov	r0, r5
   d6d04:	f7fd f9c9 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d6d08:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d6d0a:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d6d0c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d6d10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6d12:	b103      	cbz	r3, d6d16 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d6d14:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d6d16:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d6d18:	3000      	adds	r0, #0
   d6d1a:	bf18      	it	ne
   d6d1c:	2001      	movne	r0, #1
   d6d1e:	bd70      	pop	{r4, r5, r6, pc}

000d6d20 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d6d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d22:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d6d24:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d6d26:	4605      	mov	r5, r0
   d6d28:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d6d2a:	b91a      	cbnz	r2, d6d34 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d6d2c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d6d2e:	b109      	cbz	r1, d6d34 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d6d30:	f7ff ffdc 	bl	d6cec <_ZN3UDP9setBufferEjPh>
   d6d34:	3404      	adds	r4, #4
   d6d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6d38:	f105 0620 	add.w	r6, r5, #32
   d6d3c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d6d3e:	6823      	ldr	r3, [r4, #0]
   d6d40:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6d42:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d6d44:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6d46:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d6d48:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d6d4a:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d6d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d4e <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d6d4e:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d6d50:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d6d52:	4604      	mov	r4, r0
   d6d54:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d6d56:	b91a      	cbnz	r2, d6d60 <_ZN3UDP11parsePacketEm+0x12>
   d6d58:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d6d5a:	b109      	cbz	r1, d6d60 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d6d5c:	f7ff ffc6 	bl	d6cec <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d6d60:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6d62:	2200      	movs	r2, #0
   d6d64:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d6d66:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d6d68:	b149      	cbz	r1, d6d7e <_ZN3UDP11parsePacketEm+0x30>
   d6d6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d6d6c:	b13a      	cbz	r2, d6d7e <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d6d6e:	6823      	ldr	r3, [r4, #0]
   d6d70:	4620      	mov	r0, r4
   d6d72:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d6d74:	4633      	mov	r3, r6
   d6d76:	47a8      	blx	r5
        if (result > 0) {
   d6d78:	2800      	cmp	r0, #0
            _total = result;
   d6d7a:	bfc8      	it	gt
   d6d7c:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d6d7e:	6823      	ldr	r3, [r4, #0]
   d6d80:	4620      	mov	r0, r4
   d6d82:	691b      	ldr	r3, [r3, #16]
}
   d6d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d6d88:	4718      	bx	r3

000d6d8a <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6d8a:	4770      	bx	lr

000d6d8c <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6d8c:	7441      	strb	r1, [r0, #17]
   d6d8e:	4770      	bx	lr

000d6d90 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6d90:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6d92:	7c00      	ldrb	r0, [r0, #16]
   d6d94:	f7fe ff36 	bl	d5c04 <HAL_USART_Available_Data_For_Write>
}
   d6d98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6d9c:	bd08      	pop	{r3, pc}

000d6d9e <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6d9e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6da0:	7c00      	ldrb	r0, [r0, #16]
   d6da2:	f7fe ff07 	bl	d5bb4 <HAL_USART_Available_Data>
}
   d6da6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6daa:	bd08      	pop	{r3, pc}

000d6dac <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6dac:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6dae:	7c00      	ldrb	r0, [r0, #16]
   d6db0:	f7fe ff10 	bl	d5bd4 <HAL_USART_Peek_Data>
}
   d6db4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6db8:	bf28      	it	cs
   d6dba:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6dbe:	bd08      	pop	{r3, pc}

000d6dc0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6dc0:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6dc2:	7c00      	ldrb	r0, [r0, #16]
   d6dc4:	f7fe fefe 	bl	d5bc4 <HAL_USART_Read_Data>
}
   d6dc8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6dcc:	bf28      	it	cs
   d6dce:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6dd2:	bd08      	pop	{r3, pc}

000d6dd4 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6dd4:	7c00      	ldrb	r0, [r0, #16]
   d6dd6:	f7fe bf05 	b.w	d5be4 <HAL_USART_Flush_Data>

000d6dda <_ZN11USARTSerialD0Ev>:
   d6dda:	b510      	push	{r4, lr}
   d6ddc:	2114      	movs	r1, #20
   d6dde:	4604      	mov	r4, r0
   d6de0:	f000 fa4b 	bl	d727a <_ZdlPvj>
   d6de4:	4620      	mov	r0, r4
   d6de6:	bd10      	pop	{r4, pc}

000d6de8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6de8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6dea:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6dec:	4604      	mov	r4, r0
   d6dee:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6df0:	b925      	cbnz	r5, d6dfc <_ZN11USARTSerial5writeEh+0x14>
   d6df2:	7c00      	ldrb	r0, [r0, #16]
   d6df4:	f7fe ff06 	bl	d5c04 <HAL_USART_Available_Data_For_Write>
   d6df8:	2800      	cmp	r0, #0
   d6dfa:	dd05      	ble.n	d6e08 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6dfc:	4631      	mov	r1, r6
   d6dfe:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6e00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6e04:	f7fe bece 	b.w	d5ba4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6e08:	4628      	mov	r0, r5
   d6e0a:	bd70      	pop	{r4, r5, r6, pc}

000d6e0c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6e0c:	b510      	push	{r4, lr}
   d6e0e:	4604      	mov	r4, r0
   d6e10:	4608      	mov	r0, r1
   d6e12:	4611      	mov	r1, r2
   d6e14:	2200      	movs	r2, #0
   d6e16:	6062      	str	r2, [r4, #4]
   d6e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6e1c:	60a2      	str	r2, [r4, #8]
   d6e1e:	4a05      	ldr	r2, [pc, #20]	; (d6e34 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6e20:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6e22:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6e24:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6e26:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6e28:	461a      	mov	r2, r3
   d6e2a:	f7fe feb3 	bl	d5b94 <HAL_USART_Init>
}
   d6e2e:	4620      	mov	r0, r4
   d6e30:	bd10      	pop	{r4, pc}
   d6e32:	bf00      	nop
   d6e34:	000d9900 	.word	0x000d9900

000d6e38 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6e38:	7c00      	ldrb	r0, [r0, #16]
   d6e3a:	f7fe bedb 	b.w	d5bf4 <HAL_USART_Is_Enabled>
	...

000d6e40 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6e40:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6e42:	4d0c      	ldr	r5, [pc, #48]	; (d6e74 <_Z22__fetch_global_Serial1v+0x34>)
   d6e44:	6829      	ldr	r1, [r5, #0]
   d6e46:	f011 0401 	ands.w	r4, r1, #1
   d6e4a:	d111      	bne.n	d6e70 <_Z22__fetch_global_Serial1v+0x30>
   d6e4c:	4628      	mov	r0, r5
   d6e4e:	f7fd f92a 	bl	d40a6 <__cxa_guard_acquire>
   d6e52:	b168      	cbz	r0, d6e70 <_Z22__fetch_global_Serial1v+0x30>
   d6e54:	4a08      	ldr	r2, [pc, #32]	; (d6e78 <_Z22__fetch_global_Serial1v+0x38>)
   d6e56:	4b09      	ldr	r3, [pc, #36]	; (d6e7c <_Z22__fetch_global_Serial1v+0x3c>)
   d6e58:	4809      	ldr	r0, [pc, #36]	; (d6e80 <_Z22__fetch_global_Serial1v+0x40>)
   d6e5a:	4621      	mov	r1, r4
   d6e5c:	f7ff ffd6 	bl	d6e0c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6e60:	4628      	mov	r0, r5
   d6e62:	f7fd f925 	bl	d40b0 <__cxa_guard_release>
   d6e66:	4a07      	ldr	r2, [pc, #28]	; (d6e84 <_Z22__fetch_global_Serial1v+0x44>)
   d6e68:	4907      	ldr	r1, [pc, #28]	; (d6e88 <_Z22__fetch_global_Serial1v+0x48>)
   d6e6a:	4805      	ldr	r0, [pc, #20]	; (d6e80 <_Z22__fetch_global_Serial1v+0x40>)
   d6e6c:	f000 fa00 	bl	d7270 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6e70:	4803      	ldr	r0, [pc, #12]	; (d6e80 <_Z22__fetch_global_Serial1v+0x40>)
   d6e72:	bd38      	pop	{r3, r4, r5, pc}
   d6e74:	2003e678 	.word	0x2003e678
   d6e78:	2003e67c 	.word	0x2003e67c
   d6e7c:	2003e5f4 	.word	0x2003e5f4
   d6e80:	2003e5e0 	.word	0x2003e5e0
   d6e84:	2003e2d8 	.word	0x2003e2d8
   d6e88:	000d6d8b 	.word	0x000d6d8b

000d6e8c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6e8c:	7441      	strb	r1, [r0, #17]
   d6e8e:	4770      	bx	lr

000d6e90 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6e90:	4770      	bx	lr

000d6e92 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6e92:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6e94:	2100      	movs	r1, #0
   d6e96:	7c00      	ldrb	r0, [r0, #16]
   d6e98:	f7fe fedc 	bl	d5c54 <HAL_USB_USART_Receive_Data>
}
   d6e9c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6ea0:	bf28      	it	cs
   d6ea2:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6ea6:	bd08      	pop	{r3, pc}

000d6ea8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6ea8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6eaa:	2101      	movs	r1, #1
   d6eac:	7c00      	ldrb	r0, [r0, #16]
   d6eae:	f7fe fed1 	bl	d5c54 <HAL_USB_USART_Receive_Data>
}
   d6eb2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6eb6:	bf28      	it	cs
   d6eb8:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6ebc:	bd08      	pop	{r3, pc}

000d6ebe <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6ebe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6ec0:	7c00      	ldrb	r0, [r0, #16]
   d6ec2:	f7fe febf 	bl	d5c44 <HAL_USB_USART_Available_Data_For_Write>
}
   d6ec6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6eca:	bd08      	pop	{r3, pc}

000d6ecc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6ecc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6ece:	7c00      	ldrb	r0, [r0, #16]
   d6ed0:	f7fe feb0 	bl	d5c34 <HAL_USB_USART_Available_Data>
}
   d6ed4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6ed8:	bd08      	pop	{r3, pc}

000d6eda <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6eda:	7c00      	ldrb	r0, [r0, #16]
   d6edc:	f7fe beca 	b.w	d5c74 <HAL_USB_USART_Flush_Data>

000d6ee0 <_ZN9USBSerialD0Ev>:
   d6ee0:	b510      	push	{r4, lr}
   d6ee2:	2114      	movs	r1, #20
   d6ee4:	4604      	mov	r4, r0
   d6ee6:	f000 f9c8 	bl	d727a <_ZdlPvj>
   d6eea:	4620      	mov	r0, r4
   d6eec:	bd10      	pop	{r4, pc}

000d6eee <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6eee:	b538      	push	{r3, r4, r5, lr}
   d6ef0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6ef2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6ef4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6ef6:	f7fe fea5 	bl	d5c44 <HAL_USB_USART_Available_Data_For_Write>
   d6efa:	2800      	cmp	r0, #0
   d6efc:	dc01      	bgt.n	d6f02 <_ZN9USBSerial5writeEh+0x14>
   d6efe:	7c60      	ldrb	r0, [r4, #17]
   d6f00:	b128      	cbz	r0, d6f0e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6f02:	4629      	mov	r1, r5
   d6f04:	7c20      	ldrb	r0, [r4, #16]
   d6f06:	f7fe fead 	bl	d5c64 <HAL_USB_USART_Send_Data>
   d6f0a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6f0e:	bd38      	pop	{r3, r4, r5, pc}

000d6f10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6f10:	b510      	push	{r4, lr}
   d6f12:	4604      	mov	r4, r0
   d6f14:	2300      	movs	r3, #0
   d6f16:	6063      	str	r3, [r4, #4]
   d6f18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6f1c:	60a3      	str	r3, [r4, #8]
   d6f1e:	4b05      	ldr	r3, [pc, #20]	; (d6f34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6f20:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6f22:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6f24:	4608      	mov	r0, r1
{
  _serial = serial;
   d6f26:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6f28:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6f2a:	4611      	mov	r1, r2
   d6f2c:	f7fe fe72 	bl	d5c14 <HAL_USB_USART_Init>
}
   d6f30:	4620      	mov	r0, r4
   d6f32:	bd10      	pop	{r4, pc}
   d6f34:	000d9930 	.word	0x000d9930

000d6f38 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6f38:	2200      	movs	r2, #0
   d6f3a:	7c00      	ldrb	r0, [r0, #16]
   d6f3c:	f7fe be72 	b.w	d5c24 <HAL_USB_USART_Begin>

000d6f40 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
   d6f40:	7c00      	ldrb	r0, [r0, #16]
   d6f42:	f7fe be9f 	b.w	d5c84 <HAL_USB_USART_Is_Enabled>

000d6f46 <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
   d6f46:	f7ff bffb 	b.w	d6f40 <_ZN9USBSerial9isEnabledEv>

000d6f4a <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6f4a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6f4c:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6f4e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6f50:	2100      	movs	r1, #0
   d6f52:	f002 f8fa 	bl	d914a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6f56:	4620      	mov	r0, r4
   d6f58:	bd10      	pop	{r4, pc}
	...

000d6f5c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6f5c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6f5e:	4d0e      	ldr	r5, [pc, #56]	; (d6f98 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6f60:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6f62:	a801      	add	r0, sp, #4
   d6f64:	f7ff fff1 	bl	d6f4a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6f68:	6829      	ldr	r1, [r5, #0]
   d6f6a:	f011 0401 	ands.w	r4, r1, #1
   d6f6e:	d110      	bne.n	d6f92 <_Z16_fetch_usbserialv+0x36>
   d6f70:	4628      	mov	r0, r5
   d6f72:	f7fd f898 	bl	d40a6 <__cxa_guard_acquire>
   d6f76:	b160      	cbz	r0, d6f92 <_Z16_fetch_usbserialv+0x36>
   d6f78:	aa01      	add	r2, sp, #4
   d6f7a:	4621      	mov	r1, r4
   d6f7c:	4807      	ldr	r0, [pc, #28]	; (d6f9c <_Z16_fetch_usbserialv+0x40>)
   d6f7e:	f7ff ffc7 	bl	d6f10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6f82:	4628      	mov	r0, r5
   d6f84:	f7fd f894 	bl	d40b0 <__cxa_guard_release>
   d6f88:	4a05      	ldr	r2, [pc, #20]	; (d6fa0 <_Z16_fetch_usbserialv+0x44>)
   d6f8a:	4906      	ldr	r1, [pc, #24]	; (d6fa4 <_Z16_fetch_usbserialv+0x48>)
   d6f8c:	4803      	ldr	r0, [pc, #12]	; (d6f9c <_Z16_fetch_usbserialv+0x40>)
   d6f8e:	f000 f96f 	bl	d7270 <__aeabi_atexit>
	return _usbserial;
}
   d6f92:	4802      	ldr	r0, [pc, #8]	; (d6f9c <_Z16_fetch_usbserialv+0x40>)
   d6f94:	b007      	add	sp, #28
   d6f96:	bd30      	pop	{r4, r5, pc}
   d6f98:	2003e700 	.word	0x2003e700
   d6f9c:	2003e704 	.word	0x2003e704
   d6fa0:	2003e2d8 	.word	0x2003e2d8
   d6fa4:	000d6e91 	.word	0x000d6e91

000d6fa8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6fa8:	2200      	movs	r2, #0
   d6faa:	4611      	mov	r1, r2
   d6fac:	6840      	ldr	r0, [r0, #4]
   d6fae:	f7fe bec5 	b.w	d5d3c <network_ready>

000d6fb2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6fb2:	2200      	movs	r2, #0
   d6fb4:	4611      	mov	r1, r2
   d6fb6:	6840      	ldr	r0, [r0, #4]
   d6fb8:	f7fe bee0 	b.w	d5d7c <network_listening>

000d6fbc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6fbc:	2200      	movs	r2, #0
   d6fbe:	4611      	mov	r1, r2
   d6fc0:	6840      	ldr	r0, [r0, #4]
   d6fc2:	f7fe beeb 	b.w	d5d9c <network_get_listen_timeout>

000d6fc6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6fc6:	2200      	movs	r2, #0
   d6fc8:	6840      	ldr	r0, [r0, #4]
   d6fca:	f7fe bedf 	b.w	d5d8c <network_set_listen_timeout>

000d6fce <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6fce:	2200      	movs	r2, #0
   d6fd0:	f081 0101 	eor.w	r1, r1, #1
   d6fd4:	6840      	ldr	r0, [r0, #4]
   d6fd6:	f7fe bec9 	b.w	d5d6c <network_listen>

000d6fda <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6fda:	2300      	movs	r3, #0
   d6fdc:	461a      	mov	r2, r3
   d6fde:	4619      	mov	r1, r3
   d6fe0:	6840      	ldr	r0, [r0, #4]
   d6fe2:	f7fe bebb 	b.w	d5d5c <network_off>

000d6fe6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6fe6:	2300      	movs	r3, #0
   d6fe8:	461a      	mov	r2, r3
   d6fea:	4619      	mov	r1, r3
   d6fec:	6840      	ldr	r0, [r0, #4]
   d6fee:	f7fe bead 	b.w	d5d4c <network_on>

000d6ff2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6ff2:	2200      	movs	r2, #0
   d6ff4:	4611      	mov	r1, r2
   d6ff6:	6840      	ldr	r0, [r0, #4]
   d6ff8:	f7fe be90 	b.w	d5d1c <network_connecting>

000d6ffc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6ffc:	2200      	movs	r2, #0
   d6ffe:	2102      	movs	r1, #2
   d7000:	6840      	ldr	r0, [r0, #4]
   d7002:	f7fe be93 	b.w	d5d2c <network_disconnect>

000d7006 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7006:	2300      	movs	r3, #0
   d7008:	461a      	mov	r2, r3
   d700a:	6840      	ldr	r0, [r0, #4]
   d700c:	f7fe be7e 	b.w	d5d0c <network_connect>

000d7010 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7010:	4b02      	ldr	r3, [pc, #8]	; (d701c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7012:	2204      	movs	r2, #4
   d7014:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7016:	4a02      	ldr	r2, [pc, #8]	; (d7020 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7018:	601a      	str	r2, [r3, #0]
   d701a:	4770      	bx	lr
   d701c:	2003e718 	.word	0x2003e718
   d7020:	000d9960 	.word	0x000d9960

000d7024 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7024:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7026:	4b0c      	ldr	r3, [pc, #48]	; (d7058 <serialEventRun+0x34>)
   d7028:	b133      	cbz	r3, d7038 <serialEventRun+0x14>
   d702a:	f7ff ff97 	bl	d6f5c <_Z16_fetch_usbserialv>
   d702e:	6803      	ldr	r3, [r0, #0]
   d7030:	691b      	ldr	r3, [r3, #16]
   d7032:	4798      	blx	r3
   d7034:	2800      	cmp	r0, #0
   d7036:	dc09      	bgt.n	d704c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7038:	4b08      	ldr	r3, [pc, #32]	; (d705c <serialEventRun+0x38>)
   d703a:	b163      	cbz	r3, d7056 <serialEventRun+0x32>
   d703c:	f7ff ff00 	bl	d6e40 <_Z22__fetch_global_Serial1v>
   d7040:	6803      	ldr	r3, [r0, #0]
   d7042:	691b      	ldr	r3, [r3, #16]
   d7044:	4798      	blx	r3
   d7046:	2800      	cmp	r0, #0
   d7048:	dc03      	bgt.n	d7052 <serialEventRun+0x2e>
   d704a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d704c:	f3af 8000 	nop.w
   d7050:	e7f2      	b.n	d7038 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7052:	f3af 8000 	nop.w
   d7056:	bd08      	pop	{r3, pc}
	...

000d7060 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7060:	b508      	push	{r3, lr}
	serialEventRun();
   d7062:	f7ff ffdf 	bl	d7024 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7066:	f7fe fc9d 	bl	d59a4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d706a:	4b01      	ldr	r3, [pc, #4]	; (d7070 <_post_loop+0x10>)
   d706c:	6018      	str	r0, [r3, #0]
   d706e:	bd08      	pop	{r3, pc}
   d7070:	2003e734 	.word	0x2003e734

000d7074 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7074:	4802      	ldr	r0, [pc, #8]	; (d7080 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7076:	4a03      	ldr	r2, [pc, #12]	; (d7084 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7078:	4903      	ldr	r1, [pc, #12]	; (d7088 <_Z33system_initialize_user_backup_ramv+0x14>)
   d707a:	1a12      	subs	r2, r2, r0
   d707c:	f002 b85a 	b.w	d9134 <memcpy>
   d7080:	2003f400 	.word	0x2003f400
   d7084:	2003f404 	.word	0x2003f404
   d7088:	000d9a50 	.word	0x000d9a50

000d708c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d708c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d708e:	2300      	movs	r3, #0
   d7090:	9300      	str	r3, [sp, #0]
   d7092:	461a      	mov	r2, r3
   d7094:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7098:	f7fe fe1e 	bl	d5cd8 <system_ctrl_set_result>
}
   d709c:	b003      	add	sp, #12
   d709e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d70a4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d70a4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d70a6:	8843      	ldrh	r3, [r0, #2]
   d70a8:	2b0a      	cmp	r3, #10
   d70aa:	d008      	beq.n	d70be <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d70ac:	2b50      	cmp	r3, #80	; 0x50
   d70ae:	d109      	bne.n	d70c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d70b0:	4b09      	ldr	r3, [pc, #36]	; (d70d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d70b2:	681b      	ldr	r3, [r3, #0]
   d70b4:	b13b      	cbz	r3, d70c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d70b6:	b003      	add	sp, #12
   d70b8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d70bc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d70be:	f7ff ffe5 	bl	d708c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d70c2:	e006      	b.n	d70d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d70c4:	2300      	movs	r3, #0
   d70c6:	9300      	str	r3, [sp, #0]
   d70c8:	461a      	mov	r2, r3
   d70ca:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d70ce:	f7fe fe03 	bl	d5cd8 <system_ctrl_set_result>
        break;
    }
}
   d70d2:	b003      	add	sp, #12
   d70d4:	f85d fb04 	ldr.w	pc, [sp], #4
   d70d8:	2003e720 	.word	0x2003e720

000d70dc <module_user_init_hook>:

void module_user_init_hook()
{
   d70dc:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d70de:	4c10      	ldr	r4, [pc, #64]	; (d7120 <module_user_init_hook+0x44>)
   d70e0:	4d10      	ldr	r5, [pc, #64]	; (d7124 <module_user_init_hook+0x48>)
   d70e2:	6823      	ldr	r3, [r4, #0]
   d70e4:	42ab      	cmp	r3, r5
   d70e6:	4b10      	ldr	r3, [pc, #64]	; (d7128 <module_user_init_hook+0x4c>)
   d70e8:	bf0c      	ite	eq
   d70ea:	2201      	moveq	r2, #1
   d70ec:	2200      	movne	r2, #0
   d70ee:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d70f0:	d002      	beq.n	d70f8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d70f2:	f7ff ffbf 	bl	d7074 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d70f6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d70f8:	f7fe fc4c 	bl	d5994 <HAL_RNG_GetRandomNumber>
   d70fc:	4604      	mov	r4, r0
    srand(seed);
   d70fe:	f002 f82d 	bl	d915c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7102:	4b0a      	ldr	r3, [pc, #40]	; (d712c <module_user_init_hook+0x50>)
   d7104:	b113      	cbz	r3, d710c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7106:	4620      	mov	r0, r4
   d7108:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d710c:	2100      	movs	r1, #0
   d710e:	4807      	ldr	r0, [pc, #28]	; (d712c <module_user_init_hook+0x50>)
   d7110:	f7fe fdec 	bl	d5cec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7114:	2100      	movs	r1, #0
   d7116:	4806      	ldr	r0, [pc, #24]	; (d7130 <module_user_init_hook+0x54>)
}
   d7118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d711c:	f7fe bdd2 	b.w	d5cc4 <system_ctrl_set_app_request_handler>
   d7120:	2003f400 	.word	0x2003f400
   d7124:	9a271c1e 	.word	0x9a271c1e
   d7128:	2003e724 	.word	0x2003e724
   d712c:	00000000 	.word	0x00000000
   d7130:	000d70a5 	.word	0x000d70a5

000d7134 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7134:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7136:	4e18      	ldr	r6, [pc, #96]	; (d7198 <pinAvailable+0x64>)
   d7138:	6831      	ldr	r1, [r6, #0]
   d713a:	f011 0501 	ands.w	r5, r1, #1
   d713e:	4604      	mov	r4, r0
   d7140:	d10a      	bne.n	d7158 <pinAvailable+0x24>
   d7142:	4630      	mov	r0, r6
   d7144:	f7fc ffaf 	bl	d40a6 <__cxa_guard_acquire>
   d7148:	b130      	cbz	r0, d7158 <pinAvailable+0x24>
   d714a:	4629      	mov	r1, r5
   d714c:	4813      	ldr	r0, [pc, #76]	; (d719c <pinAvailable+0x68>)
   d714e:	f7ff fa9f 	bl	d6690 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7152:	4630      	mov	r0, r6
   d7154:	f7fc ffac 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d7158:	4810      	ldr	r0, [pc, #64]	; (d719c <pinAvailable+0x68>)
   d715a:	f7ff faa3 	bl	d66a4 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d715e:	b128      	cbz	r0, d716c <pinAvailable+0x38>
   d7160:	f1a4 030b 	sub.w	r3, r4, #11
   d7164:	2b02      	cmp	r3, #2
   d7166:	d801      	bhi.n	d716c <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d7168:	2000      	movs	r0, #0
   d716a:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d716c:	f000 f85a 	bl	d7224 <_Z19__fetch_global_Wirev>
   d7170:	f7fe ff2f 	bl	d5fd2 <_ZN7TwoWire9isEnabledEv>
   d7174:	b108      	cbz	r0, d717a <pinAvailable+0x46>
   d7176:	2c01      	cmp	r4, #1
   d7178:	d9f6      	bls.n	d7168 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d717a:	f7ff fe61 	bl	d6e40 <_Z22__fetch_global_Serial1v>
   d717e:	f7ff fe5b 	bl	d6e38 <_ZN11USARTSerial9isEnabledEv>
   d7182:	b118      	cbz	r0, d718c <pinAvailable+0x58>
   d7184:	f1a4 0309 	sub.w	r3, r4, #9
   d7188:	2b01      	cmp	r3, #1
   d718a:	d9ed      	bls.n	d7168 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d718c:	2c23      	cmp	r4, #35	; 0x23
   d718e:	bf8c      	ite	hi
   d7190:	2000      	movhi	r0, #0
   d7192:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d7194:	bd70      	pop	{r4, r5, r6, pc}
   d7196:	bf00      	nop
   d7198:	2003e728 	.word	0x2003e728
   d719c:	2003e72c 	.word	0x2003e72c

000d71a0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d71a0:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d71a2:	b538      	push	{r3, r4, r5, lr}
   d71a4:	4604      	mov	r4, r0
   d71a6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d71a8:	d80a      	bhi.n	d71c0 <pinMode+0x20>
   d71aa:	29ff      	cmp	r1, #255	; 0xff
   d71ac:	d008      	beq.n	d71c0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d71ae:	f7ff ffc1 	bl	d7134 <pinAvailable>
   d71b2:	b128      	cbz	r0, d71c0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d71b4:	4629      	mov	r1, r5
   d71b6:	4620      	mov	r0, r4
}
   d71b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d71bc:	f7fe bc0a 	b.w	d59d4 <HAL_Pin_Mode>
   d71c0:	bd38      	pop	{r3, r4, r5, pc}

000d71c2 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d71c2:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d71c4:	b510      	push	{r4, lr}
   d71c6:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d71c8:	bf9c      	itt	ls
   d71ca:	340e      	addls	r4, #14
   d71cc:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d71ce:	4620      	mov	r0, r4
   d71d0:	f7ff ffb0 	bl	d7134 <pinAvailable>
   d71d4:	b150      	cbz	r0, d71ec <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d71d6:	2103      	movs	r1, #3
   d71d8:	4620      	mov	r0, r4
   d71da:	f7fe fbf3 	bl	d59c4 <HAL_Validate_Pin_Function>
   d71de:	2803      	cmp	r0, #3
   d71e0:	d104      	bne.n	d71ec <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d71e2:	4620      	mov	r0, r4
}
   d71e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d71e8:	f7fe bbfc 	b.w	d59e4 <HAL_ADC_Read>
}
   d71ec:	2000      	movs	r0, #0
   d71ee:	bd10      	pop	{r4, pc}

000d71f0 <_Z17acquireWireBufferv>:
   d71f0:	b570      	push	{r4, r5, r6, lr}
   d71f2:	4604      	mov	r4, r0
   d71f4:	2514      	movs	r5, #20
   d71f6:	462a      	mov	r2, r5
   d71f8:	4e09      	ldr	r6, [pc, #36]	; (d7220 <_Z17acquireWireBufferv+0x30>)
   d71fa:	2100      	movs	r1, #0
   d71fc:	f001 ffa5 	bl	d914a <memset>
   d7200:	8025      	strh	r5, [r4, #0]
   d7202:	2520      	movs	r5, #32
   d7204:	4631      	mov	r1, r6
   d7206:	60a5      	str	r5, [r4, #8]
   d7208:	6125      	str	r5, [r4, #16]
   d720a:	4628      	mov	r0, r5
   d720c:	f000 f84f 	bl	d72ae <_ZnajRKSt9nothrow_t>
   d7210:	4631      	mov	r1, r6
   d7212:	6060      	str	r0, [r4, #4]
   d7214:	4628      	mov	r0, r5
   d7216:	f000 f84a 	bl	d72ae <_ZnajRKSt9nothrow_t>
   d721a:	60e0      	str	r0, [r4, #12]
   d721c:	4620      	mov	r0, r4
   d721e:	bd70      	pop	{r4, r5, r6, pc}
   d7220:	000d998c 	.word	0x000d998c

000d7224 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7224:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7226:	4d0e      	ldr	r5, [pc, #56]	; (d7260 <_Z19__fetch_global_Wirev+0x3c>)
   d7228:	6829      	ldr	r1, [r5, #0]
   d722a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d722e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7230:	d113      	bne.n	d725a <_Z19__fetch_global_Wirev+0x36>
   d7232:	4628      	mov	r0, r5
   d7234:	f7fc ff37 	bl	d40a6 <__cxa_guard_acquire>
   d7238:	b178      	cbz	r0, d725a <_Z19__fetch_global_Wirev+0x36>
   d723a:	a801      	add	r0, sp, #4
   d723c:	f7ff ffd8 	bl	d71f0 <_Z17acquireWireBufferv>
   d7240:	aa01      	add	r2, sp, #4
   d7242:	4621      	mov	r1, r4
   d7244:	4807      	ldr	r0, [pc, #28]	; (d7264 <_Z19__fetch_global_Wirev+0x40>)
   d7246:	f7fe fe6d 	bl	d5f24 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d724a:	4628      	mov	r0, r5
   d724c:	f7fc ff30 	bl	d40b0 <__cxa_guard_release>
   d7250:	4a05      	ldr	r2, [pc, #20]	; (d7268 <_Z19__fetch_global_Wirev+0x44>)
   d7252:	4906      	ldr	r1, [pc, #24]	; (d726c <_Z19__fetch_global_Wirev+0x48>)
   d7254:	4803      	ldr	r0, [pc, #12]	; (d7264 <_Z19__fetch_global_Wirev+0x40>)
   d7256:	f000 f80b 	bl	d7270 <__aeabi_atexit>
	return wire;
}
   d725a:	4802      	ldr	r0, [pc, #8]	; (d7264 <_Z19__fetch_global_Wirev+0x40>)
   d725c:	b007      	add	sp, #28
   d725e:	bd30      	pop	{r4, r5, pc}
   d7260:	2003e738 	.word	0x2003e738
   d7264:	2003e73c 	.word	0x2003e73c
   d7268:	2003e2d8 	.word	0x2003e2d8
   d726c:	000d5ecd 	.word	0x000d5ecd

000d7270 <__aeabi_atexit>:
   d7270:	460b      	mov	r3, r1
   d7272:	4601      	mov	r1, r0
   d7274:	4618      	mov	r0, r3
   d7276:	f001 bf4f 	b.w	d9118 <__cxa_atexit>

000d727a <_ZdlPvj>:
   d727a:	f7fc bf10 	b.w	d409e <_ZdlPv>
	...

000d7280 <_ZSt15get_new_handlerv>:
   d7280:	4b02      	ldr	r3, [pc, #8]	; (d728c <_ZSt15get_new_handlerv+0xc>)
   d7282:	6818      	ldr	r0, [r3, #0]
   d7284:	f3bf 8f5f 	dmb	sy
   d7288:	4770      	bx	lr
   d728a:	bf00      	nop
   d728c:	2003e750 	.word	0x2003e750

000d7290 <_ZnwjRKSt9nothrow_t>:
   d7290:	b510      	push	{r4, lr}
   d7292:	2800      	cmp	r0, #0
   d7294:	bf14      	ite	ne
   d7296:	4604      	movne	r4, r0
   d7298:	2401      	moveq	r4, #1
   d729a:	4620      	mov	r0, r4
   d729c:	f7fe fd86 	bl	d5dac <malloc>
   d72a0:	b920      	cbnz	r0, d72ac <_ZnwjRKSt9nothrow_t+0x1c>
   d72a2:	f7ff ffed 	bl	d7280 <_ZSt15get_new_handlerv>
   d72a6:	b108      	cbz	r0, d72ac <_ZnwjRKSt9nothrow_t+0x1c>
   d72a8:	4780      	blx	r0
   d72aa:	e7f6      	b.n	d729a <_ZnwjRKSt9nothrow_t+0xa>
   d72ac:	bd10      	pop	{r4, pc}

000d72ae <_ZnajRKSt9nothrow_t>:
   d72ae:	f7ff bfef 	b.w	d7290 <_ZnwjRKSt9nothrow_t>
	...

000d72b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d72b4:	4b24      	ldr	r3, [pc, #144]	; (d7348 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d72b6:	681a      	ldr	r2, [r3, #0]
   d72b8:	07d0      	lsls	r0, r2, #31
   d72ba:	bf5c      	itt	pl
   d72bc:	2201      	movpl	r2, #1
   d72be:	601a      	strpl	r2, [r3, #0]
   d72c0:	4b22      	ldr	r3, [pc, #136]	; (d734c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d72c2:	681a      	ldr	r2, [r3, #0]
   d72c4:	07d1      	lsls	r1, r2, #31
   d72c6:	bf5c      	itt	pl
   d72c8:	2201      	movpl	r2, #1
   d72ca:	601a      	strpl	r2, [r3, #0]
   d72cc:	4b20      	ldr	r3, [pc, #128]	; (d7350 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d72ce:	681a      	ldr	r2, [r3, #0]
   d72d0:	07d2      	lsls	r2, r2, #31
   d72d2:	bf5c      	itt	pl
   d72d4:	2201      	movpl	r2, #1
   d72d6:	601a      	strpl	r2, [r3, #0]
   d72d8:	4b1e      	ldr	r3, [pc, #120]	; (d7354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d72da:	681a      	ldr	r2, [r3, #0]
   d72dc:	07d0      	lsls	r0, r2, #31
   d72de:	bf5c      	itt	pl
   d72e0:	2201      	movpl	r2, #1
   d72e2:	601a      	strpl	r2, [r3, #0]
   d72e4:	4b1c      	ldr	r3, [pc, #112]	; (d7358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d72e6:	681a      	ldr	r2, [r3, #0]
   d72e8:	07d1      	lsls	r1, r2, #31
   d72ea:	bf5c      	itt	pl
   d72ec:	2201      	movpl	r2, #1
   d72ee:	601a      	strpl	r2, [r3, #0]
   d72f0:	4b1a      	ldr	r3, [pc, #104]	; (d735c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d72f2:	681a      	ldr	r2, [r3, #0]
   d72f4:	07d2      	lsls	r2, r2, #31
   d72f6:	bf5c      	itt	pl
   d72f8:	2201      	movpl	r2, #1
   d72fa:	601a      	strpl	r2, [r3, #0]
   d72fc:	4b18      	ldr	r3, [pc, #96]	; (d7360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d72fe:	681a      	ldr	r2, [r3, #0]
   d7300:	07d0      	lsls	r0, r2, #31
   d7302:	bf5c      	itt	pl
   d7304:	2201      	movpl	r2, #1
   d7306:	601a      	strpl	r2, [r3, #0]
   d7308:	4b16      	ldr	r3, [pc, #88]	; (d7364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d730a:	681a      	ldr	r2, [r3, #0]
   d730c:	07d1      	lsls	r1, r2, #31
   d730e:	bf5c      	itt	pl
   d7310:	2201      	movpl	r2, #1
   d7312:	601a      	strpl	r2, [r3, #0]
   d7314:	4b14      	ldr	r3, [pc, #80]	; (d7368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7316:	681a      	ldr	r2, [r3, #0]
   d7318:	07d2      	lsls	r2, r2, #31
   d731a:	bf5c      	itt	pl
   d731c:	2201      	movpl	r2, #1
   d731e:	601a      	strpl	r2, [r3, #0]
   d7320:	4b12      	ldr	r3, [pc, #72]	; (d736c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7322:	681a      	ldr	r2, [r3, #0]
   d7324:	07d0      	lsls	r0, r2, #31
   d7326:	bf5c      	itt	pl
   d7328:	2201      	movpl	r2, #1
   d732a:	601a      	strpl	r2, [r3, #0]
   d732c:	4b10      	ldr	r3, [pc, #64]	; (d7370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d732e:	681a      	ldr	r2, [r3, #0]
   d7330:	07d1      	lsls	r1, r2, #31
   d7332:	bf5c      	itt	pl
   d7334:	2201      	movpl	r2, #1
   d7336:	601a      	strpl	r2, [r3, #0]
   d7338:	4b0e      	ldr	r3, [pc, #56]	; (d7374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d733a:	681a      	ldr	r2, [r3, #0]
   d733c:	07d2      	lsls	r2, r2, #31
   d733e:	bf5c      	itt	pl
   d7340:	2201      	movpl	r2, #1
   d7342:	601a      	strpl	r2, [r3, #0]
   d7344:	4770      	bx	lr
   d7346:	bf00      	nop
   d7348:	2003e780 	.word	0x2003e780
   d734c:	2003e77c 	.word	0x2003e77c
   d7350:	2003e778 	.word	0x2003e778
   d7354:	2003e774 	.word	0x2003e774
   d7358:	2003e770 	.word	0x2003e770
   d735c:	2003e76c 	.word	0x2003e76c
   d7360:	2003e768 	.word	0x2003e768
   d7364:	2003e764 	.word	0x2003e764
   d7368:	2003e760 	.word	0x2003e760
   d736c:	2003e75c 	.word	0x2003e75c
   d7370:	2003e758 	.word	0x2003e758
   d7374:	2003e754 	.word	0x2003e754

000d7378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7378:	4b18      	ldr	r3, [pc, #96]	; (d73dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d737a:	681a      	ldr	r2, [r3, #0]
   d737c:	07d1      	lsls	r1, r2, #31
   d737e:	bf5c      	itt	pl
   d7380:	2201      	movpl	r2, #1
   d7382:	601a      	strpl	r2, [r3, #0]
   d7384:	4b16      	ldr	r3, [pc, #88]	; (d73e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7386:	681a      	ldr	r2, [r3, #0]
   d7388:	07d2      	lsls	r2, r2, #31
   d738a:	bf5c      	itt	pl
   d738c:	2201      	movpl	r2, #1
   d738e:	601a      	strpl	r2, [r3, #0]
   d7390:	4b14      	ldr	r3, [pc, #80]	; (d73e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7392:	681a      	ldr	r2, [r3, #0]
   d7394:	07d0      	lsls	r0, r2, #31
   d7396:	bf5c      	itt	pl
   d7398:	2201      	movpl	r2, #1
   d739a:	601a      	strpl	r2, [r3, #0]
   d739c:	4b12      	ldr	r3, [pc, #72]	; (d73e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d739e:	681a      	ldr	r2, [r3, #0]
   d73a0:	07d1      	lsls	r1, r2, #31
   d73a2:	bf5c      	itt	pl
   d73a4:	2201      	movpl	r2, #1
   d73a6:	601a      	strpl	r2, [r3, #0]
   d73a8:	4b10      	ldr	r3, [pc, #64]	; (d73ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d73aa:	681a      	ldr	r2, [r3, #0]
   d73ac:	07d2      	lsls	r2, r2, #31
   d73ae:	bf5c      	itt	pl
   d73b0:	2201      	movpl	r2, #1
   d73b2:	601a      	strpl	r2, [r3, #0]
   d73b4:	4b0e      	ldr	r3, [pc, #56]	; (d73f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d73b6:	681a      	ldr	r2, [r3, #0]
   d73b8:	07d0      	lsls	r0, r2, #31
   d73ba:	bf5c      	itt	pl
   d73bc:	2201      	movpl	r2, #1
   d73be:	601a      	strpl	r2, [r3, #0]
   d73c0:	4b0c      	ldr	r3, [pc, #48]	; (d73f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d73c2:	681a      	ldr	r2, [r3, #0]
   d73c4:	07d1      	lsls	r1, r2, #31
   d73c6:	bf5c      	itt	pl
   d73c8:	2201      	movpl	r2, #1
   d73ca:	601a      	strpl	r2, [r3, #0]
   d73cc:	4b0a      	ldr	r3, [pc, #40]	; (d73f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d73ce:	681a      	ldr	r2, [r3, #0]
   d73d0:	07d2      	lsls	r2, r2, #31
   d73d2:	bf5c      	itt	pl
   d73d4:	2201      	movpl	r2, #1
   d73d6:	601a      	strpl	r2, [r3, #0]
   d73d8:	4770      	bx	lr
   d73da:	bf00      	nop
   d73dc:	2003e7a0 	.word	0x2003e7a0
   d73e0:	2003e79c 	.word	0x2003e79c
   d73e4:	2003e798 	.word	0x2003e798
   d73e8:	2003e794 	.word	0x2003e794
   d73ec:	2003e790 	.word	0x2003e790
   d73f0:	2003e78c 	.word	0x2003e78c
   d73f4:	2003e788 	.word	0x2003e788
   d73f8:	2003e784 	.word	0x2003e784

000d73fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d73fc:	4b18      	ldr	r3, [pc, #96]	; (d7460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d73fe:	681a      	ldr	r2, [r3, #0]
   d7400:	07d1      	lsls	r1, r2, #31
   d7402:	bf5c      	itt	pl
   d7404:	2201      	movpl	r2, #1
   d7406:	601a      	strpl	r2, [r3, #0]
   d7408:	4b16      	ldr	r3, [pc, #88]	; (d7464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d740a:	681a      	ldr	r2, [r3, #0]
   d740c:	07d2      	lsls	r2, r2, #31
   d740e:	bf5c      	itt	pl
   d7410:	2201      	movpl	r2, #1
   d7412:	601a      	strpl	r2, [r3, #0]
   d7414:	4b14      	ldr	r3, [pc, #80]	; (d7468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7416:	681a      	ldr	r2, [r3, #0]
   d7418:	07d0      	lsls	r0, r2, #31
   d741a:	bf5c      	itt	pl
   d741c:	2201      	movpl	r2, #1
   d741e:	601a      	strpl	r2, [r3, #0]
   d7420:	4b12      	ldr	r3, [pc, #72]	; (d746c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7422:	681a      	ldr	r2, [r3, #0]
   d7424:	07d1      	lsls	r1, r2, #31
   d7426:	bf5c      	itt	pl
   d7428:	2201      	movpl	r2, #1
   d742a:	601a      	strpl	r2, [r3, #0]
   d742c:	4b10      	ldr	r3, [pc, #64]	; (d7470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d742e:	681a      	ldr	r2, [r3, #0]
   d7430:	07d2      	lsls	r2, r2, #31
   d7432:	bf5c      	itt	pl
   d7434:	2201      	movpl	r2, #1
   d7436:	601a      	strpl	r2, [r3, #0]
   d7438:	4b0e      	ldr	r3, [pc, #56]	; (d7474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d743a:	681a      	ldr	r2, [r3, #0]
   d743c:	07d0      	lsls	r0, r2, #31
   d743e:	bf5c      	itt	pl
   d7440:	2201      	movpl	r2, #1
   d7442:	601a      	strpl	r2, [r3, #0]
   d7444:	4b0c      	ldr	r3, [pc, #48]	; (d7478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7446:	681a      	ldr	r2, [r3, #0]
   d7448:	07d1      	lsls	r1, r2, #31
   d744a:	bf5c      	itt	pl
   d744c:	2201      	movpl	r2, #1
   d744e:	601a      	strpl	r2, [r3, #0]
   d7450:	4b0a      	ldr	r3, [pc, #40]	; (d747c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7452:	681a      	ldr	r2, [r3, #0]
   d7454:	07d2      	lsls	r2, r2, #31
   d7456:	bf5c      	itt	pl
   d7458:	2201      	movpl	r2, #1
   d745a:	601a      	strpl	r2, [r3, #0]
   d745c:	4770      	bx	lr
   d745e:	bf00      	nop
   d7460:	2003e7c0 	.word	0x2003e7c0
   d7464:	2003e7bc 	.word	0x2003e7bc
   d7468:	2003e7b8 	.word	0x2003e7b8
   d746c:	2003e7b4 	.word	0x2003e7b4
   d7470:	2003e7b0 	.word	0x2003e7b0
   d7474:	2003e7ac 	.word	0x2003e7ac
   d7478:	2003e7a8 	.word	0x2003e7a8
   d747c:	2003e7a4 	.word	0x2003e7a4

000d7480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7480:	4b24      	ldr	r3, [pc, #144]	; (d7514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7482:	681a      	ldr	r2, [r3, #0]
   d7484:	07d0      	lsls	r0, r2, #31
   d7486:	bf5c      	itt	pl
   d7488:	2201      	movpl	r2, #1
   d748a:	601a      	strpl	r2, [r3, #0]
   d748c:	4b22      	ldr	r3, [pc, #136]	; (d7518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d748e:	681a      	ldr	r2, [r3, #0]
   d7490:	07d1      	lsls	r1, r2, #31
   d7492:	bf5c      	itt	pl
   d7494:	2201      	movpl	r2, #1
   d7496:	601a      	strpl	r2, [r3, #0]
   d7498:	4b20      	ldr	r3, [pc, #128]	; (d751c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d749a:	681a      	ldr	r2, [r3, #0]
   d749c:	07d2      	lsls	r2, r2, #31
   d749e:	bf5c      	itt	pl
   d74a0:	2201      	movpl	r2, #1
   d74a2:	601a      	strpl	r2, [r3, #0]
   d74a4:	4b1e      	ldr	r3, [pc, #120]	; (d7520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d74a6:	681a      	ldr	r2, [r3, #0]
   d74a8:	07d0      	lsls	r0, r2, #31
   d74aa:	bf5c      	itt	pl
   d74ac:	2201      	movpl	r2, #1
   d74ae:	601a      	strpl	r2, [r3, #0]
   d74b0:	4b1c      	ldr	r3, [pc, #112]	; (d7524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d74b2:	681a      	ldr	r2, [r3, #0]
   d74b4:	07d1      	lsls	r1, r2, #31
   d74b6:	bf5c      	itt	pl
   d74b8:	2201      	movpl	r2, #1
   d74ba:	601a      	strpl	r2, [r3, #0]
   d74bc:	4b1a      	ldr	r3, [pc, #104]	; (d7528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d74be:	681a      	ldr	r2, [r3, #0]
   d74c0:	07d2      	lsls	r2, r2, #31
   d74c2:	bf5c      	itt	pl
   d74c4:	2201      	movpl	r2, #1
   d74c6:	601a      	strpl	r2, [r3, #0]
   d74c8:	4b18      	ldr	r3, [pc, #96]	; (d752c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d74ca:	681a      	ldr	r2, [r3, #0]
   d74cc:	07d0      	lsls	r0, r2, #31
   d74ce:	bf5c      	itt	pl
   d74d0:	2201      	movpl	r2, #1
   d74d2:	601a      	strpl	r2, [r3, #0]
   d74d4:	4b16      	ldr	r3, [pc, #88]	; (d7530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d74d6:	681a      	ldr	r2, [r3, #0]
   d74d8:	07d1      	lsls	r1, r2, #31
   d74da:	bf5c      	itt	pl
   d74dc:	2201      	movpl	r2, #1
   d74de:	601a      	strpl	r2, [r3, #0]
   d74e0:	4b14      	ldr	r3, [pc, #80]	; (d7534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d74e2:	681a      	ldr	r2, [r3, #0]
   d74e4:	07d2      	lsls	r2, r2, #31
   d74e6:	bf5c      	itt	pl
   d74e8:	2201      	movpl	r2, #1
   d74ea:	601a      	strpl	r2, [r3, #0]
   d74ec:	4b12      	ldr	r3, [pc, #72]	; (d7538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d74ee:	681a      	ldr	r2, [r3, #0]
   d74f0:	07d0      	lsls	r0, r2, #31
   d74f2:	bf5c      	itt	pl
   d74f4:	2201      	movpl	r2, #1
   d74f6:	601a      	strpl	r2, [r3, #0]
   d74f8:	4b10      	ldr	r3, [pc, #64]	; (d753c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d74fa:	681a      	ldr	r2, [r3, #0]
   d74fc:	07d1      	lsls	r1, r2, #31
   d74fe:	bf5c      	itt	pl
   d7500:	2201      	movpl	r2, #1
   d7502:	601a      	strpl	r2, [r3, #0]
   d7504:	4b0e      	ldr	r3, [pc, #56]	; (d7540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7506:	681a      	ldr	r2, [r3, #0]
   d7508:	07d2      	lsls	r2, r2, #31
   d750a:	bf5c      	itt	pl
   d750c:	2201      	movpl	r2, #1
   d750e:	601a      	strpl	r2, [r3, #0]
   d7510:	4770      	bx	lr
   d7512:	bf00      	nop
   d7514:	2003e7f0 	.word	0x2003e7f0
   d7518:	2003e7ec 	.word	0x2003e7ec
   d751c:	2003e7e8 	.word	0x2003e7e8
   d7520:	2003e7e4 	.word	0x2003e7e4
   d7524:	2003e7e0 	.word	0x2003e7e0
   d7528:	2003e7dc 	.word	0x2003e7dc
   d752c:	2003e7d8 	.word	0x2003e7d8
   d7530:	2003e7d4 	.word	0x2003e7d4
   d7534:	2003e7d0 	.word	0x2003e7d0
   d7538:	2003e7cc 	.word	0x2003e7cc
   d753c:	2003e7c8 	.word	0x2003e7c8
   d7540:	2003e7c4 	.word	0x2003e7c4
   d7544:	00000000 	.word	0x00000000

000d7548 <pow>:
   d7548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d754c:	ed2d 8b02 	vpush	{d8}
   d7550:	f8df a324 	ldr.w	sl, [pc, #804]	; d7878 <pow+0x330>
   d7554:	b08b      	sub	sp, #44	; 0x2c
   d7556:	ec57 6b10 	vmov	r6, r7, d0
   d755a:	ec55 4b11 	vmov	r4, r5, d1
   d755e:	f000 f98f 	bl	d7880 <__ieee754_pow>
   d7562:	f99a 8000 	ldrsb.w	r8, [sl]
   d7566:	eeb0 8a40 	vmov.f32	s16, s0
   d756a:	eef0 8a60 	vmov.f32	s17, s1
   d756e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   d7572:	d048      	beq.n	d7606 <pow+0xbe>
   d7574:	4622      	mov	r2, r4
   d7576:	462b      	mov	r3, r5
   d7578:	4620      	mov	r0, r4
   d757a:	4629      	mov	r1, r5
   d757c:	f001 fd6e 	bl	d905c <__aeabi_dcmpun>
   d7580:	4683      	mov	fp, r0
   d7582:	2800      	cmp	r0, #0
   d7584:	d13f      	bne.n	d7606 <pow+0xbe>
   d7586:	4632      	mov	r2, r6
   d7588:	463b      	mov	r3, r7
   d758a:	4630      	mov	r0, r6
   d758c:	4639      	mov	r1, r7
   d758e:	f001 fd65 	bl	d905c <__aeabi_dcmpun>
   d7592:	4681      	mov	r9, r0
   d7594:	2800      	cmp	r0, #0
   d7596:	f040 8090 	bne.w	d76ba <pow+0x172>
   d759a:	4630      	mov	r0, r6
   d759c:	4639      	mov	r1, r7
   d759e:	2200      	movs	r2, #0
   d75a0:	2300      	movs	r3, #0
   d75a2:	f001 fd29 	bl	d8ff8 <__aeabi_dcmpeq>
   d75a6:	2800      	cmp	r0, #0
   d75a8:	d036      	beq.n	d7618 <pow+0xd0>
   d75aa:	2200      	movs	r2, #0
   d75ac:	2300      	movs	r3, #0
   d75ae:	4620      	mov	r0, r4
   d75b0:	4629      	mov	r1, r5
   d75b2:	f001 fd21 	bl	d8ff8 <__aeabi_dcmpeq>
   d75b6:	4683      	mov	fp, r0
   d75b8:	b1b8      	cbz	r0, d75ea <pow+0xa2>
   d75ba:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d7850 <pow+0x308>
   d75be:	2201      	movs	r2, #1
   d75c0:	4ba9      	ldr	r3, [pc, #676]	; (d7868 <pow+0x320>)
   d75c2:	f8cd 9020 	str.w	r9, [sp, #32]
   d75c6:	9200      	str	r2, [sp, #0]
   d75c8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d75cc:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d75d0:	ed8d 7b06 	vstr	d7, [sp, #24]
   d75d4:	9301      	str	r3, [sp, #4]
   d75d6:	f1b8 0f00 	cmp.w	r8, #0
   d75da:	d05b      	beq.n	d7694 <pow+0x14c>
   d75dc:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d7858 <pow+0x310>
   d75e0:	b00b      	add	sp, #44	; 0x2c
   d75e2:	ecbd 8b02 	vpop	{d8}
   d75e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d75ea:	ec45 4b10 	vmov	d0, r4, r5
   d75ee:	f000 ffa7 	bl	d8540 <finite>
   d75f2:	b140      	cbz	r0, d7606 <pow+0xbe>
   d75f4:	2200      	movs	r2, #0
   d75f6:	2300      	movs	r3, #0
   d75f8:	4620      	mov	r0, r4
   d75fa:	4629      	mov	r1, r5
   d75fc:	f001 fd06 	bl	d900c <__aeabi_dcmplt>
   d7600:	2800      	cmp	r0, #0
   d7602:	f040 80c5 	bne.w	d7790 <pow+0x248>
   d7606:	eeb0 0a48 	vmov.f32	s0, s16
   d760a:	eef0 0a68 	vmov.f32	s1, s17
   d760e:	b00b      	add	sp, #44	; 0x2c
   d7610:	ecbd 8b02 	vpop	{d8}
   d7614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7618:	eeb0 0a48 	vmov.f32	s0, s16
   d761c:	eef0 0a68 	vmov.f32	s1, s17
   d7620:	f000 ff8e 	bl	d8540 <finite>
   d7624:	4680      	mov	r8, r0
   d7626:	2800      	cmp	r0, #0
   d7628:	d061      	beq.n	d76ee <pow+0x1a6>
   d762a:	f04f 0800 	mov.w	r8, #0
   d762e:	f04f 0900 	mov.w	r9, #0
   d7632:	ec51 0b18 	vmov	r0, r1, d8
   d7636:	4642      	mov	r2, r8
   d7638:	464b      	mov	r3, r9
   d763a:	f001 fcdd 	bl	d8ff8 <__aeabi_dcmpeq>
   d763e:	2800      	cmp	r0, #0
   d7640:	d0e1      	beq.n	d7606 <pow+0xbe>
   d7642:	ec47 6b10 	vmov	d0, r6, r7
   d7646:	f000 ff7b 	bl	d8540 <finite>
   d764a:	2800      	cmp	r0, #0
   d764c:	d0db      	beq.n	d7606 <pow+0xbe>
   d764e:	ec45 4b10 	vmov	d0, r4, r5
   d7652:	f000 ff75 	bl	d8540 <finite>
   d7656:	2800      	cmp	r0, #0
   d7658:	d0d5      	beq.n	d7606 <pow+0xbe>
   d765a:	f99a 3000 	ldrsb.w	r3, [sl]
   d765e:	4a82      	ldr	r2, [pc, #520]	; (d7868 <pow+0x320>)
   d7660:	9201      	str	r2, [sp, #4]
   d7662:	2104      	movs	r1, #4
   d7664:	2200      	movs	r2, #0
   d7666:	2b02      	cmp	r3, #2
   d7668:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d766c:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7670:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d7674:	9100      	str	r1, [sp, #0]
   d7676:	9208      	str	r2, [sp, #32]
   d7678:	d003      	beq.n	d7682 <pow+0x13a>
   d767a:	4668      	mov	r0, sp
   d767c:	f000 ff68 	bl	d8550 <matherr>
   d7680:	b970      	cbnz	r0, d76a0 <pow+0x158>
   d7682:	f7fe fbb3 	bl	d5dec <__errno>
   d7686:	2322      	movs	r3, #34	; 0x22
   d7688:	6003      	str	r3, [r0, #0]
   d768a:	e009      	b.n	d76a0 <pow+0x158>
   d768c:	ed9f 7b70 	vldr	d7, [pc, #448]	; d7850 <pow+0x308>
   d7690:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7694:	4668      	mov	r0, sp
   d7696:	f000 ff5b 	bl	d8550 <matherr>
   d769a:	2800      	cmp	r0, #0
   d769c:	f000 808e 	beq.w	d77bc <pow+0x274>
   d76a0:	9b08      	ldr	r3, [sp, #32]
   d76a2:	b11b      	cbz	r3, d76ac <pow+0x164>
   d76a4:	f7fe fba2 	bl	d5dec <__errno>
   d76a8:	9b08      	ldr	r3, [sp, #32]
   d76aa:	6003      	str	r3, [r0, #0]
   d76ac:	ed9d 0b06 	vldr	d0, [sp, #24]
   d76b0:	b00b      	add	sp, #44	; 0x2c
   d76b2:	ecbd 8b02 	vpop	{d8}
   d76b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d76ba:	2200      	movs	r2, #0
   d76bc:	2300      	movs	r3, #0
   d76be:	4620      	mov	r0, r4
   d76c0:	4629      	mov	r1, r5
   d76c2:	f001 fc99 	bl	d8ff8 <__aeabi_dcmpeq>
   d76c6:	2800      	cmp	r0, #0
   d76c8:	d09d      	beq.n	d7606 <pow+0xbe>
   d76ca:	ed9f 0b63 	vldr	d0, [pc, #396]	; d7858 <pow+0x310>
   d76ce:	4b66      	ldr	r3, [pc, #408]	; (d7868 <pow+0x320>)
   d76d0:	f8cd b020 	str.w	fp, [sp, #32]
   d76d4:	2201      	movs	r2, #1
   d76d6:	f1b8 0f02 	cmp.w	r8, #2
   d76da:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d76de:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d76e2:	ed8d 0b06 	vstr	d0, [sp, #24]
   d76e6:	e88d 000c 	stmia.w	sp, {r2, r3}
   d76ea:	d1d3      	bne.n	d7694 <pow+0x14c>
   d76ec:	e78f      	b.n	d760e <pow+0xc6>
   d76ee:	ec47 6b10 	vmov	d0, r6, r7
   d76f2:	f000 ff25 	bl	d8540 <finite>
   d76f6:	2800      	cmp	r0, #0
   d76f8:	d097      	beq.n	d762a <pow+0xe2>
   d76fa:	ec45 4b10 	vmov	d0, r4, r5
   d76fe:	f000 ff1f 	bl	d8540 <finite>
   d7702:	2800      	cmp	r0, #0
   d7704:	d091      	beq.n	d762a <pow+0xe2>
   d7706:	ec53 2b18 	vmov	r2, r3, d8
   d770a:	ee18 0a10 	vmov	r0, s16
   d770e:	4619      	mov	r1, r3
   d7710:	f001 fca4 	bl	d905c <__aeabi_dcmpun>
   d7714:	2800      	cmp	r0, #0
   d7716:	d17c      	bne.n	d7812 <pow+0x2ca>
   d7718:	2303      	movs	r3, #3
   d771a:	f99a 8000 	ldrsb.w	r8, [sl]
   d771e:	9300      	str	r3, [sp, #0]
   d7720:	4b51      	ldr	r3, [pc, #324]	; (d7868 <pow+0x320>)
   d7722:	9008      	str	r0, [sp, #32]
   d7724:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7728:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d772c:	9301      	str	r3, [sp, #4]
   d772e:	f1b8 0f00 	cmp.w	r8, #0
   d7732:	d148      	bne.n	d77c6 <pow+0x27e>
   d7734:	f8df 9144 	ldr.w	r9, [pc, #324]	; d787c <pow+0x334>
   d7738:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d773c:	2200      	movs	r2, #0
   d773e:	2300      	movs	r3, #0
   d7740:	4630      	mov	r0, r6
   d7742:	4639      	mov	r1, r7
   d7744:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d7748:	f001 fc60 	bl	d900c <__aeabi_dcmplt>
   d774c:	2800      	cmp	r0, #0
   d774e:	d094      	beq.n	d767a <pow+0x132>
   d7750:	2200      	movs	r2, #0
   d7752:	4b46      	ldr	r3, [pc, #280]	; (d786c <pow+0x324>)
   d7754:	4620      	mov	r0, r4
   d7756:	4629      	mov	r1, r5
   d7758:	f001 f9e6 	bl	d8b28 <__aeabi_dmul>
   d775c:	4604      	mov	r4, r0
   d775e:	460d      	mov	r5, r1
   d7760:	ec45 4b10 	vmov	d0, r4, r5
   d7764:	f000 ff00 	bl	d8568 <rint>
   d7768:	4620      	mov	r0, r4
   d776a:	ec53 2b10 	vmov	r2, r3, d0
   d776e:	4629      	mov	r1, r5
   d7770:	f001 fc42 	bl	d8ff8 <__aeabi_dcmpeq>
   d7774:	2800      	cmp	r0, #0
   d7776:	d149      	bne.n	d780c <pow+0x2c4>
   d7778:	4b3d      	ldr	r3, [pc, #244]	; (d7870 <pow+0x328>)
   d777a:	f99a 8000 	ldrsb.w	r8, [sl]
   d777e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7782:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d7786:	f1b8 0f02 	cmp.w	r8, #2
   d778a:	f47f af76 	bne.w	d767a <pow+0x132>
   d778e:	e778      	b.n	d7682 <pow+0x13a>
   d7790:	4a35      	ldr	r2, [pc, #212]	; (d7868 <pow+0x320>)
   d7792:	f99a 3000 	ldrsb.w	r3, [sl]
   d7796:	f8cd b020 	str.w	fp, [sp, #32]
   d779a:	2101      	movs	r1, #1
   d779c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d77a0:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d77a4:	e88d 0006 	stmia.w	sp, {r1, r2}
   d77a8:	2b00      	cmp	r3, #0
   d77aa:	f43f af6f 	beq.w	d768c <pow+0x144>
   d77ae:	4931      	ldr	r1, [pc, #196]	; (d7874 <pow+0x32c>)
   d77b0:	2000      	movs	r0, #0
   d77b2:	2b02      	cmp	r3, #2
   d77b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d77b8:	f47f af6c 	bne.w	d7694 <pow+0x14c>
   d77bc:	f7fe fb16 	bl	d5dec <__errno>
   d77c0:	2321      	movs	r3, #33	; 0x21
   d77c2:	6003      	str	r3, [r0, #0]
   d77c4:	e76c      	b.n	d76a0 <pow+0x158>
   d77c6:	ed9f 7b26 	vldr	d7, [pc, #152]	; d7860 <pow+0x318>
   d77ca:	2200      	movs	r2, #0
   d77cc:	2300      	movs	r3, #0
   d77ce:	4630      	mov	r0, r6
   d77d0:	4639      	mov	r1, r7
   d77d2:	ed8d 7b06 	vstr	d7, [sp, #24]
   d77d6:	f001 fc19 	bl	d900c <__aeabi_dcmplt>
   d77da:	2800      	cmp	r0, #0
   d77dc:	d0d3      	beq.n	d7786 <pow+0x23e>
   d77de:	2200      	movs	r2, #0
   d77e0:	4b22      	ldr	r3, [pc, #136]	; (d786c <pow+0x324>)
   d77e2:	4620      	mov	r0, r4
   d77e4:	4629      	mov	r1, r5
   d77e6:	f001 f99f 	bl	d8b28 <__aeabi_dmul>
   d77ea:	4604      	mov	r4, r0
   d77ec:	460d      	mov	r5, r1
   d77ee:	ec45 4b10 	vmov	d0, r4, r5
   d77f2:	f000 feb9 	bl	d8568 <rint>
   d77f6:	4620      	mov	r0, r4
   d77f8:	ec53 2b10 	vmov	r2, r3, d0
   d77fc:	4629      	mov	r1, r5
   d77fe:	f001 fbfb 	bl	d8ff8 <__aeabi_dcmpeq>
   d7802:	b918      	cbnz	r0, d780c <pow+0x2c4>
   d7804:	4b1b      	ldr	r3, [pc, #108]	; (d7874 <pow+0x32c>)
   d7806:	2200      	movs	r2, #0
   d7808:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d780c:	f99a 8000 	ldrsb.w	r8, [sl]
   d7810:	e7b9      	b.n	d7786 <pow+0x23e>
   d7812:	4b15      	ldr	r3, [pc, #84]	; (d7868 <pow+0x320>)
   d7814:	f99a 9000 	ldrsb.w	r9, [sl]
   d7818:	f8cd 8020 	str.w	r8, [sp, #32]
   d781c:	2201      	movs	r2, #1
   d781e:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7822:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7826:	e88d 000c 	stmia.w	sp, {r2, r3}
   d782a:	f1b9 0f00 	cmp.w	r9, #0
   d782e:	f43f af2d 	beq.w	d768c <pow+0x144>
   d7832:	2200      	movs	r2, #0
   d7834:	2300      	movs	r3, #0
   d7836:	4610      	mov	r0, r2
   d7838:	4619      	mov	r1, r3
   d783a:	f001 fa9f 	bl	d8d7c <__aeabi_ddiv>
   d783e:	f1b9 0f02 	cmp.w	r9, #2
   d7842:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d7846:	d0b9      	beq.n	d77bc <pow+0x274>
   d7848:	e724      	b.n	d7694 <pow+0x14c>
   d784a:	bf00      	nop
   d784c:	f3af 8000 	nop.w
	...
   d785c:	3ff00000 	.word	0x3ff00000
   d7860:	00000000 	.word	0x00000000
   d7864:	7ff00000 	.word	0x7ff00000
   d7868:	000d9990 	.word	0x000d9990
   d786c:	3fe00000 	.word	0x3fe00000
   d7870:	c7efffff 	.word	0xc7efffff
   d7874:	fff00000 	.word	0xfff00000
   d7878:	2003e26c 	.word	0x2003e26c
   d787c:	47efffff 	.word	0x47efffff

000d7880 <__ieee754_pow>:
   d7880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7884:	ec51 0b11 	vmov	r0, r1, d1
   d7888:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d788c:	ea58 0400 	orrs.w	r4, r8, r0
   d7890:	b093      	sub	sp, #76	; 0x4c
   d7892:	d03c      	beq.n	d790e <__ieee754_pow+0x8e>
   d7894:	ec53 2b10 	vmov	r2, r3, d0
   d7898:	4e6d      	ldr	r6, [pc, #436]	; (d7a50 <__ieee754_pow+0x1d0>)
   d789a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d789e:	42b4      	cmp	r4, r6
   d78a0:	ee10 aa10 	vmov	sl, s0
   d78a4:	461d      	mov	r5, r3
   d78a6:	dc2b      	bgt.n	d7900 <__ieee754_pow+0x80>
   d78a8:	4689      	mov	r9, r1
   d78aa:	ee11 ea10 	vmov	lr, s2
   d78ae:	d026      	beq.n	d78fe <__ieee754_pow+0x7e>
   d78b0:	45b0      	cmp	r8, r6
   d78b2:	dc25      	bgt.n	d7900 <__ieee754_pow+0x80>
   d78b4:	4e66      	ldr	r6, [pc, #408]	; (d7a50 <__ieee754_pow+0x1d0>)
   d78b6:	45b0      	cmp	r8, r6
   d78b8:	d077      	beq.n	d79aa <__ieee754_pow+0x12a>
   d78ba:	2d00      	cmp	r5, #0
   d78bc:	4616      	mov	r6, r2
   d78be:	461f      	mov	r7, r3
   d78c0:	e9cd 0100 	strd	r0, r1, [sp]
   d78c4:	db75      	blt.n	d79b2 <__ieee754_pow+0x132>
   d78c6:	f04f 0b00 	mov.w	fp, #0
   d78ca:	f1be 0f00 	cmp.w	lr, #0
   d78ce:	d12d      	bne.n	d792c <__ieee754_pow+0xac>
   d78d0:	4b5f      	ldr	r3, [pc, #380]	; (d7a50 <__ieee754_pow+0x1d0>)
   d78d2:	4598      	cmp	r8, r3
   d78d4:	f000 8089 	beq.w	d79ea <__ieee754_pow+0x16a>
   d78d8:	4b5e      	ldr	r3, [pc, #376]	; (d7a54 <__ieee754_pow+0x1d4>)
   d78da:	4598      	cmp	r8, r3
   d78dc:	d05e      	beq.n	d799c <__ieee754_pow+0x11c>
   d78de:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d78e2:	f000 83de 	beq.w	d80a2 <__ieee754_pow+0x822>
   d78e6:	4b5c      	ldr	r3, [pc, #368]	; (d7a58 <__ieee754_pow+0x1d8>)
   d78e8:	4599      	cmp	r9, r3
   d78ea:	d11f      	bne.n	d792c <__ieee754_pow+0xac>
   d78ec:	2d00      	cmp	r5, #0
   d78ee:	db1d      	blt.n	d792c <__ieee754_pow+0xac>
   d78f0:	ec47 6b10 	vmov	d0, r6, r7
   d78f4:	b013      	add	sp, #76	; 0x4c
   d78f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d78fa:	f000 bd49 	b.w	d8390 <__ieee754_sqrt>
   d78fe:	b15a      	cbz	r2, d7918 <__ieee754_pow+0x98>
   d7900:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d7904:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d7908:	ea54 030a 	orrs.w	r3, r4, sl
   d790c:	d106      	bne.n	d791c <__ieee754_pow+0x9c>
   d790e:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d7a38 <__ieee754_pow+0x1b8>
   d7912:	b013      	add	sp, #76	; 0x4c
   d7914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7918:	45a0      	cmp	r8, r4
   d791a:	ddcb      	ble.n	d78b4 <__ieee754_pow+0x34>
   d791c:	484f      	ldr	r0, [pc, #316]	; (d7a5c <__ieee754_pow+0x1dc>)
   d791e:	b013      	add	sp, #76	; 0x4c
   d7920:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7924:	f000 be18 	b.w	d8558 <nan>
   d7928:	f04f 0b00 	mov.w	fp, #0
   d792c:	ec47 6b10 	vmov	d0, r6, r7
   d7930:	f000 fdfe 	bl	d8530 <fabs>
   d7934:	ec51 0b10 	vmov	r0, r1, d0
   d7938:	f1ba 0f00 	cmp.w	sl, #0
   d793c:	d01e      	beq.n	d797c <__ieee754_pow+0xfc>
   d793e:	0fed      	lsrs	r5, r5, #31
   d7940:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   d7944:	ea5b 030a 	orrs.w	r3, fp, sl
   d7948:	d063      	beq.n	d7a12 <__ieee754_pow+0x192>
   d794a:	4b45      	ldr	r3, [pc, #276]	; (d7a60 <__ieee754_pow+0x1e0>)
   d794c:	4598      	cmp	r8, r3
   d794e:	f340 808d 	ble.w	d7a6c <__ieee754_pow+0x1ec>
   d7952:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d7956:	4598      	cmp	r8, r3
   d7958:	f340 8438 	ble.w	d81cc <__ieee754_pow+0x94c>
   d795c:	4b41      	ldr	r3, [pc, #260]	; (d7a64 <__ieee754_pow+0x1e4>)
   d795e:	429c      	cmp	r4, r3
   d7960:	dd62      	ble.n	d7a28 <__ieee754_pow+0x1a8>
   d7962:	f1b9 0f00 	cmp.w	r9, #0
   d7966:	dd62      	ble.n	d7a2e <__ieee754_pow+0x1ae>
   d7968:	a335      	add	r3, pc, #212	; (adr r3, d7a40 <__ieee754_pow+0x1c0>)
   d796a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d796e:	4610      	mov	r0, r2
   d7970:	4619      	mov	r1, r3
   d7972:	f001 f8d9 	bl	d8b28 <__aeabi_dmul>
   d7976:	ec41 0b10 	vmov	d0, r0, r1
   d797a:	e7ca      	b.n	d7912 <__ieee754_pow+0x92>
   d797c:	b124      	cbz	r4, d7988 <__ieee754_pow+0x108>
   d797e:	4b35      	ldr	r3, [pc, #212]	; (d7a54 <__ieee754_pow+0x1d4>)
   d7980:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d7984:	429a      	cmp	r2, r3
   d7986:	d1da      	bne.n	d793e <__ieee754_pow+0xbe>
   d7988:	f1b9 0f00 	cmp.w	r9, #0
   d798c:	f2c0 83cb 	blt.w	d8126 <__ieee754_pow+0x8a6>
   d7990:	2d00      	cmp	r5, #0
   d7992:	f2c0 8374 	blt.w	d807e <__ieee754_pow+0x7fe>
   d7996:	ec41 0b10 	vmov	d0, r0, r1
   d799a:	e7ba      	b.n	d7912 <__ieee754_pow+0x92>
   d799c:	f1b9 0f00 	cmp.w	r9, #0
   d79a0:	f2c0 847a 	blt.w	d8298 <__ieee754_pow+0xa18>
   d79a4:	ec47 6b10 	vmov	d0, r6, r7
   d79a8:	e7b3      	b.n	d7912 <__ieee754_pow+0x92>
   d79aa:	f1be 0f00 	cmp.w	lr, #0
   d79ae:	d084      	beq.n	d78ba <__ieee754_pow+0x3a>
   d79b0:	e7a6      	b.n	d7900 <__ieee754_pow+0x80>
   d79b2:	4b2d      	ldr	r3, [pc, #180]	; (d7a68 <__ieee754_pow+0x1e8>)
   d79b4:	4598      	cmp	r8, r3
   d79b6:	dc29      	bgt.n	d7a0c <__ieee754_pow+0x18c>
   d79b8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d79bc:	4598      	cmp	r8, r3
   d79be:	dd82      	ble.n	d78c6 <__ieee754_pow+0x46>
   d79c0:	ea4f 5328 	mov.w	r3, r8, asr #20
   d79c4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d79c8:	2b14      	cmp	r3, #20
   d79ca:	f340 847f 	ble.w	d82cc <__ieee754_pow+0xa4c>
   d79ce:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d79d2:	fa2e f203 	lsr.w	r2, lr, r3
   d79d6:	fa02 f303 	lsl.w	r3, r2, r3
   d79da:	459e      	cmp	lr, r3
   d79dc:	f47f af73 	bne.w	d78c6 <__ieee754_pow+0x46>
   d79e0:	f002 0201 	and.w	r2, r2, #1
   d79e4:	f1c2 0b02 	rsb	fp, r2, #2
   d79e8:	e76f      	b.n	d78ca <__ieee754_pow+0x4a>
   d79ea:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d79ee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d79f2:	ea53 030a 	orrs.w	r3, r3, sl
   d79f6:	d08a      	beq.n	d790e <__ieee754_pow+0x8e>
   d79f8:	4b1a      	ldr	r3, [pc, #104]	; (d7a64 <__ieee754_pow+0x1e4>)
   d79fa:	429c      	cmp	r4, r3
   d79fc:	f340 8385 	ble.w	d810a <__ieee754_pow+0x88a>
   d7a00:	f1b9 0f00 	cmp.w	r9, #0
   d7a04:	db13      	blt.n	d7a2e <__ieee754_pow+0x1ae>
   d7a06:	ed9d 0b00 	vldr	d0, [sp]
   d7a0a:	e782      	b.n	d7912 <__ieee754_pow+0x92>
   d7a0c:	f04f 0b02 	mov.w	fp, #2
   d7a10:	e75b      	b.n	d78ca <__ieee754_pow+0x4a>
   d7a12:	4632      	mov	r2, r6
   d7a14:	463b      	mov	r3, r7
   d7a16:	4610      	mov	r0, r2
   d7a18:	4619      	mov	r1, r3
   d7a1a:	f000 fed1 	bl	d87c0 <__aeabi_dsub>
   d7a1e:	4602      	mov	r2, r0
   d7a20:	460b      	mov	r3, r1
   d7a22:	f001 f9ab 	bl	d8d7c <__aeabi_ddiv>
   d7a26:	e7b6      	b.n	d7996 <__ieee754_pow+0x116>
   d7a28:	f1b9 0f00 	cmp.w	r9, #0
   d7a2c:	db9c      	blt.n	d7968 <__ieee754_pow+0xe8>
   d7a2e:	ed9f 0b06 	vldr	d0, [pc, #24]	; d7a48 <__ieee754_pow+0x1c8>
   d7a32:	e76e      	b.n	d7912 <__ieee754_pow+0x92>
   d7a34:	f3af 8000 	nop.w
   d7a38:	00000000 	.word	0x00000000
   d7a3c:	3ff00000 	.word	0x3ff00000
   d7a40:	8800759c 	.word	0x8800759c
   d7a44:	7e37e43c 	.word	0x7e37e43c
	...
   d7a50:	7ff00000 	.word	0x7ff00000
   d7a54:	3ff00000 	.word	0x3ff00000
   d7a58:	3fe00000 	.word	0x3fe00000
   d7a5c:	000d9994 	.word	0x000d9994
   d7a60:	41e00000 	.word	0x41e00000
   d7a64:	3fefffff 	.word	0x3fefffff
   d7a68:	433fffff 	.word	0x433fffff
   d7a6c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d7a70:	f04f 0200 	mov.w	r2, #0
   d7a74:	da05      	bge.n	d7a82 <__ieee754_pow+0x202>
   d7a76:	4bd6      	ldr	r3, [pc, #856]	; (d7dd0 <__ieee754_pow+0x550>)
   d7a78:	f001 f856 	bl	d8b28 <__aeabi_dmul>
   d7a7c:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d7a80:	460c      	mov	r4, r1
   d7a82:	1523      	asrs	r3, r4, #20
   d7a84:	4ed3      	ldr	r6, [pc, #844]	; (d7dd4 <__ieee754_pow+0x554>)
   d7a86:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d7a8a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d7a8e:	4413      	add	r3, r2
   d7a90:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d7a94:	42b4      	cmp	r4, r6
   d7a96:	461a      	mov	r2, r3
   d7a98:	930d      	str	r3, [sp, #52]	; 0x34
   d7a9a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d7a9e:	f340 8349 	ble.w	d8134 <__ieee754_pow+0x8b4>
   d7aa2:	4bcd      	ldr	r3, [pc, #820]	; (d7dd8 <__ieee754_pow+0x558>)
   d7aa4:	429c      	cmp	r4, r3
   d7aa6:	f340 842d 	ble.w	d8304 <__ieee754_pow+0xa84>
   d7aaa:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d7d78 <__ieee754_pow+0x4f8>
   d7aae:	ed8d 7b08 	vstr	d7, [sp, #32]
   d7ab2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d7ab6:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d7d80 <__ieee754_pow+0x500>
   d7aba:	4613      	mov	r3, r2
   d7abc:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7ac0:	3301      	adds	r3, #1
   d7ac2:	930d      	str	r3, [sp, #52]	; 0x34
   d7ac4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d7ac8:	f04f 0800 	mov.w	r8, #0
   d7acc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7ad0:	4629      	mov	r1, r5
   d7ad2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d7ad6:	f000 fe73 	bl	d87c0 <__aeabi_dsub>
   d7ada:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7ade:	4606      	mov	r6, r0
   d7ae0:	460f      	mov	r7, r1
   d7ae2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d7ae6:	f000 fe6d 	bl	d87c4 <__adddf3>
   d7aea:	4602      	mov	r2, r0
   d7aec:	460b      	mov	r3, r1
   d7aee:	2000      	movs	r0, #0
   d7af0:	49ba      	ldr	r1, [pc, #744]	; (d7ddc <__ieee754_pow+0x55c>)
   d7af2:	f001 f943 	bl	d8d7c <__aeabi_ddiv>
   d7af6:	4603      	mov	r3, r0
   d7af8:	460c      	mov	r4, r1
   d7afa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d7afe:	4602      	mov	r2, r0
   d7b00:	460b      	mov	r3, r1
   d7b02:	4630      	mov	r0, r6
   d7b04:	4639      	mov	r1, r7
   d7b06:	f001 f80f 	bl	d8b28 <__aeabi_dmul>
   d7b0a:	106b      	asrs	r3, r5, #1
   d7b0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d7b10:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d7b14:	eb03 0508 	add.w	r5, r3, r8
   d7b18:	460a      	mov	r2, r1
   d7b1a:	2300      	movs	r3, #0
   d7b1c:	4601      	mov	r1, r0
   d7b1e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d7b22:	9302      	str	r3, [sp, #8]
   d7b24:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d7b28:	2400      	movs	r4, #0
   d7b2a:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d7b2e:	462b      	mov	r3, r5
   d7b30:	4622      	mov	r2, r4
   d7b32:	4640      	mov	r0, r8
   d7b34:	4649      	mov	r1, r9
   d7b36:	f000 fff7 	bl	d8b28 <__aeabi_dmul>
   d7b3a:	4602      	mov	r2, r0
   d7b3c:	460b      	mov	r3, r1
   d7b3e:	4630      	mov	r0, r6
   d7b40:	4639      	mov	r1, r7
   d7b42:	f000 fe3d 	bl	d87c0 <__aeabi_dsub>
   d7b46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7b4a:	4606      	mov	r6, r0
   d7b4c:	460f      	mov	r7, r1
   d7b4e:	4620      	mov	r0, r4
   d7b50:	4629      	mov	r1, r5
   d7b52:	f000 fe35 	bl	d87c0 <__aeabi_dsub>
   d7b56:	4602      	mov	r2, r0
   d7b58:	460b      	mov	r3, r1
   d7b5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d7b5e:	f000 fe2f 	bl	d87c0 <__aeabi_dsub>
   d7b62:	4642      	mov	r2, r8
   d7b64:	464b      	mov	r3, r9
   d7b66:	f000 ffdf 	bl	d8b28 <__aeabi_dmul>
   d7b6a:	4602      	mov	r2, r0
   d7b6c:	460b      	mov	r3, r1
   d7b6e:	4630      	mov	r0, r6
   d7b70:	4639      	mov	r1, r7
   d7b72:	f000 fe25 	bl	d87c0 <__aeabi_dsub>
   d7b76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d7b7a:	f000 ffd5 	bl	d8b28 <__aeabi_dmul>
   d7b7e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d7b82:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d7b86:	4622      	mov	r2, r4
   d7b88:	462b      	mov	r3, r5
   d7b8a:	4620      	mov	r0, r4
   d7b8c:	4629      	mov	r1, r5
   d7b8e:	f000 ffcb 	bl	d8b28 <__aeabi_dmul>
   d7b92:	a37d      	add	r3, pc, #500	; (adr r3, d7d88 <__ieee754_pow+0x508>)
   d7b94:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7b98:	4604      	mov	r4, r0
   d7b9a:	460d      	mov	r5, r1
   d7b9c:	f000 ffc4 	bl	d8b28 <__aeabi_dmul>
   d7ba0:	a37b      	add	r3, pc, #492	; (adr r3, d7d90 <__ieee754_pow+0x510>)
   d7ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ba6:	f000 fe0d 	bl	d87c4 <__adddf3>
   d7baa:	4622      	mov	r2, r4
   d7bac:	462b      	mov	r3, r5
   d7bae:	f000 ffbb 	bl	d8b28 <__aeabi_dmul>
   d7bb2:	a379      	add	r3, pc, #484	; (adr r3, d7d98 <__ieee754_pow+0x518>)
   d7bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7bb8:	f000 fe04 	bl	d87c4 <__adddf3>
   d7bbc:	4622      	mov	r2, r4
   d7bbe:	462b      	mov	r3, r5
   d7bc0:	f000 ffb2 	bl	d8b28 <__aeabi_dmul>
   d7bc4:	a376      	add	r3, pc, #472	; (adr r3, d7da0 <__ieee754_pow+0x520>)
   d7bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7bca:	f000 fdfb 	bl	d87c4 <__adddf3>
   d7bce:	4622      	mov	r2, r4
   d7bd0:	462b      	mov	r3, r5
   d7bd2:	f000 ffa9 	bl	d8b28 <__aeabi_dmul>
   d7bd6:	a374      	add	r3, pc, #464	; (adr r3, d7da8 <__ieee754_pow+0x528>)
   d7bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7bdc:	f000 fdf2 	bl	d87c4 <__adddf3>
   d7be0:	4622      	mov	r2, r4
   d7be2:	462b      	mov	r3, r5
   d7be4:	f000 ffa0 	bl	d8b28 <__aeabi_dmul>
   d7be8:	a371      	add	r3, pc, #452	; (adr r3, d7db0 <__ieee754_pow+0x530>)
   d7bea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7bee:	f000 fde9 	bl	d87c4 <__adddf3>
   d7bf2:	4622      	mov	r2, r4
   d7bf4:	4606      	mov	r6, r0
   d7bf6:	460f      	mov	r7, r1
   d7bf8:	462b      	mov	r3, r5
   d7bfa:	4620      	mov	r0, r4
   d7bfc:	4629      	mov	r1, r5
   d7bfe:	f000 ff93 	bl	d8b28 <__aeabi_dmul>
   d7c02:	4602      	mov	r2, r0
   d7c04:	460b      	mov	r3, r1
   d7c06:	4630      	mov	r0, r6
   d7c08:	4639      	mov	r1, r7
   d7c0a:	f000 ff8d 	bl	d8b28 <__aeabi_dmul>
   d7c0e:	4642      	mov	r2, r8
   d7c10:	4604      	mov	r4, r0
   d7c12:	460d      	mov	r5, r1
   d7c14:	464b      	mov	r3, r9
   d7c16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7c1a:	f000 fdd3 	bl	d87c4 <__adddf3>
   d7c1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7c22:	f000 ff81 	bl	d8b28 <__aeabi_dmul>
   d7c26:	4622      	mov	r2, r4
   d7c28:	462b      	mov	r3, r5
   d7c2a:	f000 fdcb 	bl	d87c4 <__adddf3>
   d7c2e:	4642      	mov	r2, r8
   d7c30:	4606      	mov	r6, r0
   d7c32:	460f      	mov	r7, r1
   d7c34:	464b      	mov	r3, r9
   d7c36:	4640      	mov	r0, r8
   d7c38:	4649      	mov	r1, r9
   d7c3a:	f000 ff75 	bl	d8b28 <__aeabi_dmul>
   d7c3e:	2200      	movs	r2, #0
   d7c40:	4b67      	ldr	r3, [pc, #412]	; (d7de0 <__ieee754_pow+0x560>)
   d7c42:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d7c46:	f000 fdbd 	bl	d87c4 <__adddf3>
   d7c4a:	4632      	mov	r2, r6
   d7c4c:	463b      	mov	r3, r7
   d7c4e:	f000 fdb9 	bl	d87c4 <__adddf3>
   d7c52:	9802      	ldr	r0, [sp, #8]
   d7c54:	460d      	mov	r5, r1
   d7c56:	4604      	mov	r4, r0
   d7c58:	4622      	mov	r2, r4
   d7c5a:	462b      	mov	r3, r5
   d7c5c:	4640      	mov	r0, r8
   d7c5e:	4649      	mov	r1, r9
   d7c60:	f000 ff62 	bl	d8b28 <__aeabi_dmul>
   d7c64:	2200      	movs	r2, #0
   d7c66:	4680      	mov	r8, r0
   d7c68:	4689      	mov	r9, r1
   d7c6a:	4b5d      	ldr	r3, [pc, #372]	; (d7de0 <__ieee754_pow+0x560>)
   d7c6c:	4620      	mov	r0, r4
   d7c6e:	4629      	mov	r1, r5
   d7c70:	f000 fda6 	bl	d87c0 <__aeabi_dsub>
   d7c74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d7c78:	f000 fda2 	bl	d87c0 <__aeabi_dsub>
   d7c7c:	4602      	mov	r2, r0
   d7c7e:	460b      	mov	r3, r1
   d7c80:	4630      	mov	r0, r6
   d7c82:	4639      	mov	r1, r7
   d7c84:	f000 fd9c 	bl	d87c0 <__aeabi_dsub>
   d7c88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d7c8c:	f000 ff4c 	bl	d8b28 <__aeabi_dmul>
   d7c90:	4622      	mov	r2, r4
   d7c92:	4606      	mov	r6, r0
   d7c94:	460f      	mov	r7, r1
   d7c96:	462b      	mov	r3, r5
   d7c98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d7c9c:	f000 ff44 	bl	d8b28 <__aeabi_dmul>
   d7ca0:	4602      	mov	r2, r0
   d7ca2:	460b      	mov	r3, r1
   d7ca4:	4630      	mov	r0, r6
   d7ca6:	4639      	mov	r1, r7
   d7ca8:	f000 fd8c 	bl	d87c4 <__adddf3>
   d7cac:	4606      	mov	r6, r0
   d7cae:	460f      	mov	r7, r1
   d7cb0:	4602      	mov	r2, r0
   d7cb2:	460b      	mov	r3, r1
   d7cb4:	4640      	mov	r0, r8
   d7cb6:	4649      	mov	r1, r9
   d7cb8:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d7cbc:	f000 fd82 	bl	d87c4 <__adddf3>
   d7cc0:	9802      	ldr	r0, [sp, #8]
   d7cc2:	a33d      	add	r3, pc, #244	; (adr r3, d7db8 <__ieee754_pow+0x538>)
   d7cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7cc8:	4604      	mov	r4, r0
   d7cca:	460d      	mov	r5, r1
   d7ccc:	f000 ff2c 	bl	d8b28 <__aeabi_dmul>
   d7cd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d7cd4:	4680      	mov	r8, r0
   d7cd6:	4689      	mov	r9, r1
   d7cd8:	4620      	mov	r0, r4
   d7cda:	4629      	mov	r1, r5
   d7cdc:	f000 fd70 	bl	d87c0 <__aeabi_dsub>
   d7ce0:	4602      	mov	r2, r0
   d7ce2:	460b      	mov	r3, r1
   d7ce4:	4630      	mov	r0, r6
   d7ce6:	4639      	mov	r1, r7
   d7ce8:	f000 fd6a 	bl	d87c0 <__aeabi_dsub>
   d7cec:	a334      	add	r3, pc, #208	; (adr r3, d7dc0 <__ieee754_pow+0x540>)
   d7cee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7cf2:	f000 ff19 	bl	d8b28 <__aeabi_dmul>
   d7cf6:	a334      	add	r3, pc, #208	; (adr r3, d7dc8 <__ieee754_pow+0x548>)
   d7cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7cfc:	4606      	mov	r6, r0
   d7cfe:	460f      	mov	r7, r1
   d7d00:	4620      	mov	r0, r4
   d7d02:	4629      	mov	r1, r5
   d7d04:	f000 ff10 	bl	d8b28 <__aeabi_dmul>
   d7d08:	4602      	mov	r2, r0
   d7d0a:	460b      	mov	r3, r1
   d7d0c:	4630      	mov	r0, r6
   d7d0e:	4639      	mov	r1, r7
   d7d10:	f000 fd58 	bl	d87c4 <__adddf3>
   d7d14:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d7d18:	f000 fd54 	bl	d87c4 <__adddf3>
   d7d1c:	4606      	mov	r6, r0
   d7d1e:	980d      	ldr	r0, [sp, #52]	; 0x34
   d7d20:	460f      	mov	r7, r1
   d7d22:	f000 fe9b 	bl	d8a5c <__aeabi_i2d>
   d7d26:	4632      	mov	r2, r6
   d7d28:	4604      	mov	r4, r0
   d7d2a:	460d      	mov	r5, r1
   d7d2c:	463b      	mov	r3, r7
   d7d2e:	4640      	mov	r0, r8
   d7d30:	4649      	mov	r1, r9
   d7d32:	f000 fd47 	bl	d87c4 <__adddf3>
   d7d36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7d3a:	f000 fd43 	bl	d87c4 <__adddf3>
   d7d3e:	4622      	mov	r2, r4
   d7d40:	462b      	mov	r3, r5
   d7d42:	f000 fd3f 	bl	d87c4 <__adddf3>
   d7d46:	9802      	ldr	r0, [sp, #8]
   d7d48:	4622      	mov	r2, r4
   d7d4a:	462b      	mov	r3, r5
   d7d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d7d50:	f000 fd36 	bl	d87c0 <__aeabi_dsub>
   d7d54:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7d58:	f000 fd32 	bl	d87c0 <__aeabi_dsub>
   d7d5c:	4642      	mov	r2, r8
   d7d5e:	464b      	mov	r3, r9
   d7d60:	f000 fd2e 	bl	d87c0 <__aeabi_dsub>
   d7d64:	4602      	mov	r2, r0
   d7d66:	460b      	mov	r3, r1
   d7d68:	4630      	mov	r0, r6
   d7d6a:	4639      	mov	r1, r7
   d7d6c:	f000 fd28 	bl	d87c0 <__aeabi_dsub>
   d7d70:	4680      	mov	r8, r0
   d7d72:	4689      	mov	r9, r1
   d7d74:	e036      	b.n	d7de4 <__ieee754_pow+0x564>
   d7d76:	bf00      	nop
	...
   d7d84:	3ff00000 	.word	0x3ff00000
   d7d88:	4a454eef 	.word	0x4a454eef
   d7d8c:	3fca7e28 	.word	0x3fca7e28
   d7d90:	93c9db65 	.word	0x93c9db65
   d7d94:	3fcd864a 	.word	0x3fcd864a
   d7d98:	a91d4101 	.word	0xa91d4101
   d7d9c:	3fd17460 	.word	0x3fd17460
   d7da0:	518f264d 	.word	0x518f264d
   d7da4:	3fd55555 	.word	0x3fd55555
   d7da8:	db6fabff 	.word	0xdb6fabff
   d7dac:	3fdb6db6 	.word	0x3fdb6db6
   d7db0:	33333303 	.word	0x33333303
   d7db4:	3fe33333 	.word	0x3fe33333
   d7db8:	e0000000 	.word	0xe0000000
   d7dbc:	3feec709 	.word	0x3feec709
   d7dc0:	dc3a03fd 	.word	0xdc3a03fd
   d7dc4:	3feec709 	.word	0x3feec709
   d7dc8:	145b01f5 	.word	0x145b01f5
   d7dcc:	be3e2fe0 	.word	0xbe3e2fe0
   d7dd0:	43400000 	.word	0x43400000
   d7dd4:	0003988e 	.word	0x0003988e
   d7dd8:	000bb679 	.word	0x000bb679
   d7ddc:	3ff00000 	.word	0x3ff00000
   d7de0:	40080000 	.word	0x40080000
   d7de4:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   d7de8:	ea53 030a 	orrs.w	r3, r3, sl
   d7dec:	f000 8188 	beq.w	d8100 <__ieee754_pow+0x880>
   d7df0:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d8150 <__ieee754_pow+0x8d0>
   d7df4:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7df8:	e9dd ab00 	ldrd	sl, fp, [sp]
   d7dfc:	4653      	mov	r3, sl
   d7dfe:	465c      	mov	r4, fp
   d7e00:	e9cd 3400 	strd	r3, r4, [sp]
   d7e04:	2300      	movs	r3, #0
   d7e06:	9300      	str	r3, [sp, #0]
   d7e08:	e9dd 4500 	ldrd	r4, r5, [sp]
   d7e0c:	4650      	mov	r0, sl
   d7e0e:	4622      	mov	r2, r4
   d7e10:	462b      	mov	r3, r5
   d7e12:	4659      	mov	r1, fp
   d7e14:	f000 fcd4 	bl	d87c0 <__aeabi_dsub>
   d7e18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7e1c:	f000 fe84 	bl	d8b28 <__aeabi_dmul>
   d7e20:	4652      	mov	r2, sl
   d7e22:	4606      	mov	r6, r0
   d7e24:	460f      	mov	r7, r1
   d7e26:	465b      	mov	r3, fp
   d7e28:	4640      	mov	r0, r8
   d7e2a:	4649      	mov	r1, r9
   d7e2c:	f000 fe7c 	bl	d8b28 <__aeabi_dmul>
   d7e30:	4602      	mov	r2, r0
   d7e32:	460b      	mov	r3, r1
   d7e34:	4630      	mov	r0, r6
   d7e36:	4639      	mov	r1, r7
   d7e38:	f000 fcc4 	bl	d87c4 <__adddf3>
   d7e3c:	4622      	mov	r2, r4
   d7e3e:	4680      	mov	r8, r0
   d7e40:	4689      	mov	r9, r1
   d7e42:	462b      	mov	r3, r5
   d7e44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d7e48:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d7e4c:	f000 fe6c 	bl	d8b28 <__aeabi_dmul>
   d7e50:	460b      	mov	r3, r1
   d7e52:	4602      	mov	r2, r0
   d7e54:	4606      	mov	r6, r0
   d7e56:	460f      	mov	r7, r1
   d7e58:	4640      	mov	r0, r8
   d7e5a:	4649      	mov	r1, r9
   d7e5c:	f000 fcb2 	bl	d87c4 <__adddf3>
   d7e60:	4bd5      	ldr	r3, [pc, #852]	; (d81b8 <__ieee754_pow+0x938>)
   d7e62:	4299      	cmp	r1, r3
   d7e64:	4604      	mov	r4, r0
   d7e66:	460d      	mov	r5, r1
   d7e68:	468a      	mov	sl, r1
   d7e6a:	f340 8123 	ble.w	d80b4 <__ieee754_pow+0x834>
   d7e6e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d7e72:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d7e76:	4303      	orrs	r3, r0
   d7e78:	f040 8218 	bne.w	d82ac <__ieee754_pow+0xa2c>
   d7e7c:	a3b6      	add	r3, pc, #728	; (adr r3, d8158 <__ieee754_pow+0x8d8>)
   d7e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7e86:	f000 fc9d 	bl	d87c4 <__adddf3>
   d7e8a:	4632      	mov	r2, r6
   d7e8c:	4680      	mov	r8, r0
   d7e8e:	4689      	mov	r9, r1
   d7e90:	463b      	mov	r3, r7
   d7e92:	4620      	mov	r0, r4
   d7e94:	4629      	mov	r1, r5
   d7e96:	f000 fc93 	bl	d87c0 <__aeabi_dsub>
   d7e9a:	4602      	mov	r2, r0
   d7e9c:	460b      	mov	r3, r1
   d7e9e:	4640      	mov	r0, r8
   d7ea0:	4649      	mov	r1, r9
   d7ea2:	f001 f8d1 	bl	d9048 <__aeabi_dcmpgt>
   d7ea6:	2800      	cmp	r0, #0
   d7ea8:	f040 8200 	bne.w	d82ac <__ieee754_pow+0xa2c>
   d7eac:	46a8      	mov	r8, r5
   d7eae:	ea4f 5328 	mov.w	r3, r8, asr #20
   d7eb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d7eb6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d7eba:	fa42 f303 	asr.w	r3, r2, r3
   d7ebe:	4453      	add	r3, sl
   d7ec0:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d7ec4:	4dbd      	ldr	r5, [pc, #756]	; (d81bc <__ieee754_pow+0x93c>)
   d7ec6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d7eca:	4115      	asrs	r5, r2
   d7ecc:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d7ed0:	2000      	movs	r0, #0
   d7ed2:	f1c2 0414 	rsb	r4, r2, #20
   d7ed6:	ea23 0105 	bic.w	r1, r3, r5
   d7eda:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d7ede:	f1ba 0f00 	cmp.w	sl, #0
   d7ee2:	4602      	mov	r2, r0
   d7ee4:	460b      	mov	r3, r1
   d7ee6:	fa4b fb04 	asr.w	fp, fp, r4
   d7eea:	4630      	mov	r0, r6
   d7eec:	4639      	mov	r1, r7
   d7eee:	bfb8      	it	lt
   d7ef0:	f1cb 0b00 	rsblt	fp, fp, #0
   d7ef4:	f000 fc64 	bl	d87c0 <__aeabi_dsub>
   d7ef8:	4602      	mov	r2, r0
   d7efa:	460b      	mov	r3, r1
   d7efc:	4606      	mov	r6, r0
   d7efe:	460f      	mov	r7, r1
   d7f00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7f04:	f000 fc5e 	bl	d87c4 <__adddf3>
   d7f08:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d7f0c:	2400      	movs	r4, #0
   d7f0e:	a394      	add	r3, pc, #592	; (adr r3, d8160 <__ieee754_pow+0x8e0>)
   d7f10:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f14:	4620      	mov	r0, r4
   d7f16:	460d      	mov	r5, r1
   d7f18:	f000 fe06 	bl	d8b28 <__aeabi_dmul>
   d7f1c:	4632      	mov	r2, r6
   d7f1e:	4680      	mov	r8, r0
   d7f20:	4689      	mov	r9, r1
   d7f22:	463b      	mov	r3, r7
   d7f24:	4620      	mov	r0, r4
   d7f26:	4629      	mov	r1, r5
   d7f28:	f000 fc4a 	bl	d87c0 <__aeabi_dsub>
   d7f2c:	4602      	mov	r2, r0
   d7f2e:	460b      	mov	r3, r1
   d7f30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7f34:	f000 fc44 	bl	d87c0 <__aeabi_dsub>
   d7f38:	a38b      	add	r3, pc, #556	; (adr r3, d8168 <__ieee754_pow+0x8e8>)
   d7f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f3e:	f000 fdf3 	bl	d8b28 <__aeabi_dmul>
   d7f42:	a38b      	add	r3, pc, #556	; (adr r3, d8170 <__ieee754_pow+0x8f0>)
   d7f44:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f48:	4606      	mov	r6, r0
   d7f4a:	460f      	mov	r7, r1
   d7f4c:	4620      	mov	r0, r4
   d7f4e:	4629      	mov	r1, r5
   d7f50:	f000 fdea 	bl	d8b28 <__aeabi_dmul>
   d7f54:	4602      	mov	r2, r0
   d7f56:	460b      	mov	r3, r1
   d7f58:	4630      	mov	r0, r6
   d7f5a:	4639      	mov	r1, r7
   d7f5c:	f000 fc32 	bl	d87c4 <__adddf3>
   d7f60:	4606      	mov	r6, r0
   d7f62:	460f      	mov	r7, r1
   d7f64:	4602      	mov	r2, r0
   d7f66:	460b      	mov	r3, r1
   d7f68:	4640      	mov	r0, r8
   d7f6a:	4649      	mov	r1, r9
   d7f6c:	f000 fc2a 	bl	d87c4 <__adddf3>
   d7f70:	4642      	mov	r2, r8
   d7f72:	464b      	mov	r3, r9
   d7f74:	4604      	mov	r4, r0
   d7f76:	460d      	mov	r5, r1
   d7f78:	f000 fc22 	bl	d87c0 <__aeabi_dsub>
   d7f7c:	4602      	mov	r2, r0
   d7f7e:	460b      	mov	r3, r1
   d7f80:	4630      	mov	r0, r6
   d7f82:	4639      	mov	r1, r7
   d7f84:	f000 fc1c 	bl	d87c0 <__aeabi_dsub>
   d7f88:	4622      	mov	r2, r4
   d7f8a:	4680      	mov	r8, r0
   d7f8c:	4689      	mov	r9, r1
   d7f8e:	462b      	mov	r3, r5
   d7f90:	4620      	mov	r0, r4
   d7f92:	4629      	mov	r1, r5
   d7f94:	f000 fdc8 	bl	d8b28 <__aeabi_dmul>
   d7f98:	a377      	add	r3, pc, #476	; (adr r3, d8178 <__ieee754_pow+0x8f8>)
   d7f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f9e:	4606      	mov	r6, r0
   d7fa0:	460f      	mov	r7, r1
   d7fa2:	f000 fdc1 	bl	d8b28 <__aeabi_dmul>
   d7fa6:	a376      	add	r3, pc, #472	; (adr r3, d8180 <__ieee754_pow+0x900>)
   d7fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7fac:	f000 fc08 	bl	d87c0 <__aeabi_dsub>
   d7fb0:	4632      	mov	r2, r6
   d7fb2:	463b      	mov	r3, r7
   d7fb4:	f000 fdb8 	bl	d8b28 <__aeabi_dmul>
   d7fb8:	a373      	add	r3, pc, #460	; (adr r3, d8188 <__ieee754_pow+0x908>)
   d7fba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7fbe:	f000 fc01 	bl	d87c4 <__adddf3>
   d7fc2:	4632      	mov	r2, r6
   d7fc4:	463b      	mov	r3, r7
   d7fc6:	f000 fdaf 	bl	d8b28 <__aeabi_dmul>
   d7fca:	a371      	add	r3, pc, #452	; (adr r3, d8190 <__ieee754_pow+0x910>)
   d7fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7fd0:	f000 fbf6 	bl	d87c0 <__aeabi_dsub>
   d7fd4:	4632      	mov	r2, r6
   d7fd6:	463b      	mov	r3, r7
   d7fd8:	f000 fda6 	bl	d8b28 <__aeabi_dmul>
   d7fdc:	a36e      	add	r3, pc, #440	; (adr r3, d8198 <__ieee754_pow+0x918>)
   d7fde:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7fe2:	f000 fbef 	bl	d87c4 <__adddf3>
   d7fe6:	4632      	mov	r2, r6
   d7fe8:	463b      	mov	r3, r7
   d7fea:	f000 fd9d 	bl	d8b28 <__aeabi_dmul>
   d7fee:	4602      	mov	r2, r0
   d7ff0:	460b      	mov	r3, r1
   d7ff2:	4620      	mov	r0, r4
   d7ff4:	4629      	mov	r1, r5
   d7ff6:	f000 fbe3 	bl	d87c0 <__aeabi_dsub>
   d7ffa:	4606      	mov	r6, r0
   d7ffc:	460f      	mov	r7, r1
   d7ffe:	4602      	mov	r2, r0
   d8000:	460b      	mov	r3, r1
   d8002:	4620      	mov	r0, r4
   d8004:	4629      	mov	r1, r5
   d8006:	f000 fd8f 	bl	d8b28 <__aeabi_dmul>
   d800a:	2200      	movs	r2, #0
   d800c:	e9cd 0100 	strd	r0, r1, [sp]
   d8010:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d8014:	4630      	mov	r0, r6
   d8016:	4639      	mov	r1, r7
   d8018:	f000 fbd2 	bl	d87c0 <__aeabi_dsub>
   d801c:	4602      	mov	r2, r0
   d801e:	460b      	mov	r3, r1
   d8020:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8024:	f000 feaa 	bl	d8d7c <__aeabi_ddiv>
   d8028:	4642      	mov	r2, r8
   d802a:	4606      	mov	r6, r0
   d802c:	460f      	mov	r7, r1
   d802e:	464b      	mov	r3, r9
   d8030:	4620      	mov	r0, r4
   d8032:	4629      	mov	r1, r5
   d8034:	f000 fd78 	bl	d8b28 <__aeabi_dmul>
   d8038:	4642      	mov	r2, r8
   d803a:	464b      	mov	r3, r9
   d803c:	f000 fbc2 	bl	d87c4 <__adddf3>
   d8040:	4602      	mov	r2, r0
   d8042:	460b      	mov	r3, r1
   d8044:	4630      	mov	r0, r6
   d8046:	4639      	mov	r1, r7
   d8048:	f000 fbba 	bl	d87c0 <__aeabi_dsub>
   d804c:	4622      	mov	r2, r4
   d804e:	462b      	mov	r3, r5
   d8050:	f000 fbb6 	bl	d87c0 <__aeabi_dsub>
   d8054:	4602      	mov	r2, r0
   d8056:	460b      	mov	r3, r1
   d8058:	2000      	movs	r0, #0
   d805a:	4959      	ldr	r1, [pc, #356]	; (d81c0 <__ieee754_pow+0x940>)
   d805c:	f000 fbb0 	bl	d87c0 <__aeabi_dsub>
   d8060:	448a      	add	sl, r1
   d8062:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d8066:	4602      	mov	r2, r0
   d8068:	460b      	mov	r3, r1
   d806a:	f2c0 815b 	blt.w	d8324 <__ieee754_pow+0xaa4>
   d806e:	4651      	mov	r1, sl
   d8070:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d8074:	f000 fd58 	bl	d8b28 <__aeabi_dmul>
   d8078:	ec41 0b10 	vmov	d0, r0, r1
   d807c:	e449      	b.n	d7912 <__ieee754_pow+0x92>
   d807e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d8082:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d8086:	ea54 030b 	orrs.w	r3, r4, fp
   d808a:	f000 8137 	beq.w	d82fc <__ieee754_pow+0xa7c>
   d808e:	f1bb 0f01 	cmp.w	fp, #1
   d8092:	f47f ac80 	bne.w	d7996 <__ieee754_pow+0x116>
   d8096:	4602      	mov	r2, r0
   d8098:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d809c:	ec43 2b10 	vmov	d0, r2, r3
   d80a0:	e437      	b.n	d7912 <__ieee754_pow+0x92>
   d80a2:	4632      	mov	r2, r6
   d80a4:	463b      	mov	r3, r7
   d80a6:	4630      	mov	r0, r6
   d80a8:	4639      	mov	r1, r7
   d80aa:	f000 fd3d 	bl	d8b28 <__aeabi_dmul>
   d80ae:	ec41 0b10 	vmov	d0, r0, r1
   d80b2:	e42e      	b.n	d7912 <__ieee754_pow+0x92>
   d80b4:	4b43      	ldr	r3, [pc, #268]	; (d81c4 <__ieee754_pow+0x944>)
   d80b6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d80ba:	4598      	cmp	r8, r3
   d80bc:	f340 8115 	ble.w	d82ea <__ieee754_pow+0xa6a>
   d80c0:	4b41      	ldr	r3, [pc, #260]	; (d81c8 <__ieee754_pow+0x948>)
   d80c2:	440b      	add	r3, r1
   d80c4:	4303      	orrs	r3, r0
   d80c6:	d10c      	bne.n	d80e2 <__ieee754_pow+0x862>
   d80c8:	4632      	mov	r2, r6
   d80ca:	463b      	mov	r3, r7
   d80cc:	f000 fb78 	bl	d87c0 <__aeabi_dsub>
   d80d0:	4602      	mov	r2, r0
   d80d2:	460b      	mov	r3, r1
   d80d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d80d8:	f000 ffa2 	bl	d9020 <__aeabi_dcmple>
   d80dc:	2800      	cmp	r0, #0
   d80de:	f43f aee6 	beq.w	d7eae <__ieee754_pow+0x62e>
   d80e2:	a32f      	add	r3, pc, #188	; (adr r3, d81a0 <__ieee754_pow+0x920>)
   d80e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d80e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d80ec:	f000 fd1c 	bl	d8b28 <__aeabi_dmul>
   d80f0:	a32b      	add	r3, pc, #172	; (adr r3, d81a0 <__ieee754_pow+0x920>)
   d80f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d80f6:	f000 fd17 	bl	d8b28 <__aeabi_dmul>
   d80fa:	ec41 0b10 	vmov	d0, r0, r1
   d80fe:	e408      	b.n	d7912 <__ieee754_pow+0x92>
   d8100:	ed9f 7b29 	vldr	d7, [pc, #164]	; d81a8 <__ieee754_pow+0x928>
   d8104:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8108:	e676      	b.n	d7df8 <__ieee754_pow+0x578>
   d810a:	f1b9 0f00 	cmp.w	r9, #0
   d810e:	f6bf ac8e 	bge.w	d7a2e <__ieee754_pow+0x1ae>
   d8112:	e9dd 3400 	ldrd	r3, r4, [sp]
   d8116:	ee00 3a10 	vmov	s0, r3
   d811a:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d811e:	ee00 3a90 	vmov	s1, r3
   d8122:	f7ff bbf6 	b.w	d7912 <__ieee754_pow+0x92>
   d8126:	4602      	mov	r2, r0
   d8128:	460b      	mov	r3, r1
   d812a:	2000      	movs	r0, #0
   d812c:	4924      	ldr	r1, [pc, #144]	; (d81c0 <__ieee754_pow+0x940>)
   d812e:	f000 fe25 	bl	d8d7c <__aeabi_ddiv>
   d8132:	e42d      	b.n	d7990 <__ieee754_pow+0x110>
   d8134:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d81b0 <__ieee754_pow+0x930>
   d8138:	ed8d 7b08 	vstr	d7, [sp, #32]
   d813c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d8140:	ed9f 7b03 	vldr	d7, [pc, #12]	; d8150 <__ieee754_pow+0x8d0>
   d8144:	f04f 0800 	mov.w	r8, #0
   d8148:	ed8d 7b06 	vstr	d7, [sp, #24]
   d814c:	e4be      	b.n	d7acc <__ieee754_pow+0x24c>
   d814e:	bf00      	nop
   d8150:	00000000 	.word	0x00000000
   d8154:	3ff00000 	.word	0x3ff00000
   d8158:	652b82fe 	.word	0x652b82fe
   d815c:	3c971547 	.word	0x3c971547
   d8160:	00000000 	.word	0x00000000
   d8164:	3fe62e43 	.word	0x3fe62e43
   d8168:	fefa39ef 	.word	0xfefa39ef
   d816c:	3fe62e42 	.word	0x3fe62e42
   d8170:	0ca86c39 	.word	0x0ca86c39
   d8174:	be205c61 	.word	0xbe205c61
   d8178:	72bea4d0 	.word	0x72bea4d0
   d817c:	3e663769 	.word	0x3e663769
   d8180:	c5d26bf1 	.word	0xc5d26bf1
   d8184:	3ebbbd41 	.word	0x3ebbbd41
   d8188:	af25de2c 	.word	0xaf25de2c
   d818c:	3f11566a 	.word	0x3f11566a
   d8190:	16bebd93 	.word	0x16bebd93
   d8194:	3f66c16c 	.word	0x3f66c16c
   d8198:	5555553e 	.word	0x5555553e
   d819c:	3fc55555 	.word	0x3fc55555
   d81a0:	c2f8f359 	.word	0xc2f8f359
   d81a4:	01a56e1f 	.word	0x01a56e1f
   d81a8:	00000000 	.word	0x00000000
   d81ac:	bff00000 	.word	0xbff00000
	...
   d81b8:	408fffff 	.word	0x408fffff
   d81bc:	000fffff 	.word	0x000fffff
   d81c0:	3ff00000 	.word	0x3ff00000
   d81c4:	4090cbff 	.word	0x4090cbff
   d81c8:	3f6f3400 	.word	0x3f6f3400
   d81cc:	4b6c      	ldr	r3, [pc, #432]	; (d8380 <__ieee754_pow+0xb00>)
   d81ce:	429c      	cmp	r4, r3
   d81d0:	f77f ac2a 	ble.w	d7a28 <__ieee754_pow+0x1a8>
   d81d4:	4b6b      	ldr	r3, [pc, #428]	; (d8384 <__ieee754_pow+0xb04>)
   d81d6:	429c      	cmp	r4, r3
   d81d8:	f73f abc3 	bgt.w	d7962 <__ieee754_pow+0xe2>
   d81dc:	2200      	movs	r2, #0
   d81de:	4b69      	ldr	r3, [pc, #420]	; (d8384 <__ieee754_pow+0xb04>)
   d81e0:	f000 faee 	bl	d87c0 <__aeabi_dsub>
   d81e4:	a356      	add	r3, pc, #344	; (adr r3, d8340 <__ieee754_pow+0xac0>)
   d81e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d81ea:	4604      	mov	r4, r0
   d81ec:	460d      	mov	r5, r1
   d81ee:	f000 fc9b 	bl	d8b28 <__aeabi_dmul>
   d81f2:	a355      	add	r3, pc, #340	; (adr r3, d8348 <__ieee754_pow+0xac8>)
   d81f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d81f8:	4680      	mov	r8, r0
   d81fa:	4689      	mov	r9, r1
   d81fc:	4620      	mov	r0, r4
   d81fe:	4629      	mov	r1, r5
   d8200:	f000 fc92 	bl	d8b28 <__aeabi_dmul>
   d8204:	2200      	movs	r2, #0
   d8206:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d820a:	4b5f      	ldr	r3, [pc, #380]	; (d8388 <__ieee754_pow+0xb08>)
   d820c:	4620      	mov	r0, r4
   d820e:	4629      	mov	r1, r5
   d8210:	f000 fc8a 	bl	d8b28 <__aeabi_dmul>
   d8214:	4602      	mov	r2, r0
   d8216:	460b      	mov	r3, r1
   d8218:	a14d      	add	r1, pc, #308	; (adr r1, d8350 <__ieee754_pow+0xad0>)
   d821a:	e9d1 0100 	ldrd	r0, r1, [r1]
   d821e:	f000 facf 	bl	d87c0 <__aeabi_dsub>
   d8222:	4622      	mov	r2, r4
   d8224:	462b      	mov	r3, r5
   d8226:	f000 fc7f 	bl	d8b28 <__aeabi_dmul>
   d822a:	4602      	mov	r2, r0
   d822c:	460b      	mov	r3, r1
   d822e:	2000      	movs	r0, #0
   d8230:	4956      	ldr	r1, [pc, #344]	; (d838c <__ieee754_pow+0xb0c>)
   d8232:	f000 fac5 	bl	d87c0 <__aeabi_dsub>
   d8236:	4622      	mov	r2, r4
   d8238:	462b      	mov	r3, r5
   d823a:	4606      	mov	r6, r0
   d823c:	460f      	mov	r7, r1
   d823e:	4620      	mov	r0, r4
   d8240:	4629      	mov	r1, r5
   d8242:	f000 fc71 	bl	d8b28 <__aeabi_dmul>
   d8246:	4602      	mov	r2, r0
   d8248:	460b      	mov	r3, r1
   d824a:	4630      	mov	r0, r6
   d824c:	4639      	mov	r1, r7
   d824e:	f000 fc6b 	bl	d8b28 <__aeabi_dmul>
   d8252:	a341      	add	r3, pc, #260	; (adr r3, d8358 <__ieee754_pow+0xad8>)
   d8254:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8258:	f000 fc66 	bl	d8b28 <__aeabi_dmul>
   d825c:	4602      	mov	r2, r0
   d825e:	460b      	mov	r3, r1
   d8260:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d8264:	f000 faac 	bl	d87c0 <__aeabi_dsub>
   d8268:	4602      	mov	r2, r0
   d826a:	460b      	mov	r3, r1
   d826c:	4604      	mov	r4, r0
   d826e:	460d      	mov	r5, r1
   d8270:	4640      	mov	r0, r8
   d8272:	4649      	mov	r1, r9
   d8274:	f000 faa6 	bl	d87c4 <__adddf3>
   d8278:	4642      	mov	r2, r8
   d827a:	464b      	mov	r3, r9
   d827c:	2000      	movs	r0, #0
   d827e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d8282:	f000 fa9d 	bl	d87c0 <__aeabi_dsub>
   d8286:	4602      	mov	r2, r0
   d8288:	460b      	mov	r3, r1
   d828a:	4620      	mov	r0, r4
   d828c:	4629      	mov	r1, r5
   d828e:	f000 fa97 	bl	d87c0 <__aeabi_dsub>
   d8292:	4680      	mov	r8, r0
   d8294:	4689      	mov	r9, r1
   d8296:	e5a5      	b.n	d7de4 <__ieee754_pow+0x564>
   d8298:	4632      	mov	r2, r6
   d829a:	463b      	mov	r3, r7
   d829c:	2000      	movs	r0, #0
   d829e:	4939      	ldr	r1, [pc, #228]	; (d8384 <__ieee754_pow+0xb04>)
   d82a0:	f000 fd6c 	bl	d8d7c <__aeabi_ddiv>
   d82a4:	ec41 0b10 	vmov	d0, r0, r1
   d82a8:	f7ff bb33 	b.w	d7912 <__ieee754_pow+0x92>
   d82ac:	a32c      	add	r3, pc, #176	; (adr r3, d8360 <__ieee754_pow+0xae0>)
   d82ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d82b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d82b6:	f000 fc37 	bl	d8b28 <__aeabi_dmul>
   d82ba:	a329      	add	r3, pc, #164	; (adr r3, d8360 <__ieee754_pow+0xae0>)
   d82bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d82c0:	f000 fc32 	bl	d8b28 <__aeabi_dmul>
   d82c4:	ec41 0b10 	vmov	d0, r0, r1
   d82c8:	f7ff bb23 	b.w	d7912 <__ieee754_pow+0x92>
   d82cc:	f1be 0f00 	cmp.w	lr, #0
   d82d0:	f47f ab2a 	bne.w	d7928 <__ieee754_pow+0xa8>
   d82d4:	f1c3 0314 	rsb	r3, r3, #20
   d82d8:	fa48 f203 	asr.w	r2, r8, r3
   d82dc:	fa02 f303 	lsl.w	r3, r2, r3
   d82e0:	4598      	cmp	r8, r3
   d82e2:	d027      	beq.n	d8334 <__ieee754_pow+0xab4>
   d82e4:	46f3      	mov	fp, lr
   d82e6:	f7ff baf7 	b.w	d78d8 <__ieee754_pow+0x58>
   d82ea:	4b28      	ldr	r3, [pc, #160]	; (d838c <__ieee754_pow+0xb0c>)
   d82ec:	4598      	cmp	r8, r3
   d82ee:	f73f adde 	bgt.w	d7eae <__ieee754_pow+0x62e>
   d82f2:	e9dd 3400 	ldrd	r3, r4, [sp]
   d82f6:	469a      	mov	sl, r3
   d82f8:	469b      	mov	fp, r3
   d82fa:	e607      	b.n	d7f0c <__ieee754_pow+0x68c>
   d82fc:	4602      	mov	r2, r0
   d82fe:	460b      	mov	r3, r1
   d8300:	f7ff bb89 	b.w	d7a16 <__ieee754_pow+0x196>
   d8304:	ed9f 7b18 	vldr	d7, [pc, #96]	; d8368 <__ieee754_pow+0xae8>
   d8308:	ed8d 7b08 	vstr	d7, [sp, #32]
   d830c:	ed9f 7b18 	vldr	d7, [pc, #96]	; d8370 <__ieee754_pow+0xaf0>
   d8310:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d8314:	ed9f 7b18 	vldr	d7, [pc, #96]	; d8378 <__ieee754_pow+0xaf8>
   d8318:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   d831c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8320:	f7ff bbd4 	b.w	d7acc <__ieee754_pow+0x24c>
   d8324:	4658      	mov	r0, fp
   d8326:	ec43 2b10 	vmov	d0, r2, r3
   d832a:	f000 f9b1 	bl	d8690 <scalbn>
   d832e:	ec51 0b10 	vmov	r0, r1, d0
   d8332:	e69d      	b.n	d8070 <__ieee754_pow+0x7f0>
   d8334:	f002 0201 	and.w	r2, r2, #1
   d8338:	f1c2 0b02 	rsb	fp, r2, #2
   d833c:	f7ff bacc 	b.w	d78d8 <__ieee754_pow+0x58>
   d8340:	60000000 	.word	0x60000000
   d8344:	3ff71547 	.word	0x3ff71547
   d8348:	f85ddf44 	.word	0xf85ddf44
   d834c:	3e54ae0b 	.word	0x3e54ae0b
   d8350:	55555555 	.word	0x55555555
   d8354:	3fd55555 	.word	0x3fd55555
   d8358:	652b82fe 	.word	0x652b82fe
   d835c:	3ff71547 	.word	0x3ff71547
   d8360:	8800759c 	.word	0x8800759c
   d8364:	7e37e43c 	.word	0x7e37e43c
   d8368:	40000000 	.word	0x40000000
   d836c:	3fe2b803 	.word	0x3fe2b803
   d8370:	43cfd006 	.word	0x43cfd006
   d8374:	3e4cfdeb 	.word	0x3e4cfdeb
   d8378:	00000000 	.word	0x00000000
   d837c:	3ff80000 	.word	0x3ff80000
   d8380:	3feffffe 	.word	0x3feffffe
   d8384:	3ff00000 	.word	0x3ff00000
   d8388:	3fd00000 	.word	0x3fd00000
   d838c:	3fe00000 	.word	0x3fe00000

000d8390 <__ieee754_sqrt>:
   d8390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8394:	4965      	ldr	r1, [pc, #404]	; (d852c <__ieee754_sqrt+0x19c>)
   d8396:	ec55 4b10 	vmov	r4, r5, d0
   d839a:	460e      	mov	r6, r1
   d839c:	4029      	ands	r1, r5
   d839e:	42b1      	cmp	r1, r6
   d83a0:	f000 8097 	beq.w	d84d2 <__ieee754_sqrt+0x142>
   d83a4:	2d00      	cmp	r5, #0
   d83a6:	462b      	mov	r3, r5
   d83a8:	ee10 2a10 	vmov	r2, s0
   d83ac:	dd74      	ble.n	d8498 <__ieee754_sqrt+0x108>
   d83ae:	152f      	asrs	r7, r5, #20
   d83b0:	d07f      	beq.n	d84b2 <__ieee754_sqrt+0x122>
   d83b2:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d83b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d83ba:	07f9      	lsls	r1, r7, #31
   d83bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d83c0:	d465      	bmi.n	d848e <__ieee754_sqrt+0xfe>
   d83c2:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d83c6:	2600      	movs	r6, #0
   d83c8:	440b      	add	r3, r1
   d83ca:	107f      	asrs	r7, r7, #1
   d83cc:	0052      	lsls	r2, r2, #1
   d83ce:	46b6      	mov	lr, r6
   d83d0:	2016      	movs	r0, #22
   d83d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d83d6:	eb0e 0401 	add.w	r4, lr, r1
   d83da:	429c      	cmp	r4, r3
   d83dc:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d83e0:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d83e4:	dc03      	bgt.n	d83ee <__ieee754_sqrt+0x5e>
   d83e6:	1b1b      	subs	r3, r3, r4
   d83e8:	eb04 0e01 	add.w	lr, r4, r1
   d83ec:	440e      	add	r6, r1
   d83ee:	3801      	subs	r0, #1
   d83f0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d83f4:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d83f8:	d1ed      	bne.n	d83d6 <__ieee754_sqrt+0x46>
   d83fa:	4684      	mov	ip, r0
   d83fc:	2420      	movs	r4, #32
   d83fe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d8402:	e009      	b.n	d8418 <__ieee754_sqrt+0x88>
   d8404:	d020      	beq.n	d8448 <__ieee754_sqrt+0xb8>
   d8406:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d840a:	3c01      	subs	r4, #1
   d840c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d8410:	442b      	add	r3, r5
   d8412:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d8416:	d020      	beq.n	d845a <__ieee754_sqrt+0xca>
   d8418:	459e      	cmp	lr, r3
   d841a:	eb01 050c 	add.w	r5, r1, ip
   d841e:	daf1      	bge.n	d8404 <__ieee754_sqrt+0x74>
   d8420:	2d00      	cmp	r5, #0
   d8422:	eb05 0c01 	add.w	ip, r5, r1
   d8426:	db09      	blt.n	d843c <__ieee754_sqrt+0xac>
   d8428:	46f0      	mov	r8, lr
   d842a:	4295      	cmp	r5, r2
   d842c:	ebce 0303 	rsb	r3, lr, r3
   d8430:	d900      	bls.n	d8434 <__ieee754_sqrt+0xa4>
   d8432:	3b01      	subs	r3, #1
   d8434:	1b52      	subs	r2, r2, r5
   d8436:	4408      	add	r0, r1
   d8438:	46c6      	mov	lr, r8
   d843a:	e7e4      	b.n	d8406 <__ieee754_sqrt+0x76>
   d843c:	f1bc 0f00 	cmp.w	ip, #0
   d8440:	dbf2      	blt.n	d8428 <__ieee754_sqrt+0x98>
   d8442:	f10e 0801 	add.w	r8, lr, #1
   d8446:	e7f0      	b.n	d842a <__ieee754_sqrt+0x9a>
   d8448:	4295      	cmp	r5, r2
   d844a:	d81e      	bhi.n	d848a <__ieee754_sqrt+0xfa>
   d844c:	2d00      	cmp	r5, #0
   d844e:	eb05 0c01 	add.w	ip, r5, r1
   d8452:	db50      	blt.n	d84f6 <__ieee754_sqrt+0x166>
   d8454:	4698      	mov	r8, r3
   d8456:	2300      	movs	r3, #0
   d8458:	e7ec      	b.n	d8434 <__ieee754_sqrt+0xa4>
   d845a:	4313      	orrs	r3, r2
   d845c:	d004      	beq.n	d8468 <__ieee754_sqrt+0xd8>
   d845e:	1c42      	adds	r2, r0, #1
   d8460:	d04d      	beq.n	d84fe <__ieee754_sqrt+0x16e>
   d8462:	f000 0301 	and.w	r3, r0, #1
   d8466:	4418      	add	r0, r3
   d8468:	0840      	lsrs	r0, r0, #1
   d846a:	1071      	asrs	r1, r6, #1
   d846c:	07f3      	lsls	r3, r6, #31
   d846e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d8472:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d8476:	bf48      	it	mi
   d8478:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d847c:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d8480:	4602      	mov	r2, r0
   d8482:	ec43 2b10 	vmov	d0, r2, r3
   d8486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d848a:	4673      	mov	r3, lr
   d848c:	e7bb      	b.n	d8406 <__ieee754_sqrt+0x76>
   d848e:	005b      	lsls	r3, r3, #1
   d8490:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d8494:	0052      	lsls	r2, r2, #1
   d8496:	e794      	b.n	d83c2 <__ieee754_sqrt+0x32>
   d8498:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d849c:	4321      	orrs	r1, r4
   d849e:	d028      	beq.n	d84f2 <__ieee754_sqrt+0x162>
   d84a0:	bbad      	cbnz	r5, d850e <__ieee754_sqrt+0x17e>
   d84a2:	462f      	mov	r7, r5
   d84a4:	0ad3      	lsrs	r3, r2, #11
   d84a6:	3f15      	subs	r7, #21
   d84a8:	0552      	lsls	r2, r2, #21
   d84aa:	2b00      	cmp	r3, #0
   d84ac:	d0fa      	beq.n	d84a4 <__ieee754_sqrt+0x114>
   d84ae:	02dd      	lsls	r5, r3, #11
   d84b0:	d428      	bmi.n	d8504 <__ieee754_sqrt+0x174>
   d84b2:	2100      	movs	r1, #0
   d84b4:	e000      	b.n	d84b8 <__ieee754_sqrt+0x128>
   d84b6:	4601      	mov	r1, r0
   d84b8:	005b      	lsls	r3, r3, #1
   d84ba:	02dc      	lsls	r4, r3, #11
   d84bc:	f101 0001 	add.w	r0, r1, #1
   d84c0:	d5f9      	bpl.n	d84b6 <__ieee754_sqrt+0x126>
   d84c2:	f1c0 0420 	rsb	r4, r0, #32
   d84c6:	fa22 f404 	lsr.w	r4, r2, r4
   d84ca:	4323      	orrs	r3, r4
   d84cc:	1a7f      	subs	r7, r7, r1
   d84ce:	4082      	lsls	r2, r0
   d84d0:	e76f      	b.n	d83b2 <__ieee754_sqrt+0x22>
   d84d2:	ee10 2a10 	vmov	r2, s0
   d84d6:	462b      	mov	r3, r5
   d84d8:	ee10 0a10 	vmov	r0, s0
   d84dc:	4629      	mov	r1, r5
   d84de:	f000 fb23 	bl	d8b28 <__aeabi_dmul>
   d84e2:	4622      	mov	r2, r4
   d84e4:	462b      	mov	r3, r5
   d84e6:	f000 f96d 	bl	d87c4 <__adddf3>
   d84ea:	ec41 0b10 	vmov	d0, r0, r1
   d84ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d84f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d84f6:	f1bc 0f00 	cmp.w	ip, #0
   d84fa:	daa2      	bge.n	d8442 <__ieee754_sqrt+0xb2>
   d84fc:	e7aa      	b.n	d8454 <__ieee754_sqrt+0xc4>
   d84fe:	3601      	adds	r6, #1
   d8500:	4620      	mov	r0, r4
   d8502:	e7b2      	b.n	d846a <__ieee754_sqrt+0xda>
   d8504:	2420      	movs	r4, #32
   d8506:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d850a:	2000      	movs	r0, #0
   d850c:	e7db      	b.n	d84c6 <__ieee754_sqrt+0x136>
   d850e:	ee10 2a10 	vmov	r2, s0
   d8512:	462b      	mov	r3, r5
   d8514:	4620      	mov	r0, r4
   d8516:	4629      	mov	r1, r5
   d8518:	f000 f952 	bl	d87c0 <__aeabi_dsub>
   d851c:	4602      	mov	r2, r0
   d851e:	460b      	mov	r3, r1
   d8520:	f000 fc2c 	bl	d8d7c <__aeabi_ddiv>
   d8524:	ec41 0b10 	vmov	d0, r0, r1
   d8528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d852c:	7ff00000 	.word	0x7ff00000

000d8530 <fabs>:
   d8530:	ec53 2b10 	vmov	r2, r3, d0
   d8534:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d8538:	ec43 2b10 	vmov	d0, r2, r3
   d853c:	4770      	bx	lr
   d853e:	bf00      	nop

000d8540 <finite>:
   d8540:	ee10 3a90 	vmov	r3, s1
   d8544:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   d8548:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d854c:	0fc0      	lsrs	r0, r0, #31
   d854e:	4770      	bx	lr

000d8550 <matherr>:
   d8550:	2000      	movs	r0, #0
   d8552:	4770      	bx	lr
   d8554:	0000      	movs	r0, r0
	...

000d8558 <nan>:
   d8558:	ed9f 0b01 	vldr	d0, [pc, #4]	; d8560 <nan+0x8>
   d855c:	4770      	bx	lr
   d855e:	bf00      	nop
   d8560:	00000000 	.word	0x00000000
   d8564:	7ff80000 	.word	0x7ff80000

000d8568 <rint>:
   d8568:	b5f0      	push	{r4, r5, r6, r7, lr}
   d856a:	ec53 2b10 	vmov	r2, r3, d0
   d856e:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d8572:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d8576:	2813      	cmp	r0, #19
   d8578:	b083      	sub	sp, #12
   d857a:	4619      	mov	r1, r3
   d857c:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d8580:	ee10 5a10 	vmov	r5, s0
   d8584:	dc2f      	bgt.n	d85e6 <rint+0x7e>
   d8586:	2800      	cmp	r0, #0
   d8588:	db49      	blt.n	d861e <rint+0xb6>
   d858a:	4e3f      	ldr	r6, [pc, #252]	; (d8688 <rint+0x120>)
   d858c:	4106      	asrs	r6, r0
   d858e:	ea03 0706 	and.w	r7, r3, r6
   d8592:	4317      	orrs	r7, r2
   d8594:	d02c      	beq.n	d85f0 <rint+0x88>
   d8596:	0876      	lsrs	r6, r6, #1
   d8598:	4033      	ands	r3, r6
   d859a:	431d      	orrs	r5, r3
   d859c:	d00c      	beq.n	d85b8 <rint+0x50>
   d859e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d85a2:	2813      	cmp	r0, #19
   d85a4:	ea21 0606 	bic.w	r6, r1, r6
   d85a8:	fa43 f100 	asr.w	r1, r3, r0
   d85ac:	ea41 0106 	orr.w	r1, r1, r6
   d85b0:	bf0c      	ite	eq
   d85b2:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d85b6:	2500      	movne	r5, #0
   d85b8:	4834      	ldr	r0, [pc, #208]	; (d868c <rint+0x124>)
   d85ba:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d85be:	462a      	mov	r2, r5
   d85c0:	e9d4 4500 	ldrd	r4, r5, [r4]
   d85c4:	4610      	mov	r0, r2
   d85c6:	462b      	mov	r3, r5
   d85c8:	4622      	mov	r2, r4
   d85ca:	f000 f8fb 	bl	d87c4 <__adddf3>
   d85ce:	e9cd 0100 	strd	r0, r1, [sp]
   d85d2:	4622      	mov	r2, r4
   d85d4:	462b      	mov	r3, r5
   d85d6:	e9dd 0100 	ldrd	r0, r1, [sp]
   d85da:	f000 f8f1 	bl	d87c0 <__aeabi_dsub>
   d85de:	ec41 0b10 	vmov	d0, r0, r1
   d85e2:	b003      	add	sp, #12
   d85e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d85e6:	2833      	cmp	r0, #51	; 0x33
   d85e8:	dd06      	ble.n	d85f8 <rint+0x90>
   d85ea:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d85ee:	d042      	beq.n	d8676 <rint+0x10e>
   d85f0:	ec43 2b10 	vmov	d0, r2, r3
   d85f4:	b003      	add	sp, #12
   d85f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d85f8:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d85fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8600:	40f0      	lsrs	r0, r6
   d8602:	4202      	tst	r2, r0
   d8604:	d0f4      	beq.n	d85f0 <rint+0x88>
   d8606:	0840      	lsrs	r0, r0, #1
   d8608:	4202      	tst	r2, r0
   d860a:	d0d5      	beq.n	d85b8 <rint+0x50>
   d860c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d8610:	ea25 0000 	bic.w	r0, r5, r0
   d8614:	fa43 f606 	asr.w	r6, r3, r6
   d8618:	ea46 0500 	orr.w	r5, r6, r0
   d861c:	e7cc      	b.n	d85b8 <rint+0x50>
   d861e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d8622:	4310      	orrs	r0, r2
   d8624:	ee10 7a10 	vmov	r7, s0
   d8628:	d0e2      	beq.n	d85f0 <rint+0x88>
   d862a:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d862e:	4307      	orrs	r7, r0
   d8630:	4278      	negs	r0, r7
   d8632:	4307      	orrs	r7, r0
   d8634:	4815      	ldr	r0, [pc, #84]	; (d868c <rint+0x124>)
   d8636:	0c59      	lsrs	r1, r3, #17
   d8638:	0b3f      	lsrs	r7, r7, #12
   d863a:	0449      	lsls	r1, r1, #17
   d863c:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   d8640:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d8644:	ea47 0301 	orr.w	r3, r7, r1
   d8648:	e9d0 6700 	ldrd	r6, r7, [r0]
   d864c:	4619      	mov	r1, r3
   d864e:	4610      	mov	r0, r2
   d8650:	463b      	mov	r3, r7
   d8652:	4632      	mov	r2, r6
   d8654:	f000 f8b6 	bl	d87c4 <__adddf3>
   d8658:	e9cd 0100 	strd	r0, r1, [sp]
   d865c:	463b      	mov	r3, r7
   d865e:	4632      	mov	r2, r6
   d8660:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8664:	f000 f8ac 	bl	d87c0 <__aeabi_dsub>
   d8668:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d866c:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d8670:	ec41 0b10 	vmov	d0, r0, r1
   d8674:	e7be      	b.n	d85f4 <rint+0x8c>
   d8676:	ee10 0a10 	vmov	r0, s0
   d867a:	4619      	mov	r1, r3
   d867c:	f000 f8a2 	bl	d87c4 <__adddf3>
   d8680:	ec41 0b10 	vmov	d0, r0, r1
   d8684:	e7b6      	b.n	d85f4 <rint+0x8c>
   d8686:	bf00      	nop
   d8688:	000fffff 	.word	0x000fffff
   d868c:	000d9998 	.word	0x000d9998

000d8690 <scalbn>:
   d8690:	ec53 2b10 	vmov	r2, r3, d0
   d8694:	b570      	push	{r4, r5, r6, lr}
   d8696:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d869a:	4619      	mov	r1, r3
   d869c:	4605      	mov	r5, r0
   d869e:	bb14      	cbnz	r4, d86e6 <scalbn+0x56>
   d86a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d86a4:	4311      	orrs	r1, r2
   d86a6:	d02a      	beq.n	d86fe <scalbn+0x6e>
   d86a8:	4619      	mov	r1, r3
   d86aa:	2200      	movs	r2, #0
   d86ac:	4b38      	ldr	r3, [pc, #224]	; (d8790 <scalbn+0x100>)
   d86ae:	4e39      	ldr	r6, [pc, #228]	; (d8794 <scalbn+0x104>)
   d86b0:	ee10 0a10 	vmov	r0, s0
   d86b4:	f000 fa38 	bl	d8b28 <__aeabi_dmul>
   d86b8:	42b5      	cmp	r5, r6
   d86ba:	4602      	mov	r2, r0
   d86bc:	460b      	mov	r3, r1
   d86be:	db1f      	blt.n	d8700 <scalbn+0x70>
   d86c0:	f3c1 540a 	ubfx	r4, r1, #20, #11
   d86c4:	3c36      	subs	r4, #54	; 0x36
   d86c6:	442c      	add	r4, r5
   d86c8:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d86cc:	4284      	cmp	r4, r0
   d86ce:	dc1f      	bgt.n	d8710 <scalbn+0x80>
   d86d0:	2c00      	cmp	r4, #0
   d86d2:	dd2d      	ble.n	d8730 <scalbn+0xa0>
   d86d4:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d86d8:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d86dc:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d86e0:	ec43 2b10 	vmov	d0, r2, r3
   d86e4:	bd70      	pop	{r4, r5, r6, pc}
   d86e6:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d86ea:	4284      	cmp	r4, r0
   d86ec:	d1eb      	bne.n	d86c6 <scalbn+0x36>
   d86ee:	ee10 0a10 	vmov	r0, s0
   d86f2:	4619      	mov	r1, r3
   d86f4:	f000 f866 	bl	d87c4 <__adddf3>
   d86f8:	ec41 0b10 	vmov	d0, r0, r1
   d86fc:	bd70      	pop	{r4, r5, r6, pc}
   d86fe:	bd70      	pop	{r4, r5, r6, pc}
   d8700:	a31f      	add	r3, pc, #124	; (adr r3, d8780 <scalbn+0xf0>)
   d8702:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8706:	f000 fa0f 	bl	d8b28 <__aeabi_dmul>
   d870a:	ec41 0b10 	vmov	d0, r0, r1
   d870e:	bd70      	pop	{r4, r5, r6, pc}
   d8710:	ec43 2b11 	vmov	d1, r2, r3
   d8714:	ed9f 0b1c 	vldr	d0, [pc, #112]	; d8788 <scalbn+0xf8>
   d8718:	f000 f840 	bl	d879c <copysign>
   d871c:	a31a      	add	r3, pc, #104	; (adr r3, d8788 <scalbn+0xf8>)
   d871e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8722:	ec51 0b10 	vmov	r0, r1, d0
   d8726:	f000 f9ff 	bl	d8b28 <__aeabi_dmul>
   d872a:	ec41 0b10 	vmov	d0, r0, r1
   d872e:	bd70      	pop	{r4, r5, r6, pc}
   d8730:	f114 0f35 	cmn.w	r4, #53	; 0x35
   d8734:	da13      	bge.n	d875e <scalbn+0xce>
   d8736:	f24c 3150 	movw	r1, #50000	; 0xc350
   d873a:	428d      	cmp	r5, r1
   d873c:	ec43 2b11 	vmov	d1, r2, r3
   d8740:	dce8      	bgt.n	d8714 <scalbn+0x84>
   d8742:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d8780 <scalbn+0xf0>
   d8746:	f000 f829 	bl	d879c <copysign>
   d874a:	a30d      	add	r3, pc, #52	; (adr r3, d8780 <scalbn+0xf0>)
   d874c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8750:	ec51 0b10 	vmov	r0, r1, d0
   d8754:	f000 f9e8 	bl	d8b28 <__aeabi_dmul>
   d8758:	ec41 0b10 	vmov	d0, r0, r1
   d875c:	bd70      	pop	{r4, r5, r6, pc}
   d875e:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d8762:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d8766:	3436      	adds	r4, #54	; 0x36
   d8768:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d876c:	4610      	mov	r0, r2
   d876e:	4619      	mov	r1, r3
   d8770:	2200      	movs	r2, #0
   d8772:	4b09      	ldr	r3, [pc, #36]	; (d8798 <scalbn+0x108>)
   d8774:	f000 f9d8 	bl	d8b28 <__aeabi_dmul>
   d8778:	ec41 0b10 	vmov	d0, r0, r1
   d877c:	bd70      	pop	{r4, r5, r6, pc}
   d877e:	bf00      	nop
   d8780:	c2f8f359 	.word	0xc2f8f359
   d8784:	01a56e1f 	.word	0x01a56e1f
   d8788:	8800759c 	.word	0x8800759c
   d878c:	7e37e43c 	.word	0x7e37e43c
   d8790:	43500000 	.word	0x43500000
   d8794:	ffff3cb0 	.word	0xffff3cb0
   d8798:	3c900000 	.word	0x3c900000

000d879c <copysign>:
   d879c:	ec53 2b10 	vmov	r2, r3, d0
   d87a0:	ee11 0a90 	vmov	r0, s3
   d87a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d87a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   d87ac:	ea41 0300 	orr.w	r3, r1, r0
   d87b0:	ec43 2b10 	vmov	d0, r2, r3
   d87b4:	4770      	bx	lr
   d87b6:	bf00      	nop

000d87b8 <__aeabi_drsub>:
   d87b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d87bc:	e002      	b.n	d87c4 <__adddf3>
   d87be:	bf00      	nop

000d87c0 <__aeabi_dsub>:
   d87c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d87c4 <__adddf3>:
   d87c4:	b530      	push	{r4, r5, lr}
   d87c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d87ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d87ce:	ea94 0f05 	teq	r4, r5
   d87d2:	bf08      	it	eq
   d87d4:	ea90 0f02 	teqeq	r0, r2
   d87d8:	bf1f      	itttt	ne
   d87da:	ea54 0c00 	orrsne.w	ip, r4, r0
   d87de:	ea55 0c02 	orrsne.w	ip, r5, r2
   d87e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d87e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d87ea:	f000 80e2 	beq.w	d89b2 <__adddf3+0x1ee>
   d87ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d87f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d87f6:	bfb8      	it	lt
   d87f8:	426d      	neglt	r5, r5
   d87fa:	dd0c      	ble.n	d8816 <__adddf3+0x52>
   d87fc:	442c      	add	r4, r5
   d87fe:	ea80 0202 	eor.w	r2, r0, r2
   d8802:	ea81 0303 	eor.w	r3, r1, r3
   d8806:	ea82 0000 	eor.w	r0, r2, r0
   d880a:	ea83 0101 	eor.w	r1, r3, r1
   d880e:	ea80 0202 	eor.w	r2, r0, r2
   d8812:	ea81 0303 	eor.w	r3, r1, r3
   d8816:	2d36      	cmp	r5, #54	; 0x36
   d8818:	bf88      	it	hi
   d881a:	bd30      	pophi	{r4, r5, pc}
   d881c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8820:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8824:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8828:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d882c:	d002      	beq.n	d8834 <__adddf3+0x70>
   d882e:	4240      	negs	r0, r0
   d8830:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8834:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8838:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d883c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8840:	d002      	beq.n	d8848 <__adddf3+0x84>
   d8842:	4252      	negs	r2, r2
   d8844:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8848:	ea94 0f05 	teq	r4, r5
   d884c:	f000 80a7 	beq.w	d899e <__adddf3+0x1da>
   d8850:	f1a4 0401 	sub.w	r4, r4, #1
   d8854:	f1d5 0e20 	rsbs	lr, r5, #32
   d8858:	db0d      	blt.n	d8876 <__adddf3+0xb2>
   d885a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d885e:	fa22 f205 	lsr.w	r2, r2, r5
   d8862:	1880      	adds	r0, r0, r2
   d8864:	f141 0100 	adc.w	r1, r1, #0
   d8868:	fa03 f20e 	lsl.w	r2, r3, lr
   d886c:	1880      	adds	r0, r0, r2
   d886e:	fa43 f305 	asr.w	r3, r3, r5
   d8872:	4159      	adcs	r1, r3
   d8874:	e00e      	b.n	d8894 <__adddf3+0xd0>
   d8876:	f1a5 0520 	sub.w	r5, r5, #32
   d887a:	f10e 0e20 	add.w	lr, lr, #32
   d887e:	2a01      	cmp	r2, #1
   d8880:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8884:	bf28      	it	cs
   d8886:	f04c 0c02 	orrcs.w	ip, ip, #2
   d888a:	fa43 f305 	asr.w	r3, r3, r5
   d888e:	18c0      	adds	r0, r0, r3
   d8890:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8894:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8898:	d507      	bpl.n	d88aa <__adddf3+0xe6>
   d889a:	f04f 0e00 	mov.w	lr, #0
   d889e:	f1dc 0c00 	rsbs	ip, ip, #0
   d88a2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d88a6:	eb6e 0101 	sbc.w	r1, lr, r1
   d88aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d88ae:	d31b      	bcc.n	d88e8 <__adddf3+0x124>
   d88b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d88b4:	d30c      	bcc.n	d88d0 <__adddf3+0x10c>
   d88b6:	0849      	lsrs	r1, r1, #1
   d88b8:	ea5f 0030 	movs.w	r0, r0, rrx
   d88bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d88c0:	f104 0401 	add.w	r4, r4, #1
   d88c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d88c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d88cc:	f080 809a 	bcs.w	d8a04 <__adddf3+0x240>
   d88d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d88d4:	bf08      	it	eq
   d88d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d88da:	f150 0000 	adcs.w	r0, r0, #0
   d88de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d88e2:	ea41 0105 	orr.w	r1, r1, r5
   d88e6:	bd30      	pop	{r4, r5, pc}
   d88e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d88ec:	4140      	adcs	r0, r0
   d88ee:	eb41 0101 	adc.w	r1, r1, r1
   d88f2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d88f6:	f1a4 0401 	sub.w	r4, r4, #1
   d88fa:	d1e9      	bne.n	d88d0 <__adddf3+0x10c>
   d88fc:	f091 0f00 	teq	r1, #0
   d8900:	bf04      	itt	eq
   d8902:	4601      	moveq	r1, r0
   d8904:	2000      	moveq	r0, #0
   d8906:	fab1 f381 	clz	r3, r1
   d890a:	bf08      	it	eq
   d890c:	3320      	addeq	r3, #32
   d890e:	f1a3 030b 	sub.w	r3, r3, #11
   d8912:	f1b3 0220 	subs.w	r2, r3, #32
   d8916:	da0c      	bge.n	d8932 <__adddf3+0x16e>
   d8918:	320c      	adds	r2, #12
   d891a:	dd08      	ble.n	d892e <__adddf3+0x16a>
   d891c:	f102 0c14 	add.w	ip, r2, #20
   d8920:	f1c2 020c 	rsb	r2, r2, #12
   d8924:	fa01 f00c 	lsl.w	r0, r1, ip
   d8928:	fa21 f102 	lsr.w	r1, r1, r2
   d892c:	e00c      	b.n	d8948 <__adddf3+0x184>
   d892e:	f102 0214 	add.w	r2, r2, #20
   d8932:	bfd8      	it	le
   d8934:	f1c2 0c20 	rsble	ip, r2, #32
   d8938:	fa01 f102 	lsl.w	r1, r1, r2
   d893c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8940:	bfdc      	itt	le
   d8942:	ea41 010c 	orrle.w	r1, r1, ip
   d8946:	4090      	lslle	r0, r2
   d8948:	1ae4      	subs	r4, r4, r3
   d894a:	bfa2      	ittt	ge
   d894c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8950:	4329      	orrge	r1, r5
   d8952:	bd30      	popge	{r4, r5, pc}
   d8954:	ea6f 0404 	mvn.w	r4, r4
   d8958:	3c1f      	subs	r4, #31
   d895a:	da1c      	bge.n	d8996 <__adddf3+0x1d2>
   d895c:	340c      	adds	r4, #12
   d895e:	dc0e      	bgt.n	d897e <__adddf3+0x1ba>
   d8960:	f104 0414 	add.w	r4, r4, #20
   d8964:	f1c4 0220 	rsb	r2, r4, #32
   d8968:	fa20 f004 	lsr.w	r0, r0, r4
   d896c:	fa01 f302 	lsl.w	r3, r1, r2
   d8970:	ea40 0003 	orr.w	r0, r0, r3
   d8974:	fa21 f304 	lsr.w	r3, r1, r4
   d8978:	ea45 0103 	orr.w	r1, r5, r3
   d897c:	bd30      	pop	{r4, r5, pc}
   d897e:	f1c4 040c 	rsb	r4, r4, #12
   d8982:	f1c4 0220 	rsb	r2, r4, #32
   d8986:	fa20 f002 	lsr.w	r0, r0, r2
   d898a:	fa01 f304 	lsl.w	r3, r1, r4
   d898e:	ea40 0003 	orr.w	r0, r0, r3
   d8992:	4629      	mov	r1, r5
   d8994:	bd30      	pop	{r4, r5, pc}
   d8996:	fa21 f004 	lsr.w	r0, r1, r4
   d899a:	4629      	mov	r1, r5
   d899c:	bd30      	pop	{r4, r5, pc}
   d899e:	f094 0f00 	teq	r4, #0
   d89a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d89a6:	bf06      	itte	eq
   d89a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d89ac:	3401      	addeq	r4, #1
   d89ae:	3d01      	subne	r5, #1
   d89b0:	e74e      	b.n	d8850 <__adddf3+0x8c>
   d89b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d89b6:	bf18      	it	ne
   d89b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d89bc:	d029      	beq.n	d8a12 <__adddf3+0x24e>
   d89be:	ea94 0f05 	teq	r4, r5
   d89c2:	bf08      	it	eq
   d89c4:	ea90 0f02 	teqeq	r0, r2
   d89c8:	d005      	beq.n	d89d6 <__adddf3+0x212>
   d89ca:	ea54 0c00 	orrs.w	ip, r4, r0
   d89ce:	bf04      	itt	eq
   d89d0:	4619      	moveq	r1, r3
   d89d2:	4610      	moveq	r0, r2
   d89d4:	bd30      	pop	{r4, r5, pc}
   d89d6:	ea91 0f03 	teq	r1, r3
   d89da:	bf1e      	ittt	ne
   d89dc:	2100      	movne	r1, #0
   d89de:	2000      	movne	r0, #0
   d89e0:	bd30      	popne	{r4, r5, pc}
   d89e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d89e6:	d105      	bne.n	d89f4 <__adddf3+0x230>
   d89e8:	0040      	lsls	r0, r0, #1
   d89ea:	4149      	adcs	r1, r1
   d89ec:	bf28      	it	cs
   d89ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d89f2:	bd30      	pop	{r4, r5, pc}
   d89f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d89f8:	bf3c      	itt	cc
   d89fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d89fe:	bd30      	popcc	{r4, r5, pc}
   d8a00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8a04:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8a08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8a0c:	f04f 0000 	mov.w	r0, #0
   d8a10:	bd30      	pop	{r4, r5, pc}
   d8a12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8a16:	bf1a      	itte	ne
   d8a18:	4619      	movne	r1, r3
   d8a1a:	4610      	movne	r0, r2
   d8a1c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8a20:	bf1c      	itt	ne
   d8a22:	460b      	movne	r3, r1
   d8a24:	4602      	movne	r2, r0
   d8a26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8a2a:	bf06      	itte	eq
   d8a2c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8a30:	ea91 0f03 	teqeq	r1, r3
   d8a34:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8a38:	bd30      	pop	{r4, r5, pc}
   d8a3a:	bf00      	nop

000d8a3c <__aeabi_ui2d>:
   d8a3c:	f090 0f00 	teq	r0, #0
   d8a40:	bf04      	itt	eq
   d8a42:	2100      	moveq	r1, #0
   d8a44:	4770      	bxeq	lr
   d8a46:	b530      	push	{r4, r5, lr}
   d8a48:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8a4c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8a50:	f04f 0500 	mov.w	r5, #0
   d8a54:	f04f 0100 	mov.w	r1, #0
   d8a58:	e750      	b.n	d88fc <__adddf3+0x138>
   d8a5a:	bf00      	nop

000d8a5c <__aeabi_i2d>:
   d8a5c:	f090 0f00 	teq	r0, #0
   d8a60:	bf04      	itt	eq
   d8a62:	2100      	moveq	r1, #0
   d8a64:	4770      	bxeq	lr
   d8a66:	b530      	push	{r4, r5, lr}
   d8a68:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8a6c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8a70:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8a74:	bf48      	it	mi
   d8a76:	4240      	negmi	r0, r0
   d8a78:	f04f 0100 	mov.w	r1, #0
   d8a7c:	e73e      	b.n	d88fc <__adddf3+0x138>
   d8a7e:	bf00      	nop

000d8a80 <__aeabi_f2d>:
   d8a80:	0042      	lsls	r2, r0, #1
   d8a82:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8a86:	ea4f 0131 	mov.w	r1, r1, rrx
   d8a8a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8a8e:	bf1f      	itttt	ne
   d8a90:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8a94:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8a98:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8a9c:	4770      	bxne	lr
   d8a9e:	f092 0f00 	teq	r2, #0
   d8aa2:	bf14      	ite	ne
   d8aa4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8aa8:	4770      	bxeq	lr
   d8aaa:	b530      	push	{r4, r5, lr}
   d8aac:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8ab0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8ab4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8ab8:	e720      	b.n	d88fc <__adddf3+0x138>
   d8aba:	bf00      	nop

000d8abc <__aeabi_ul2d>:
   d8abc:	ea50 0201 	orrs.w	r2, r0, r1
   d8ac0:	bf08      	it	eq
   d8ac2:	4770      	bxeq	lr
   d8ac4:	b530      	push	{r4, r5, lr}
   d8ac6:	f04f 0500 	mov.w	r5, #0
   d8aca:	e00a      	b.n	d8ae2 <__aeabi_l2d+0x16>

000d8acc <__aeabi_l2d>:
   d8acc:	ea50 0201 	orrs.w	r2, r0, r1
   d8ad0:	bf08      	it	eq
   d8ad2:	4770      	bxeq	lr
   d8ad4:	b530      	push	{r4, r5, lr}
   d8ad6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8ada:	d502      	bpl.n	d8ae2 <__aeabi_l2d+0x16>
   d8adc:	4240      	negs	r0, r0
   d8ade:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8ae2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8ae6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8aea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8aee:	f43f aedc 	beq.w	d88aa <__adddf3+0xe6>
   d8af2:	f04f 0203 	mov.w	r2, #3
   d8af6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8afa:	bf18      	it	ne
   d8afc:	3203      	addne	r2, #3
   d8afe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8b02:	bf18      	it	ne
   d8b04:	3203      	addne	r2, #3
   d8b06:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8b0a:	f1c2 0320 	rsb	r3, r2, #32
   d8b0e:	fa00 fc03 	lsl.w	ip, r0, r3
   d8b12:	fa20 f002 	lsr.w	r0, r0, r2
   d8b16:	fa01 fe03 	lsl.w	lr, r1, r3
   d8b1a:	ea40 000e 	orr.w	r0, r0, lr
   d8b1e:	fa21 f102 	lsr.w	r1, r1, r2
   d8b22:	4414      	add	r4, r2
   d8b24:	e6c1      	b.n	d88aa <__adddf3+0xe6>
   d8b26:	bf00      	nop

000d8b28 <__aeabi_dmul>:
   d8b28:	b570      	push	{r4, r5, r6, lr}
   d8b2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8b2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8b32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8b36:	bf1d      	ittte	ne
   d8b38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8b3c:	ea94 0f0c 	teqne	r4, ip
   d8b40:	ea95 0f0c 	teqne	r5, ip
   d8b44:	f000 f8de 	bleq	d8d04 <__aeabi_dmul+0x1dc>
   d8b48:	442c      	add	r4, r5
   d8b4a:	ea81 0603 	eor.w	r6, r1, r3
   d8b4e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8b52:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8b56:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8b5a:	bf18      	it	ne
   d8b5c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8b60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8b64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8b68:	d038      	beq.n	d8bdc <__aeabi_dmul+0xb4>
   d8b6a:	fba0 ce02 	umull	ip, lr, r0, r2
   d8b6e:	f04f 0500 	mov.w	r5, #0
   d8b72:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8b76:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8b7a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8b7e:	f04f 0600 	mov.w	r6, #0
   d8b82:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8b86:	f09c 0f00 	teq	ip, #0
   d8b8a:	bf18      	it	ne
   d8b8c:	f04e 0e01 	orrne.w	lr, lr, #1
   d8b90:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8b94:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8b98:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8b9c:	d204      	bcs.n	d8ba8 <__aeabi_dmul+0x80>
   d8b9e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8ba2:	416d      	adcs	r5, r5
   d8ba4:	eb46 0606 	adc.w	r6, r6, r6
   d8ba8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8bac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8bb0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8bb4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8bb8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8bbc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8bc0:	bf88      	it	hi
   d8bc2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8bc6:	d81e      	bhi.n	d8c06 <__aeabi_dmul+0xde>
   d8bc8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8bcc:	bf08      	it	eq
   d8bce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8bd2:	f150 0000 	adcs.w	r0, r0, #0
   d8bd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8bda:	bd70      	pop	{r4, r5, r6, pc}
   d8bdc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8be0:	ea46 0101 	orr.w	r1, r6, r1
   d8be4:	ea40 0002 	orr.w	r0, r0, r2
   d8be8:	ea81 0103 	eor.w	r1, r1, r3
   d8bec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8bf0:	bfc2      	ittt	gt
   d8bf2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8bf6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8bfa:	bd70      	popgt	{r4, r5, r6, pc}
   d8bfc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8c00:	f04f 0e00 	mov.w	lr, #0
   d8c04:	3c01      	subs	r4, #1
   d8c06:	f300 80ab 	bgt.w	d8d60 <__aeabi_dmul+0x238>
   d8c0a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8c0e:	bfde      	ittt	le
   d8c10:	2000      	movle	r0, #0
   d8c12:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8c16:	bd70      	pople	{r4, r5, r6, pc}
   d8c18:	f1c4 0400 	rsb	r4, r4, #0
   d8c1c:	3c20      	subs	r4, #32
   d8c1e:	da35      	bge.n	d8c8c <__aeabi_dmul+0x164>
   d8c20:	340c      	adds	r4, #12
   d8c22:	dc1b      	bgt.n	d8c5c <__aeabi_dmul+0x134>
   d8c24:	f104 0414 	add.w	r4, r4, #20
   d8c28:	f1c4 0520 	rsb	r5, r4, #32
   d8c2c:	fa00 f305 	lsl.w	r3, r0, r5
   d8c30:	fa20 f004 	lsr.w	r0, r0, r4
   d8c34:	fa01 f205 	lsl.w	r2, r1, r5
   d8c38:	ea40 0002 	orr.w	r0, r0, r2
   d8c3c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8c40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8c44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8c48:	fa21 f604 	lsr.w	r6, r1, r4
   d8c4c:	eb42 0106 	adc.w	r1, r2, r6
   d8c50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8c54:	bf08      	it	eq
   d8c56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8c5a:	bd70      	pop	{r4, r5, r6, pc}
   d8c5c:	f1c4 040c 	rsb	r4, r4, #12
   d8c60:	f1c4 0520 	rsb	r5, r4, #32
   d8c64:	fa00 f304 	lsl.w	r3, r0, r4
   d8c68:	fa20 f005 	lsr.w	r0, r0, r5
   d8c6c:	fa01 f204 	lsl.w	r2, r1, r4
   d8c70:	ea40 0002 	orr.w	r0, r0, r2
   d8c74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8c7c:	f141 0100 	adc.w	r1, r1, #0
   d8c80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8c84:	bf08      	it	eq
   d8c86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8c8a:	bd70      	pop	{r4, r5, r6, pc}
   d8c8c:	f1c4 0520 	rsb	r5, r4, #32
   d8c90:	fa00 f205 	lsl.w	r2, r0, r5
   d8c94:	ea4e 0e02 	orr.w	lr, lr, r2
   d8c98:	fa20 f304 	lsr.w	r3, r0, r4
   d8c9c:	fa01 f205 	lsl.w	r2, r1, r5
   d8ca0:	ea43 0302 	orr.w	r3, r3, r2
   d8ca4:	fa21 f004 	lsr.w	r0, r1, r4
   d8ca8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8cac:	fa21 f204 	lsr.w	r2, r1, r4
   d8cb0:	ea20 0002 	bic.w	r0, r0, r2
   d8cb4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8cb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8cbc:	bf08      	it	eq
   d8cbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8cc2:	bd70      	pop	{r4, r5, r6, pc}
   d8cc4:	f094 0f00 	teq	r4, #0
   d8cc8:	d10f      	bne.n	d8cea <__aeabi_dmul+0x1c2>
   d8cca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8cce:	0040      	lsls	r0, r0, #1
   d8cd0:	eb41 0101 	adc.w	r1, r1, r1
   d8cd4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8cd8:	bf08      	it	eq
   d8cda:	3c01      	subeq	r4, #1
   d8cdc:	d0f7      	beq.n	d8cce <__aeabi_dmul+0x1a6>
   d8cde:	ea41 0106 	orr.w	r1, r1, r6
   d8ce2:	f095 0f00 	teq	r5, #0
   d8ce6:	bf18      	it	ne
   d8ce8:	4770      	bxne	lr
   d8cea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8cee:	0052      	lsls	r2, r2, #1
   d8cf0:	eb43 0303 	adc.w	r3, r3, r3
   d8cf4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8cf8:	bf08      	it	eq
   d8cfa:	3d01      	subeq	r5, #1
   d8cfc:	d0f7      	beq.n	d8cee <__aeabi_dmul+0x1c6>
   d8cfe:	ea43 0306 	orr.w	r3, r3, r6
   d8d02:	4770      	bx	lr
   d8d04:	ea94 0f0c 	teq	r4, ip
   d8d08:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8d0c:	bf18      	it	ne
   d8d0e:	ea95 0f0c 	teqne	r5, ip
   d8d12:	d00c      	beq.n	d8d2e <__aeabi_dmul+0x206>
   d8d14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8d18:	bf18      	it	ne
   d8d1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8d1e:	d1d1      	bne.n	d8cc4 <__aeabi_dmul+0x19c>
   d8d20:	ea81 0103 	eor.w	r1, r1, r3
   d8d24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8d28:	f04f 0000 	mov.w	r0, #0
   d8d2c:	bd70      	pop	{r4, r5, r6, pc}
   d8d2e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8d32:	bf06      	itte	eq
   d8d34:	4610      	moveq	r0, r2
   d8d36:	4619      	moveq	r1, r3
   d8d38:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8d3c:	d019      	beq.n	d8d72 <__aeabi_dmul+0x24a>
   d8d3e:	ea94 0f0c 	teq	r4, ip
   d8d42:	d102      	bne.n	d8d4a <__aeabi_dmul+0x222>
   d8d44:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8d48:	d113      	bne.n	d8d72 <__aeabi_dmul+0x24a>
   d8d4a:	ea95 0f0c 	teq	r5, ip
   d8d4e:	d105      	bne.n	d8d5c <__aeabi_dmul+0x234>
   d8d50:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8d54:	bf1c      	itt	ne
   d8d56:	4610      	movne	r0, r2
   d8d58:	4619      	movne	r1, r3
   d8d5a:	d10a      	bne.n	d8d72 <__aeabi_dmul+0x24a>
   d8d5c:	ea81 0103 	eor.w	r1, r1, r3
   d8d60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8d64:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8d68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8d6c:	f04f 0000 	mov.w	r0, #0
   d8d70:	bd70      	pop	{r4, r5, r6, pc}
   d8d72:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8d76:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8d7a:	bd70      	pop	{r4, r5, r6, pc}

000d8d7c <__aeabi_ddiv>:
   d8d7c:	b570      	push	{r4, r5, r6, lr}
   d8d7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8d82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8d86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8d8a:	bf1d      	ittte	ne
   d8d8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8d90:	ea94 0f0c 	teqne	r4, ip
   d8d94:	ea95 0f0c 	teqne	r5, ip
   d8d98:	f000 f8a7 	bleq	d8eea <__aeabi_ddiv+0x16e>
   d8d9c:	eba4 0405 	sub.w	r4, r4, r5
   d8da0:	ea81 0e03 	eor.w	lr, r1, r3
   d8da4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8da8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8dac:	f000 8088 	beq.w	d8ec0 <__aeabi_ddiv+0x144>
   d8db0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8db4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8db8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8dbc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8dc0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8dc4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8dc8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8dcc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8dd0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8dd4:	429d      	cmp	r5, r3
   d8dd6:	bf08      	it	eq
   d8dd8:	4296      	cmpeq	r6, r2
   d8dda:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8dde:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8de2:	d202      	bcs.n	d8dea <__aeabi_ddiv+0x6e>
   d8de4:	085b      	lsrs	r3, r3, #1
   d8de6:	ea4f 0232 	mov.w	r2, r2, rrx
   d8dea:	1ab6      	subs	r6, r6, r2
   d8dec:	eb65 0503 	sbc.w	r5, r5, r3
   d8df0:	085b      	lsrs	r3, r3, #1
   d8df2:	ea4f 0232 	mov.w	r2, r2, rrx
   d8df6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8dfa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8dfe:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e02:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e06:	bf22      	ittt	cs
   d8e08:	1ab6      	subcs	r6, r6, r2
   d8e0a:	4675      	movcs	r5, lr
   d8e0c:	ea40 000c 	orrcs.w	r0, r0, ip
   d8e10:	085b      	lsrs	r3, r3, #1
   d8e12:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e16:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e1a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e1e:	bf22      	ittt	cs
   d8e20:	1ab6      	subcs	r6, r6, r2
   d8e22:	4675      	movcs	r5, lr
   d8e24:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8e28:	085b      	lsrs	r3, r3, #1
   d8e2a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e2e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e32:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e36:	bf22      	ittt	cs
   d8e38:	1ab6      	subcs	r6, r6, r2
   d8e3a:	4675      	movcs	r5, lr
   d8e3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8e40:	085b      	lsrs	r3, r3, #1
   d8e42:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e46:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e4e:	bf22      	ittt	cs
   d8e50:	1ab6      	subcs	r6, r6, r2
   d8e52:	4675      	movcs	r5, lr
   d8e54:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8e58:	ea55 0e06 	orrs.w	lr, r5, r6
   d8e5c:	d018      	beq.n	d8e90 <__aeabi_ddiv+0x114>
   d8e5e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8e62:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8e66:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8e6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8e6e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8e72:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8e76:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8e7a:	d1c0      	bne.n	d8dfe <__aeabi_ddiv+0x82>
   d8e7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8e80:	d10b      	bne.n	d8e9a <__aeabi_ddiv+0x11e>
   d8e82:	ea41 0100 	orr.w	r1, r1, r0
   d8e86:	f04f 0000 	mov.w	r0, #0
   d8e8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8e8e:	e7b6      	b.n	d8dfe <__aeabi_ddiv+0x82>
   d8e90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8e94:	bf04      	itt	eq
   d8e96:	4301      	orreq	r1, r0
   d8e98:	2000      	moveq	r0, #0
   d8e9a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8e9e:	bf88      	it	hi
   d8ea0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8ea4:	f63f aeaf 	bhi.w	d8c06 <__aeabi_dmul+0xde>
   d8ea8:	ebb5 0c03 	subs.w	ip, r5, r3
   d8eac:	bf04      	itt	eq
   d8eae:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8eb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8eb6:	f150 0000 	adcs.w	r0, r0, #0
   d8eba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8ebe:	bd70      	pop	{r4, r5, r6, pc}
   d8ec0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8ec4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8ec8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8ecc:	bfc2      	ittt	gt
   d8ece:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8ed2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8ed6:	bd70      	popgt	{r4, r5, r6, pc}
   d8ed8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8edc:	f04f 0e00 	mov.w	lr, #0
   d8ee0:	3c01      	subs	r4, #1
   d8ee2:	e690      	b.n	d8c06 <__aeabi_dmul+0xde>
   d8ee4:	ea45 0e06 	orr.w	lr, r5, r6
   d8ee8:	e68d      	b.n	d8c06 <__aeabi_dmul+0xde>
   d8eea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8eee:	ea94 0f0c 	teq	r4, ip
   d8ef2:	bf08      	it	eq
   d8ef4:	ea95 0f0c 	teqeq	r5, ip
   d8ef8:	f43f af3b 	beq.w	d8d72 <__aeabi_dmul+0x24a>
   d8efc:	ea94 0f0c 	teq	r4, ip
   d8f00:	d10a      	bne.n	d8f18 <__aeabi_ddiv+0x19c>
   d8f02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8f06:	f47f af34 	bne.w	d8d72 <__aeabi_dmul+0x24a>
   d8f0a:	ea95 0f0c 	teq	r5, ip
   d8f0e:	f47f af25 	bne.w	d8d5c <__aeabi_dmul+0x234>
   d8f12:	4610      	mov	r0, r2
   d8f14:	4619      	mov	r1, r3
   d8f16:	e72c      	b.n	d8d72 <__aeabi_dmul+0x24a>
   d8f18:	ea95 0f0c 	teq	r5, ip
   d8f1c:	d106      	bne.n	d8f2c <__aeabi_ddiv+0x1b0>
   d8f1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8f22:	f43f aefd 	beq.w	d8d20 <__aeabi_dmul+0x1f8>
   d8f26:	4610      	mov	r0, r2
   d8f28:	4619      	mov	r1, r3
   d8f2a:	e722      	b.n	d8d72 <__aeabi_dmul+0x24a>
   d8f2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8f30:	bf18      	it	ne
   d8f32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8f36:	f47f aec5 	bne.w	d8cc4 <__aeabi_dmul+0x19c>
   d8f3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8f3e:	f47f af0d 	bne.w	d8d5c <__aeabi_dmul+0x234>
   d8f42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8f46:	f47f aeeb 	bne.w	d8d20 <__aeabi_dmul+0x1f8>
   d8f4a:	e712      	b.n	d8d72 <__aeabi_dmul+0x24a>

000d8f4c <__gedf2>:
   d8f4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8f50:	e006      	b.n	d8f60 <__cmpdf2+0x4>
   d8f52:	bf00      	nop

000d8f54 <__ledf2>:
   d8f54:	f04f 0c01 	mov.w	ip, #1
   d8f58:	e002      	b.n	d8f60 <__cmpdf2+0x4>
   d8f5a:	bf00      	nop

000d8f5c <__cmpdf2>:
   d8f5c:	f04f 0c01 	mov.w	ip, #1
   d8f60:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8f64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8f68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8f6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8f70:	bf18      	it	ne
   d8f72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8f76:	d01b      	beq.n	d8fb0 <__cmpdf2+0x54>
   d8f78:	b001      	add	sp, #4
   d8f7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8f7e:	bf0c      	ite	eq
   d8f80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8f84:	ea91 0f03 	teqne	r1, r3
   d8f88:	bf02      	ittt	eq
   d8f8a:	ea90 0f02 	teqeq	r0, r2
   d8f8e:	2000      	moveq	r0, #0
   d8f90:	4770      	bxeq	lr
   d8f92:	f110 0f00 	cmn.w	r0, #0
   d8f96:	ea91 0f03 	teq	r1, r3
   d8f9a:	bf58      	it	pl
   d8f9c:	4299      	cmppl	r1, r3
   d8f9e:	bf08      	it	eq
   d8fa0:	4290      	cmpeq	r0, r2
   d8fa2:	bf2c      	ite	cs
   d8fa4:	17d8      	asrcs	r0, r3, #31
   d8fa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8faa:	f040 0001 	orr.w	r0, r0, #1
   d8fae:	4770      	bx	lr
   d8fb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8fb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8fb8:	d102      	bne.n	d8fc0 <__cmpdf2+0x64>
   d8fba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8fbe:	d107      	bne.n	d8fd0 <__cmpdf2+0x74>
   d8fc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8fc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8fc8:	d1d6      	bne.n	d8f78 <__cmpdf2+0x1c>
   d8fca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8fce:	d0d3      	beq.n	d8f78 <__cmpdf2+0x1c>
   d8fd0:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8fd4:	4770      	bx	lr
   d8fd6:	bf00      	nop

000d8fd8 <__aeabi_cdrcmple>:
   d8fd8:	4684      	mov	ip, r0
   d8fda:	4610      	mov	r0, r2
   d8fdc:	4662      	mov	r2, ip
   d8fde:	468c      	mov	ip, r1
   d8fe0:	4619      	mov	r1, r3
   d8fe2:	4663      	mov	r3, ip
   d8fe4:	e000      	b.n	d8fe8 <__aeabi_cdcmpeq>
   d8fe6:	bf00      	nop

000d8fe8 <__aeabi_cdcmpeq>:
   d8fe8:	b501      	push	{r0, lr}
   d8fea:	f7ff ffb7 	bl	d8f5c <__cmpdf2>
   d8fee:	2800      	cmp	r0, #0
   d8ff0:	bf48      	it	mi
   d8ff2:	f110 0f00 	cmnmi.w	r0, #0
   d8ff6:	bd01      	pop	{r0, pc}

000d8ff8 <__aeabi_dcmpeq>:
   d8ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ffc:	f7ff fff4 	bl	d8fe8 <__aeabi_cdcmpeq>
   d9000:	bf0c      	ite	eq
   d9002:	2001      	moveq	r0, #1
   d9004:	2000      	movne	r0, #0
   d9006:	f85d fb08 	ldr.w	pc, [sp], #8
   d900a:	bf00      	nop

000d900c <__aeabi_dcmplt>:
   d900c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9010:	f7ff ffea 	bl	d8fe8 <__aeabi_cdcmpeq>
   d9014:	bf34      	ite	cc
   d9016:	2001      	movcc	r0, #1
   d9018:	2000      	movcs	r0, #0
   d901a:	f85d fb08 	ldr.w	pc, [sp], #8
   d901e:	bf00      	nop

000d9020 <__aeabi_dcmple>:
   d9020:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9024:	f7ff ffe0 	bl	d8fe8 <__aeabi_cdcmpeq>
   d9028:	bf94      	ite	ls
   d902a:	2001      	movls	r0, #1
   d902c:	2000      	movhi	r0, #0
   d902e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9032:	bf00      	nop

000d9034 <__aeabi_dcmpge>:
   d9034:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9038:	f7ff ffce 	bl	d8fd8 <__aeabi_cdrcmple>
   d903c:	bf94      	ite	ls
   d903e:	2001      	movls	r0, #1
   d9040:	2000      	movhi	r0, #0
   d9042:	f85d fb08 	ldr.w	pc, [sp], #8
   d9046:	bf00      	nop

000d9048 <__aeabi_dcmpgt>:
   d9048:	f84d ed08 	str.w	lr, [sp, #-8]!
   d904c:	f7ff ffc4 	bl	d8fd8 <__aeabi_cdrcmple>
   d9050:	bf34      	ite	cc
   d9052:	2001      	movcc	r0, #1
   d9054:	2000      	movcs	r0, #0
   d9056:	f85d fb08 	ldr.w	pc, [sp], #8
   d905a:	bf00      	nop

000d905c <__aeabi_dcmpun>:
   d905c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9060:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9064:	d102      	bne.n	d906c <__aeabi_dcmpun+0x10>
   d9066:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d906a:	d10a      	bne.n	d9082 <__aeabi_dcmpun+0x26>
   d906c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9070:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9074:	d102      	bne.n	d907c <__aeabi_dcmpun+0x20>
   d9076:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d907a:	d102      	bne.n	d9082 <__aeabi_dcmpun+0x26>
   d907c:	f04f 0000 	mov.w	r0, #0
   d9080:	4770      	bx	lr
   d9082:	f04f 0001 	mov.w	r0, #1
   d9086:	4770      	bx	lr

000d9088 <__aeabi_d2iz>:
   d9088:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d908c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9090:	d215      	bcs.n	d90be <__aeabi_d2iz+0x36>
   d9092:	d511      	bpl.n	d90b8 <__aeabi_d2iz+0x30>
   d9094:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9098:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d909c:	d912      	bls.n	d90c4 <__aeabi_d2iz+0x3c>
   d909e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d90a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d90a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d90aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d90ae:	fa23 f002 	lsr.w	r0, r3, r2
   d90b2:	bf18      	it	ne
   d90b4:	4240      	negne	r0, r0
   d90b6:	4770      	bx	lr
   d90b8:	f04f 0000 	mov.w	r0, #0
   d90bc:	4770      	bx	lr
   d90be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d90c2:	d105      	bne.n	d90d0 <__aeabi_d2iz+0x48>
   d90c4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d90c8:	bf08      	it	eq
   d90ca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d90ce:	4770      	bx	lr
   d90d0:	f04f 0000 	mov.w	r0, #0
   d90d4:	4770      	bx	lr
   d90d6:	bf00      	nop

000d90d8 <__aeabi_d2uiz>:
   d90d8:	004a      	lsls	r2, r1, #1
   d90da:	d211      	bcs.n	d9100 <__aeabi_d2uiz+0x28>
   d90dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d90e0:	d211      	bcs.n	d9106 <__aeabi_d2uiz+0x2e>
   d90e2:	d50d      	bpl.n	d9100 <__aeabi_d2uiz+0x28>
   d90e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d90e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d90ec:	d40e      	bmi.n	d910c <__aeabi_d2uiz+0x34>
   d90ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d90f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d90f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d90fa:	fa23 f002 	lsr.w	r0, r3, r2
   d90fe:	4770      	bx	lr
   d9100:	f04f 0000 	mov.w	r0, #0
   d9104:	4770      	bx	lr
   d9106:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d910a:	d102      	bne.n	d9112 <__aeabi_d2uiz+0x3a>
   d910c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9110:	4770      	bx	lr
   d9112:	f04f 0000 	mov.w	r0, #0
   d9116:	4770      	bx	lr

000d9118 <__cxa_atexit>:
   d9118:	b510      	push	{r4, lr}
   d911a:	4c05      	ldr	r4, [pc, #20]	; (d9130 <__cxa_atexit+0x18>)
   d911c:	4613      	mov	r3, r2
   d911e:	b12c      	cbz	r4, d912c <__cxa_atexit+0x14>
   d9120:	460a      	mov	r2, r1
   d9122:	4601      	mov	r1, r0
   d9124:	2002      	movs	r0, #2
   d9126:	f3af 8000 	nop.w
   d912a:	bd10      	pop	{r4, pc}
   d912c:	4620      	mov	r0, r4
   d912e:	bd10      	pop	{r4, pc}
   d9130:	00000000 	.word	0x00000000

000d9134 <memcpy>:
   d9134:	b510      	push	{r4, lr}
   d9136:	1e43      	subs	r3, r0, #1
   d9138:	440a      	add	r2, r1
   d913a:	4291      	cmp	r1, r2
   d913c:	d004      	beq.n	d9148 <memcpy+0x14>
   d913e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9142:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9146:	e7f8      	b.n	d913a <memcpy+0x6>
   d9148:	bd10      	pop	{r4, pc}

000d914a <memset>:
   d914a:	4402      	add	r2, r0
   d914c:	4603      	mov	r3, r0
   d914e:	4293      	cmp	r3, r2
   d9150:	d002      	beq.n	d9158 <memset+0xe>
   d9152:	f803 1b01 	strb.w	r1, [r3], #1
   d9156:	e7fa      	b.n	d914e <memset+0x4>
   d9158:	4770      	bx	lr
	...

000d915c <srand>:
   d915c:	b538      	push	{r3, r4, r5, lr}
   d915e:	4b12      	ldr	r3, [pc, #72]	; (d91a8 <srand+0x4c>)
   d9160:	681c      	ldr	r4, [r3, #0]
   d9162:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9164:	4605      	mov	r5, r0
   d9166:	b9d3      	cbnz	r3, d919e <srand+0x42>
   d9168:	2018      	movs	r0, #24
   d916a:	f7fc fe1f 	bl	d5dac <malloc>
   d916e:	f243 330e 	movw	r3, #13070	; 0x330e
   d9172:	63a0      	str	r0, [r4, #56]	; 0x38
   d9174:	8003      	strh	r3, [r0, #0]
   d9176:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d917a:	8043      	strh	r3, [r0, #2]
   d917c:	f241 2334 	movw	r3, #4660	; 0x1234
   d9180:	8083      	strh	r3, [r0, #4]
   d9182:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9186:	80c3      	strh	r3, [r0, #6]
   d9188:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d918c:	8103      	strh	r3, [r0, #8]
   d918e:	2305      	movs	r3, #5
   d9190:	8143      	strh	r3, [r0, #10]
   d9192:	230b      	movs	r3, #11
   d9194:	8183      	strh	r3, [r0, #12]
   d9196:	2201      	movs	r2, #1
   d9198:	2300      	movs	r3, #0
   d919a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d919e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d91a0:	2200      	movs	r2, #0
   d91a2:	611d      	str	r5, [r3, #16]
   d91a4:	615a      	str	r2, [r3, #20]
   d91a6:	bd38      	pop	{r3, r4, r5, pc}
   d91a8:	2003e2d0 	.word	0x2003e2d0

000d91ac <strcpy>:
   d91ac:	4603      	mov	r3, r0
   d91ae:	f811 2b01 	ldrb.w	r2, [r1], #1
   d91b2:	f803 2b01 	strb.w	r2, [r3], #1
   d91b6:	2a00      	cmp	r2, #0
   d91b8:	d1f9      	bne.n	d91ae <strcpy+0x2>
   d91ba:	4770      	bx	lr

000d91bc <strlen>:
   d91bc:	4603      	mov	r3, r0
   d91be:	f813 2b01 	ldrb.w	r2, [r3], #1
   d91c2:	2a00      	cmp	r2, #0
   d91c4:	d1fb      	bne.n	d91be <strlen+0x2>
   d91c6:	1a18      	subs	r0, r3, r0
   d91c8:	3801      	subs	r0, #1
   d91ca:	4770      	bx	lr

000d91cc <dynalib_user>:
   d91cc:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d91dc:	0000 0000 732f 6174 7472 7075 2f00 656c     ..../startup./le
   d91ec:	0064 6d2f 746f 726f 2f00 6361 6563 656c     d./motor./accele
   d91fc:	6f72 656d 6574 0072 662f 656c 5378 6e65     rometer./flexSen
   d920c:	6f73 0072 662f 656c 5378 6e65 6f73 5472     sor./flexSensorT
   d921c:	6f77 5800 3d61 0020 2020 5920 3d61 0020     wo.Xa= .   Ya= .
   d922c:	2020 5a20 3d61 0020 6573 736e 726f 203a        Za= .sensor: 
   d923c:	7300 6e65 6f73 3272 203a 2f00 6870 746f     .sensor2: ./phot
   d924c:	636f 6c65 006c 392f 4f44 0046 5453 5241     ocell./9DOF.STAR
   d925c:	2d54 5055 4c00 4445 4d00 544f 524f 4100     T-UP.LED.MOTOR.A
   d926c:	4752 4e4f 4920 2050 4428 4348 2950 203a     RGON IP (DHCP): 
   d927c:	2500 2e64 6425 252e 2e64 6425 6700 6961     .%d.%d.%d.%d.gai
   d928c:	736e 6f5f 6972 5b67 3a5d 7300 7465 6720     ns_orig[]:.set g
   d929c:	6961 736e 5d5b 003a 726f 6769 6e69 6c61     ains[]:.original
   d92ac:	6720 6961 736e 003f 5958 205a 4f43 4e55      gains?.XYZ COUN
   d92bc:	5354 203a 5800 5a59 4720 3a73 0020 6567     TS: .XYZ Gs: .ge
   d92cc:	5474 7061 6854 6572 6873 6c6f 2864 3a29     tTapThreshold():
   d92dc:	0020 6567 4174 6978 4f73 6666 6573 2874      .getAxisOffset(
   d92ec:	7826 202c 7926 202c 7a26 3a29 0020 6567     &x, &y, &z): .ge
   d92fc:	5474 7061 7544 6172 6974 6e6f 2928 203a     tTapDuration(): 
   d930c:	6700 7465 6f44 6275 656c 6154 4c70 7461     .getDoubleTapLat
   d931c:	6e65 7963 2928 203a 6700 7465 6f44 6275     ency(): .getDoub
   d932c:	656c 6154 5770 6e69 6f64 2877 2029 6700     leTapWindow() .g
   d933c:	7465 6341 6974 6976 7974 6854 6572 6873     etActivityThresh
   d934c:	6c6f 2864 2029 6700 7465 6e49 6361 6974     old() .getInacti
   d935c:	6976 7974 6854 6572 6873 6c6f 2864 2029     vityThreshold() 
   d936c:	6700 7465 6954 656d 6e49 6361 6974 6976     .getTimeInactivi
   d937c:	7974 2928 203a 6700 7465 7246 6565 6146     ty(): .getFreeFa
   d938c:	6c6c 6854 6572 6873 6c6f 2864 3a29 0020     llThreshold(): .
   d939c:	6567 4674 6572 4665 6c61 446c 7275 7461     getFreeFallDurat
   d93ac:	6f69 286e 3a29 0020 7369 6341 6974 6976     ion(): .isActivi
   d93bc:	7974 4558 616e 6c62 6465 2928 203a 6900     tyXEnabled(): .i
   d93cc:	4173 7463 7669 7469 5979 6e45 6261 656c     sActivityYEnable
   d93dc:	2864 3a29 0020 7369 6341 6974 6976 7974     d(): .isActivity
   d93ec:	455a 616e 6c62 6465 2928 203a 6900 4973     ZEnabled(): .isI
   d93fc:	616e 7463 7669 7469 5879 6e45 6261 656c     nactivityXEnable
   d940c:	2864 3a29 0020 7369 6e49 6361 6974 6976     d(): .isInactivi
   d941c:	7974 4559 616e 6c62 6465 2928 203a 6900     tyYEnabled(): .i
   d942c:	4973 616e 7463 7669 7469 5a79 6e45 6261     sInactivityZEnab
   d943c:	656c 2864 3a29 0020 7369 6341 6974 6976     led(): .isActivi
   d944c:	7974 6341 2928 203a 6700 7465 7553 7070     tyAc(): .getSupp
   d945c:	6572 7373 6942 2874 3b29 7420 7572 3f65     ressBit(); true?
   d946c:	0020 6567 5374 7075 7270 7365 4273 7469      .getSuppressBit
   d947c:	2928 203b 6166 736c 3f65 0020 7369 6154     (); false? .isTa
   d948c:	4470 7465 6365 6974 6e6f 6e4f 2858 3b29     pDetectionOnX();
   d949c:	7420 7572 3f65 0020 7369 6154 4470 7465      true? .isTapDet
   d94ac:	6365 6974 6e6f 6e4f 2858 3b29 6620 6c61     ectionOnX(); fal
   d94bc:	6573 203f 6900 5473 7061 6544 6574 7463     se? .isTapDetect
   d94cc:	6f69 4f6e 596e 2928 203b 7274 6575 203f     ionOnY(); true? 
   d94dc:	6900 5473 7061 6544 6574 7463 6f69 4f6e     .isTapDetectionO
   d94ec:	596e 2928 203b 6166 736c 3f65 0020 7369     nY(); false? .is
   d94fc:	6154 4470 7465 6365 6974 6e6f 6e4f 285a     TapDetectionOnZ(
   d950c:	3b29 7420 7572 3f65 0020 7369 6154 4470     ); true? .isTapD
   d951c:	7465 6365 6974 6e6f 6e4f 285a 3b29 6620     etectionOnZ(); f
   d952c:	6c61 6573 203f 6900 4173 7463 7669 7469     alse? .isActivit
   d953c:	5379 756f 6372 4f65 586e 2928 203a 6100     ySourceOnX(): .a
   d954c:	6363 6c65 692e 4173 7463 7669 7469 5379     ccel.isActivityS
   d955c:	756f 6372 4f65 596e 2928 203a 6100 6363     ourceOnY(): .acc
   d956c:	6c65 692e 4173 7463 7669 7469 5379 756f     el.isActivitySou
   d957c:	6372 4f65 5a6e 2928 203a 6100 6363 6c65     rceOnZ(): .accel
   d958c:	692e 5473 7061 6f53 7275 6563 6e4f 2858     .isTapSourceOnX(
   d959c:	3a29 0020 6361 6563 2e6c 7369 6154 5370     ): .accel.isTapS
   d95ac:	756f 6372 4f65 596e 2928 203a 6100 6363     ourceOnY(): .acc
   d95bc:	6c65 692e 5473 7061 6f53 7275 6563 6e4f     el.isTapSourceOn
   d95cc:	285a 3a29 0020 6361 6563 2e6c 7369 7341     Z(): .accel.isAs
   d95dc:	656c 7065 2928 203a 6100 6363 6c65 692e     leep(): .accel.i
   d95ec:	4c73 776f 6f50 6577 2872 3a29 0020 6567     sLowPower(): .ge
   d95fc:	5274 7461 2865 3a29 3320 312e 3134 3935     tRate(): 3.14159
   d960c:	003f 6567 4974 746e 7265 7572 7470 6f53     ?.getInterruptSo
   d961c:	7275 6563 2928 203a 6700 7465 6e49 6574     urce(): .getInte
   d962c:	7272 7075 5374 756f 6372 2865 2931 203a     rruptSource(1): 
   d963c:	6700 7465 6e49 6574 7272 7075 4d74 7061     .getInterruptMap
   d964c:	6970 676e 3128 3a29 0020 7369 6e49 6574     ping(1): .isInte
   d965c:	7272 7075 4574 616e 6c62 6465 3128 3a29     rruptEnabled(1):
   d966c:	0020 6567 5374 6c65 5466 7365 4274 7469      .getSelfTestBit
   d967c:	2928 203a 4400 5652 7420 7365 0074 0042     (): .DRV test.B.
   d968c:	7830 3030 203a 3000 0078 3a20 0020 2d0a     0x00: .0x. : ..-
   d969c:	2d2d 002d                                   ---.

000d96a0 <_ZTVN5spark13EthernetClassE>:
	...
   d96a8:	5ead 000d 5ea3 000d 5e99 000d 5e8f 000d     .^...^...^...^..
   d96b8:	5e83 000d 5e77 000d 5e6b 000d 5e63 000d     .^..w^..k^..c^..
   d96c8:	5e59 000d 5e4f 000d 62ed 000d               Y^..O^...b..

000d96d4 <_ZTV7TwoWire>:
	...
   d96dc:	5ecd 000d 5f17 000d 5eef 000d 5ecf 000d     .^..._...^...^..
   d96ec:	5ef7 000d 5eff 000d 5f07 000d 5f0f 000d     .^...^..._..._..

000d96fc <_ZTV9IPAddress>:
	...
   d9704:	5fdb 000d 40b7 000d 40e9 000d 6162 6475     ._...@...@..baud
   d9714:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d9724:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d9734:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d9744:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d9754:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d9764:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d9774:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d9784:	7070 2500 3130 7530 0020 205d 2c00 0020     pp.%010u .] ., .
   d9794:	5b20 6300 646f 2065 203d 2500 0069 6564      [.code = .%i.de
   d97a4:	6174 6c69 2073 203d 0d00 000a 6e6c 6600     tails = ....ln.f
   d97b4:	006e 6f63 6564 6400 7465 6961 006c 6f6e     n.code.detail.no
   d97c4:	656e 7400 6172 6563 6900 666e 006f 6177     ne.trace.info.wa
   d97d4:	6e72 6500 7272 726f 7000 6e61 6369 6100     rn.error.panic.a
   d97e4:	6c6c 0000                                   ll..

000d97e8 <_ZTVN5spark9MeshClassE>:
	...
   d97f0:	6167 000d 615d 000d 6153 000d 6149 000d     ga..]a..Sa..Ia..
   d9800:	613d 000d 6131 000d 6125 000d 611d 000d     =a..1a..%a...a..
   d9810:	6113 000d 6109 000d 62ed 000d               .a...a...b..

000d981c <_ZTVN5spark12NetworkClassE>:
	...
   d9824:	6285 000d 628f 000d 6299 000d 62a3 000d     .b...b...b...b..
   d9834:	62ad 000d 62b9 000d 62c5 000d 62d1 000d     .b...b...b...b..
   d9844:	62d9 000d 62e3 000d 62ed 000d 616e 006e     .b...b...b..nan.
   d9854:	766f 0066 002e 6e69 0066 005a 2b25 3330     ovf...inf.Z.%+03
   d9864:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
   d9874:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
   d9884:	656d 0000                                   me..

000d9888 <_ZTV3UDP>:
	...
   d9890:	40b9 000d 40f7 000d 6831 000d 695b 000d     .@...@..1h..[i..
   d98a0:	6829 000d 6847 000d 6865 000d 687f 000d     )h..Gh..eh...h..
   d98b0:	68a3 000d 693f 000d 6c41 000d 69e1 000d     .h..?i..Al...i..
   d98c0:	6b61 000d 6811 000d 6d21 000d 6ae5 000d     ak...h..!m...j..
   d98d0:	6a19 000d 6d4f 000d 6985 000d 681f 000d     .j..Om...i...h..
   d98e0:	69c1 000d 6825 000d 6881 000d fff0 ffff     .i..%h...h......
   d98f0:	0000 0000 689b 000d                         .....h..

000d98f8 <_ZTV11USARTSerial>:
	...
   d9900:	6d8b 000d 6ddb 000d 6de9 000d 63cd 000d     .m...m...m...c..
   d9910:	6d9f 000d 6dc1 000d 6dad 000d 6dd5 000d     .m...m...m...m..
   d9920:	6d8d 000d 6d91 000d                         .m...m..

000d9928 <_ZTV9USBSerial>:
	...
   d9930:	6e91 000d 6ee1 000d 6eef 000d 63cd 000d     .n...n...n...c..
   d9940:	6ecd 000d 6e93 000d 6ea9 000d 6edb 000d     .n...n...n...n..
   d9950:	6ebf 000d 6e8d 000d                         .n...n..

000d9958 <_ZTVN5spark9WiFiClassE>:
	...
   d9960:	7007 000d 6ffd 000d 6ff3 000d 6fa9 000d     .p...o...o...o..
   d9970:	6fe7 000d 6fdb 000d 6fcf 000d 6fc7 000d     .o...o...o...o..
   d9980:	6fbd 000d 6fb3 000d 62ed 000d               .o...o...b..

000d998c <_ZSt7nothrow>:
   d998c:	0000 0000 6f70 0077 0000 0000               ....pow.....

000d9998 <TWO52>:
   d9998:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000d99a8 <__sf_fake_stdin>:
	...

000d99c8 <__sf_fake_stdout>:
	...

000d99e8 <__sf_fake_stderr>:
	...
   d9a08:	0043                                        C.

000d9a0a <link_const_variable_data_end>:
	...

000d9a0c <link_constructors_location>:
   d9a0c:	000d4e45 	.word	0x000d4e45
   d9a10:	000d55f9 	.word	0x000d55f9
   d9a14:	000d5815 	.word	0x000d5815
   d9a18:	000d593f 	.word	0x000d593f
   d9a1c:	000d5e15 	.word	0x000d5e15
   d9a20:	000d5eb9 	.word	0x000d5eb9
   d9a24:	000d60f9 	.word	0x000d60f9
   d9a28:	000d6235 	.word	0x000d6235
   d9a2c:	000d63b9 	.word	0x000d63b9
   d9a30:	000d6675 	.word	0x000d6675
   d9a34:	000d67c9 	.word	0x000d67c9
   d9a38:	000d67fd 	.word	0x000d67fd
   d9a3c:	000d7011 	.word	0x000d7011
   d9a40:	000d72b5 	.word	0x000d72b5
   d9a44:	000d7379 	.word	0x000d7379
   d9a48:	000d73fd 	.word	0x000d73fd
   d9a4c:	000d7481 	.word	0x000d7481
