
/Users/amdevito/Documents/GitHub/360/cart360/sonicHands/target/1.5.2/argon/sonicHands.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005f10  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9f30  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e260  000d9f34  0001e260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000051c  2003e2d8  2003e2d8  0002e2d8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d9fa8  000d9fa8  00029fa8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9fd0  000d9fd0  00029fd0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00100ec9  00000000  00000000  00029fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013a9f  00000000  00000000  0012ae9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000235e3  00000000  00000000  0013e93c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002cb8  00000000  00000000  00161f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005238  00000000  00000000  00164bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00038dd7  00000000  00000000  00169e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003028b  00000000  00000000  001a2be6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00109eb1  00000000  00000000  001d2e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e3a0  00000000  00000000  002dcd24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fabb 	bl	d95ac <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fac0 	bl	d95c2 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e260 	.word	0x2003e260
   d404c:	000d9f34 	.word	0x000d9f34
   d4050:	2003e2d4 	.word	0x2003e2d4
   d4054:	2003e2d8 	.word	0x2003e2d8
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 fa79 	bl	d7554 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d9f30 	.word	0x000d9f30
   d4084:	000d9eec 	.word	0x000d9eec

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 bb16 	b.w	d46b8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f917 	bl	d42c0 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 ba1f 	b.w	d74d8 <_post_loop>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f002 b8ab 	b.w	d61f4 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 b8b1 	b.w	d6204 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 b8af 	b.w	d6204 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d40b6:	4770      	bx	lr

000d40b8 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d40b8:	b510      	push	{r4, lr}
   d40ba:	4b06      	ldr	r3, [pc, #24]	; (d40d4 <_ZN3UDPD1Ev+0x1c>)
   d40bc:	6003      	str	r3, [r0, #0]
   d40be:	3364      	adds	r3, #100	; 0x64
   d40c0:	4604      	mov	r4, r0
   d40c2:	6103      	str	r3, [r0, #16]
   d40c4:	f002 fe77 	bl	d6db6 <_ZN3UDP4stopEv>
   d40c8:	4620      	mov	r0, r4
   d40ca:	f003 f839 	bl	d7140 <_ZN3UDP13releaseBufferEv>
   d40ce:	4620      	mov	r0, r4
   d40d0:	bd10      	pop	{r4, pc}
   d40d2:	bf00      	nop
   d40d4:	000d9d6c 	.word	0x000d9d6c

000d40d8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40d8:	b510      	push	{r4, lr}
   d40da:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40dc:	6800      	ldr	r0, [r0, #0]
   d40de:	b108      	cbz	r0, d40e4 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40e0:	f002 f890 	bl	d6204 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40e4:	4620      	mov	r0, r4
   d40e6:	bd10      	pop	{r4, pc}

000d40e8 <_ZN9IPAddressD0Ev>:
   d40e8:	b510      	push	{r4, lr}
   d40ea:	2118      	movs	r1, #24
   d40ec:	4604      	mov	r4, r0
   d40ee:	f003 fb00 	bl	d76f2 <_ZdlPvj>
   d40f2:	4620      	mov	r0, r4
   d40f4:	bd10      	pop	{r4, pc}

000d40f6 <_ZN3UDPD0Ev>:
   d40f6:	b510      	push	{r4, lr}
   d40f8:	4604      	mov	r4, r0
   d40fa:	f7ff ffdd 	bl	d40b8 <_ZN3UDPD1Ev>
   d40fe:	4620      	mov	r0, r4
   d4100:	214c      	movs	r1, #76	; 0x4c
   d4102:	f003 faf6 	bl	d76f2 <_ZdlPvj>
   d4106:	4620      	mov	r0, r4
   d4108:	bd10      	pop	{r4, pc}

000d410a <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d410a:	6803      	ldr	r3, [r0, #0]
   d410c:	b2c9      	uxtb	r1, r1
   d410e:	689b      	ldr	r3, [r3, #8]
   d4110:	4718      	bx	r3
	...

000d4114 <_Z9oooessceev>:
    /* SENT DATA BACK TO SENDER */
    dof();
}

/* USES BUFFERED UDP CLIENT */
void oooesscee() {
   d4114:	b510      	push	{r4, lr}
   d4116:	b096      	sub	sp, #88	; 0x58

  int size = 0;
  OSCMessage inMessage;
   d4118:	a801      	add	r0, sp, #4
   d411a:	f001 fc33 	bl	d5984 <_ZN10OSCMessageC1Ev>
    if ( ( size = Udp.parsePacket()) > 0)
   d411e:	2100      	movs	r1, #0
   d4120:	4813      	ldr	r0, [pc, #76]	; (d4170 <_Z9oooessceev+0x5c>)
   d4122:	f003 f850 	bl	d71c6 <_ZN3UDP11parsePacketEm>
   d4126:	1e04      	subs	r4, r0, #0
   d4128:	dd1d      	ble.n	d4166 <_Z9oooessceev+0x52>
    {
        while (size--)
   d412a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   d412e:	d307      	bcc.n	d4140 <_Z9oooessceev+0x2c>
        {
            inMessage.fill(Udp.read());
   d4130:	480f      	ldr	r0, [pc, #60]	; (d4170 <_Z9oooessceev+0x5c>)
   d4132:	f002 fdc4 	bl	d6cbe <_ZN3UDP4readEv>
   d4136:	b2c1      	uxtb	r1, r0
   d4138:	a801      	add	r0, sp, #4
   d413a:	f001 fc82 	bl	d5a42 <_ZN10OSCMessage4fillEc>

  int size = 0;
  OSCMessage inMessage;
    if ( ( size = Udp.parsePacket()) > 0)
    {
        while (size--)
   d413e:	e7f4      	b.n	d412a <_Z9oooessceev+0x16>
            inMessage.fill(Udp.read());
            //Serial.print(Udp.read());
            //Serial.print(' ');
        }
        
        if( inMessage.parse() ) {
   d4140:	a801      	add	r0, sp, #4
   d4142:	f001 fc8d 	bl	d5a60 <_ZN10OSCMessage5parseEv>
   d4146:	b170      	cbz	r0, d4166 <_Z9oooessceev+0x52>
            inMessage.route("/startup", startup);
   d4148:	4a0a      	ldr	r2, [pc, #40]	; (d4174 <_Z9oooessceev+0x60>)
   d414a:	490b      	ldr	r1, [pc, #44]	; (d4178 <_Z9oooessceev+0x64>)
   d414c:	a801      	add	r0, sp, #4
   d414e:	f001 fd03 	bl	d5b58 <_ZN10OSCMessage5routeEPKcPFvRS_E>
            inMessage.route("/led", led);
   d4152:	4a0a      	ldr	r2, [pc, #40]	; (d417c <_Z9oooessceev+0x68>)
   d4154:	490a      	ldr	r1, [pc, #40]	; (d4180 <_Z9oooessceev+0x6c>)
   d4156:	a801      	add	r0, sp, #4
   d4158:	f001 fcfe 	bl	d5b58 <_ZN10OSCMessage5routeEPKcPFvRS_E>
            inMessage.route("/motor", motor);
   d415c:	4a09      	ldr	r2, [pc, #36]	; (d4184 <_Z9oooessceev+0x70>)
   d415e:	490a      	ldr	r1, [pc, #40]	; (d4188 <_Z9oooessceev+0x74>)
   d4160:	a801      	add	r0, sp, #4
   d4162:	f001 fcf9 	bl	d5b58 <_ZN10OSCMessage5routeEPKcPFvRS_E>

/* USES BUFFERED UDP CLIENT */
void oooesscee() {

  int size = 0;
  OSCMessage inMessage;
   d4166:	a801      	add	r0, sp, #4
   d4168:	f001 fc4e 	bl	d5a08 <_ZN10OSCMessageD1Ev>
  //   osc_send(senderAddress);
  //   //Udp.beginPacket(ipAddress, 8889);
  //   //Udp.write(msg);
  //   //Udp.endPacket();
  // }
}
   d416c:	b016      	add	sp, #88	; 0x58
   d416e:	bd10      	pop	{r4, pc}
   d4170:	2003e348 	.word	0x2003e348
   d4174:	000d4591 	.word	0x000d4591
   d4178:	000d96e0 	.word	0x000d96e0
   d417c:	000d45d9 	.word	0x000d45d9
   d4180:	000d96e9 	.word	0x000d96e9
   d4184:	000d4625 	.word	0x000d4625
   d4188:	000d96ee 	.word	0x000d96ee

000d418c <_Z13accelerometerv>:

void accelerometer() {
   d418c:	b530      	push	{r4, r5, lr}
   d418e:	b09d      	sub	sp, #116	; 0x74

  OSCMessage outMessage("/accelerometer");
   d4190:	4916      	ldr	r1, [pc, #88]	; (d41ec <_Z13accelerometerv+0x60>)

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4192:	4d17      	ldr	r5, [pc, #92]	; (d41f0 <_Z13accelerometerv+0x64>)
   d4194:	a807      	add	r0, sp, #28
   d4196:	f001 fc13 	bl	d59c0 <_ZN10OSCMessageC1EPKc>
  //outMessage.addFloat(-3.14);
  outMessage.addFloat(X_out); //random(0, 4096)
   d419a:	4b16      	ldr	r3, [pc, #88]	; (d41f4 <_Z13accelerometerv+0x68>)
   d419c:	a807      	add	r0, sp, #28
   d419e:	ed93 0a00 	vldr	s0, [r3]
   d41a2:	f001 fd2f 	bl	d5c04 <_ZN10OSCMessage8addFloatEf>
  outMessage.addFloat(Y_out);//random(0, 4096)
   d41a6:	4b14      	ldr	r3, [pc, #80]	; (d41f8 <_Z13accelerometerv+0x6c>)
   d41a8:	a807      	add	r0, sp, #28
   d41aa:	ed93 0a00 	vldr	s0, [r3]
   d41ae:	f001 fd29 	bl	d5c04 <_ZN10OSCMessage8addFloatEf>
  outMessage.addFloat(Z_out);//random(0, 4096)
   d41b2:	4b12      	ldr	r3, [pc, #72]	; (d41fc <_Z13accelerometerv+0x70>)
   d41b4:	a807      	add	r0, sp, #28
   d41b6:	ed93 0a00 	vldr	s0, [r3]
   d41ba:	f001 fd23 	bl	d5c04 <_ZN10OSCMessage8addFloatEf>
   d41be:	4b10      	ldr	r3, [pc, #64]	; (d4200 <_Z13accelerometerv+0x74>)
   d41c0:	9301      	str	r3, [sp, #4]
   d41c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d41c4:	ac02      	add	r4, sp, #8
   d41c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d41c8:	682b      	ldr	r3, [r5, #0]
  outMessage.send( Udp, remoteIP, 8000 );//192,168,0,103
   d41ca:	490e      	ldr	r1, [pc, #56]	; (d4204 <_Z13accelerometerv+0x78>)
   d41cc:	7023      	strb	r3, [r4, #0]
   d41ce:	aa01      	add	r2, sp, #4
   d41d0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   d41d4:	a807      	add	r0, sp, #28
   d41d6:	f001 fd3f 	bl	d5c58 <_ZN10OSCMessage4sendER3UDP9IPAddressj>
  delay(500);//can take this out later to give more values
   d41da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d41de:	f002 f831 	bl	d6244 <delay>
  // }
}

void accelerometer() {

  OSCMessage outMessage("/accelerometer");
   d41e2:	a807      	add	r0, sp, #28
   d41e4:	f001 fc10 	bl	d5a08 <_ZN10OSCMessageD1Ev>
  outMessage.addFloat(X_out); //random(0, 4096)
  outMessage.addFloat(Y_out);//random(0, 4096)
  outMessage.addFloat(Z_out);//random(0, 4096)
  outMessage.send( Udp, remoteIP, 8000 );//192,168,0,103
  delay(500);//can take this out later to give more values
}
   d41e8:	b01d      	add	sp, #116	; 0x74
   d41ea:	bd30      	pop	{r4, r5, pc}
   d41ec:	000d96f5 	.word	0x000d96f5
   d41f0:	2003e2fc 	.word	0x2003e2fc
   d41f4:	2003e39c 	.word	0x2003e39c
   d41f8:	2003e2f4 	.word	0x2003e2f4
   d41fc:	2003e31c 	.word	0x2003e31c
   d4200:	000d9be0 	.word	0x000d9be0
   d4204:	2003e348 	.word	0x2003e348

000d4208 <_Z10flexSensorv>:

void flexSensor() {
   d4208:	b530      	push	{r4, r5, lr}
   d420a:	b09d      	sub	sp, #116	; 0x74

  OSCMessage outMessage("/flexSensor");
   d420c:	4910      	ldr	r1, [pc, #64]	; (d4250 <_Z10flexSensorv+0x48>)
   d420e:	4d11      	ldr	r5, [pc, #68]	; (d4254 <_Z10flexSensorv+0x4c>)
   d4210:	a807      	add	r0, sp, #28
   d4212:	f001 fbd5 	bl	d59c0 <_ZN10OSCMessageC1EPKc>
  //outMessage.addFloat(-3.14);
  outMessage.addFloat(flexValue);
   d4216:	4b10      	ldr	r3, [pc, #64]	; (d4258 <_Z10flexSensorv+0x50>)
   d4218:	a807      	add	r0, sp, #28
   d421a:	ed93 0a00 	vldr	s0, [r3]
   d421e:	f001 fcf1 	bl	d5c04 <_ZN10OSCMessage8addFloatEf>
   d4222:	4b0e      	ldr	r3, [pc, #56]	; (d425c <_Z10flexSensorv+0x54>)
   d4224:	9301      	str	r3, [sp, #4]
   d4226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4228:	ac02      	add	r4, sp, #8
   d422a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d422c:	682b      	ldr	r3, [r5, #0]
  // outMessage.addFloat(random(0, 4096));
  // outMessage.addFloat(random(0, 4096));
  outMessage.send( Udp, remoteIP, 8000 );
   d422e:	490c      	ldr	r1, [pc, #48]	; (d4260 <_Z10flexSensorv+0x58>)
   d4230:	7023      	strb	r3, [r4, #0]
   d4232:	aa01      	add	r2, sp, #4
   d4234:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   d4238:	a807      	add	r0, sp, #28
   d423a:	f001 fd0d 	bl	d5c58 <_ZN10OSCMessage4sendER3UDP9IPAddressj>
  delay(500);//take this out later
   d423e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4242:	f001 ffff 	bl	d6244 <delay>
  delay(500);//can take this out later to give more values
}

void flexSensor() {

  OSCMessage outMessage("/flexSensor");
   d4246:	a807      	add	r0, sp, #28
   d4248:	f001 fbde 	bl	d5a08 <_ZN10OSCMessageD1Ev>
  outMessage.addFloat(flexValue);
  // outMessage.addFloat(random(0, 4096));
  // outMessage.addFloat(random(0, 4096));
  outMessage.send( Udp, remoteIP, 8000 );
  delay(500);//take this out later
}
   d424c:	b01d      	add	sp, #116	; 0x74
   d424e:	bd30      	pop	{r4, r5, pc}
   d4250:	000d9704 	.word	0x000d9704
   d4254:	2003e2fc 	.word	0x2003e2fc
   d4258:	2003e398 	.word	0x2003e398
   d425c:	000d9be0 	.word	0x000d9be0
   d4260:	2003e348 	.word	0x2003e348

000d4264 <_Z11flexSensor2v>:

void flexSensor2() {
   d4264:	b530      	push	{r4, r5, lr}
   d4266:	b09d      	sub	sp, #116	; 0x74

  OSCMessage outMessage("/flexSensorTwo");
   d4268:	4910      	ldr	r1, [pc, #64]	; (d42ac <_Z11flexSensor2v+0x48>)
   d426a:	4d11      	ldr	r5, [pc, #68]	; (d42b0 <_Z11flexSensor2v+0x4c>)
   d426c:	a807      	add	r0, sp, #28
   d426e:	f001 fba7 	bl	d59c0 <_ZN10OSCMessageC1EPKc>
  //outMessage.addFloat(-3.14);
  outMessage.addFloat(flexValue2);
   d4272:	4b10      	ldr	r3, [pc, #64]	; (d42b4 <_Z11flexSensor2v+0x50>)
   d4274:	a807      	add	r0, sp, #28
   d4276:	ed93 0a00 	vldr	s0, [r3]
   d427a:	f001 fcc3 	bl	d5c04 <_ZN10OSCMessage8addFloatEf>
   d427e:	4b0e      	ldr	r3, [pc, #56]	; (d42b8 <_Z11flexSensor2v+0x54>)
   d4280:	9301      	str	r3, [sp, #4]
   d4282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4284:	ac02      	add	r4, sp, #8
   d4286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4288:	682b      	ldr	r3, [r5, #0]
  // outMessage.addFloat(random(0, 4096));
  // outMessage.addFloat(random(0, 4096));
  outMessage.send( Udp, remoteIP, 8000 );
   d428a:	490c      	ldr	r1, [pc, #48]	; (d42bc <_Z11flexSensor2v+0x58>)
   d428c:	7023      	strb	r3, [r4, #0]
   d428e:	aa01      	add	r2, sp, #4
   d4290:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   d4294:	a807      	add	r0, sp, #28
   d4296:	f001 fcdf 	bl	d5c58 <_ZN10OSCMessage4sendER3UDP9IPAddressj>
  delay(500);//take this out later
   d429a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d429e:	f001 ffd1 	bl	d6244 <delay>
  delay(500);//take this out later
}

void flexSensor2() {

  OSCMessage outMessage("/flexSensorTwo");
   d42a2:	a807      	add	r0, sp, #28
   d42a4:	f001 fbb0 	bl	d5a08 <_ZN10OSCMessageD1Ev>
  outMessage.addFloat(flexValue2);
  // outMessage.addFloat(random(0, 4096));
  // outMessage.addFloat(random(0, 4096));
  outMessage.send( Udp, remoteIP, 8000 );
  delay(500);//take this out later
}
   d42a8:	b01d      	add	sp, #116	; 0x74
   d42aa:	bd30      	pop	{r4, r5, pc}
   d42ac:	000d9710 	.word	0x000d9710
   d42b0:	2003e2fc 	.word	0x2003e2fc
   d42b4:	2003e394 	.word	0x2003e394
   d42b8:	000d9be0 	.word	0x000d9be0
   d42bc:	2003e348 	.word	0x2003e348

000d42c0 <loop>:
//   drv.setWaveform(2, 0);  // end of waveforms
//   //end of driver motor set up
}


void loop() {
   d42c0:	b510      	push	{r4, lr}
  //read accelerometer data//
  Wire.beginTransmission(ADXL345);
   d42c2:	4c3e      	ldr	r4, [pc, #248]	; (d43bc <loop+0xfc>)
//   drv.setWaveform(2, 0);  // end of waveforms
//   //end of driver motor set up
}


void loop() {
   d42c4:	ed2d 8b02 	vpush	{d8}
  //read accelerometer data//
  Wire.beginTransmission(ADXL345);
   d42c8:	f003 f9e8 	bl	d769c <_Z19__fetch_global_Wirev>
   d42cc:	6821      	ldr	r1, [r4, #0]
  Wire.write(0x32); //start with register 0x32 (ACCEL_XOUT_H)
  Wire.endTransmission(false);
  Wire.requestFrom(ADXL345, 6, true); // Read 6 registers total, each axis value is stored in 2 registers
 
  X_out = ( Wire.read() | Wire.read() << 8); // x-axis value
  X_out = X_out/256; //For a range of +-2g, we need to divide the raw values by 256, according to the datasheet
   d42ce:	ed9f 8a3c 	vldr	s16, [pc, #240]	; d43c0 <loop+0x100>
}


void loop() {
  //read accelerometer data//
  Wire.beginTransmission(ADXL345);
   d42d2:	f002 f898 	bl	d6406 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x32); //start with register 0x32 (ACCEL_XOUT_H)
   d42d6:	f003 f9e1 	bl	d769c <_Z19__fetch_global_Wirev>
   d42da:	2132      	movs	r1, #50	; 0x32
   d42dc:	f7ff ff15 	bl	d410a <_ZN7TwoWire5writeEi>
  Wire.endTransmission(false);
   d42e0:	f003 f9dc 	bl	d769c <_Z19__fetch_global_Wirev>
   d42e4:	2100      	movs	r1, #0
   d42e6:	f002 f891 	bl	d640c <_ZN7TwoWire15endTransmissionEh>
  Wire.requestFrom(ADXL345, 6, true); // Read 6 registers total, each axis value is stored in 2 registers
   d42ea:	f003 f9d7 	bl	d769c <_Z19__fetch_global_Wirev>
   d42ee:	7821      	ldrb	r1, [r4, #0]
   d42f0:	2206      	movs	r2, #6
   d42f2:	2301      	movs	r3, #1
   d42f4:	f002 f86e 	bl	d63d4 <_ZN7TwoWire11requestFromEhjh>
 
  X_out = ( Wire.read() | Wire.read() << 8); // x-axis value
   d42f8:	f003 f9d0 	bl	d769c <_Z19__fetch_global_Wirev>
   d42fc:	6803      	ldr	r3, [r0, #0]
   d42fe:	695b      	ldr	r3, [r3, #20]
   d4300:	4798      	blx	r3
   d4302:	4604      	mov	r4, r0
   d4304:	f003 f9ca 	bl	d769c <_Z19__fetch_global_Wirev>
   d4308:	6803      	ldr	r3, [r0, #0]
   d430a:	695b      	ldr	r3, [r3, #20]
   d430c:	4798      	blx	r3
  X_out = X_out/256; //For a range of +-2g, we need to divide the raw values by 256, according to the datasheet
   d430e:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   d4312:	ee07 0a90 	vmov	s15, r0
   d4316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d431a:	4b2a      	ldr	r3, [pc, #168]	; (d43c4 <loop+0x104>)
   d431c:	ee27 7a08 	vmul.f32	s14, s14, s16
   d4320:	ed83 7a00 	vstr	s14, [r3]
  
  Y_out = ( Wire.read() | Wire.read() << 8); // Y-axis value
   d4324:	f003 f9ba 	bl	d769c <_Z19__fetch_global_Wirev>
   d4328:	6803      	ldr	r3, [r0, #0]
   d432a:	695b      	ldr	r3, [r3, #20]
   d432c:	4798      	blx	r3
   d432e:	4604      	mov	r4, r0
   d4330:	f003 f9b4 	bl	d769c <_Z19__fetch_global_Wirev>
   d4334:	6803      	ldr	r3, [r0, #0]
   d4336:	695b      	ldr	r3, [r3, #20]
   d4338:	4798      	blx	r3
  Y_out = Y_out/256;
   d433a:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   d433e:	ee07 0a90 	vmov	s15, r0
   d4342:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d4346:	4b20      	ldr	r3, [pc, #128]	; (d43c8 <loop+0x108>)
   d4348:	ee27 7a08 	vmul.f32	s14, s14, s16
   d434c:	ed83 7a00 	vstr	s14, [r3]

  Z_out = ( Wire.read() | Wire.read() << 8); // z-axis value
   d4350:	f003 f9a4 	bl	d769c <_Z19__fetch_global_Wirev>
   d4354:	6803      	ldr	r3, [r0, #0]
   d4356:	695b      	ldr	r3, [r3, #20]
   d4358:	4798      	blx	r3
   d435a:	4604      	mov	r4, r0
   d435c:	f003 f99e 	bl	d769c <_Z19__fetch_global_Wirev>
   d4360:	6803      	ldr	r3, [r0, #0]
   d4362:	695b      	ldr	r3, [r3, #20]
   d4364:	4798      	blx	r3
  Z_out = Z_out/256;
   d4366:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   d436a:	ee07 0a90 	vmov	s15, r0
   d436e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4372:	4b16      	ldr	r3, [pc, #88]	; (d43cc <loop+0x10c>)
   d4374:	ee67 7a88 	vmul.f32	s15, s15, s16
   d4378:	edc3 7a00 	vstr	s15, [r3]
  // Serial.print("   Ya= ");
  // Serial.print(Y_out);
  // Serial.print("   Za= ");
  // Serial.println(Z_out);

accelerometer();
   d437c:	f7ff ff06 	bl	d418c <_Z13accelerometerv>

// Serial.print(remoteIP);

//read flexSensor Data
//  int flexValue;
 flexValue = analogRead(flexPin);
   d4380:	2013      	movs	r0, #19
   d4382:	f003 f95a 	bl	d763a <analogRead>
   d4386:	ee07 0a90 	vmov	s15, r0
   d438a:	4b11      	ldr	r3, [pc, #68]	; (d43d0 <loop+0x110>)
   d438c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
//  Serial.print("sensor: ");
//  Serial.println(flexValue);

  flexValue2 = analogRead(flexPin2);
   d4390:	2012      	movs	r0, #18

// Serial.print(remoteIP);

//read flexSensor Data
//  int flexValue;
 flexValue = analogRead(flexPin);
   d4392:	edc3 7a00 	vstr	s15, [r3]
//  Serial.print("sensor: ");
//  Serial.println(flexValue);

  flexValue2 = analogRead(flexPin2);
   d4396:	f003 f950 	bl	d763a <analogRead>
   d439a:	ee07 0a90 	vmov	s15, r0
   d439e:	4b0d      	ldr	r3, [pc, #52]	; (d43d4 <loop+0x114>)
   d43a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d43a4:	edc3 7a00 	vstr	s15, [r3]
//  Serial.print("sensor2: ");
//  Serial.println(flexValue2);

 flexSensor();
   d43a8:	f7ff ff2e 	bl	d4208 <_Z10flexSensorv>
 flexSensor2();
   d43ac:	f7ff ff5a 	bl	d4264 <_Z11flexSensor2v>
  // outMessage.addInt(random(0, 4096));
  // outMessage.addInt(random(0, 4096));
  // outMessage.addInt(random(0, 4096));
  // outMessage.send( Udp, remoteIP, 8000 );
  // delay(500);
}
   d43b0:	ecbd 8b02 	vpop	{d8}
   d43b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // delay(200);
 // outMessage.addFloat(random(0, 4096));
  // outMessage.addFloat(random(0, 4096));

  // /* CHECK IF THERE IS SOME DATA IN UDP FORMAT */
   oooesscee();
   d43b8:	f7ff beac 	b.w	d4114 <_Z9oooessceev>
   d43bc:	2003e264 	.word	0x2003e264
   d43c0:	3b800000 	.word	0x3b800000
   d43c4:	2003e39c 	.word	0x2003e39c
   d43c8:	2003e2f4 	.word	0x2003e2f4
   d43cc:	2003e31c 	.word	0x2003e31c
   d43d0:	2003e398 	.word	0x2003e398
   d43d4:	2003e394 	.word	0x2003e394

000d43d8 <_Z3ldrv>:
  // outMessage.addFloat(random(0, 4096));
  outMessage.send( Udp, remoteIP, 8000 );
  delay(500);//take this out later
}

void ldr() {
   d43d8:	b530      	push	{r4, r5, lr}
   d43da:	b09d      	sub	sp, #116	; 0x74

  OSCMessage outMessage("/photocell");
   d43dc:	4919      	ldr	r1, [pc, #100]	; (d4444 <_Z3ldrv+0x6c>)
   d43de:	4d1a      	ldr	r5, [pc, #104]	; (d4448 <_Z3ldrv+0x70>)
   d43e0:	a807      	add	r0, sp, #28
   d43e2:	f001 faed 	bl	d59c0 <_ZN10OSCMessageC1EPKc>
  //outMessage.addFloat(-3.14);
  outMessage.addInt(random(0, 4096));
   d43e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   d43ea:	2000      	movs	r0, #0
   d43ec:	f002 fb5c 	bl	d6aa8 <_Z6randomii>
   d43f0:	4601      	mov	r1, r0
   d43f2:	a807      	add	r0, sp, #28
   d43f4:	f001 fbe0 	bl	d5bb8 <_ZN10OSCMessage6addIntEi>
  outMessage.addInt(random(0, 4096));
   d43f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   d43fc:	2000      	movs	r0, #0
   d43fe:	f002 fb53 	bl	d6aa8 <_Z6randomii>
   d4402:	4601      	mov	r1, r0
   d4404:	a807      	add	r0, sp, #28
   d4406:	f001 fbd7 	bl	d5bb8 <_ZN10OSCMessage6addIntEi>
  outMessage.addInt(random(0, 4096));
   d440a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   d440e:	2000      	movs	r0, #0
   d4410:	f002 fb4a 	bl	d6aa8 <_Z6randomii>
   d4414:	4601      	mov	r1, r0
   d4416:	a807      	add	r0, sp, #28
   d4418:	f001 fbce 	bl	d5bb8 <_ZN10OSCMessage6addIntEi>
   d441c:	4b0b      	ldr	r3, [pc, #44]	; (d444c <_Z3ldrv+0x74>)
   d441e:	9301      	str	r3, [sp, #4]
   d4420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4422:	ac02      	add	r4, sp, #8
   d4424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4426:	682b      	ldr	r3, [r5, #0]
   d4428:	7023      	strb	r3, [r4, #0]
  outMessage.send( Udp, remoteIP, 8000 );
   d442a:	aa01      	add	r2, sp, #4
   d442c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   d4430:	4907      	ldr	r1, [pc, #28]	; (d4450 <_Z3ldrv+0x78>)
   d4432:	a807      	add	r0, sp, #28
   d4434:	f001 fc10 	bl	d5c58 <_ZN10OSCMessage4sendER3UDP9IPAddressj>
  delay(500);//take this out later
}

void ldr() {

  OSCMessage outMessage("/photocell");
   d4438:	a807      	add	r0, sp, #28
   d443a:	f001 fae5 	bl	d5a08 <_ZN10OSCMessageD1Ev>
  //outMessage.addFloat(-3.14);
  outMessage.addInt(random(0, 4096));
  outMessage.addInt(random(0, 4096));
  outMessage.addInt(random(0, 4096));
  outMessage.send( Udp, remoteIP, 8000 );
}
   d443e:	b01d      	add	sp, #116	; 0x74
   d4440:	bd30      	pop	{r4, r5, pc}
   d4442:	bf00      	nop
   d4444:	000d971f 	.word	0x000d971f
   d4448:	2003e2fc 	.word	0x2003e2fc
   d444c:	000d9be0 	.word	0x000d9be0
   d4450:	2003e348 	.word	0x2003e348

000d4454 <_Z3dofv>:

void dof() {
   d4454:	b530      	push	{r4, r5, lr}
   d4456:	b09d      	sub	sp, #116	; 0x74

  OSCMessage outMessage("/9DOF");
   d4458:	4934      	ldr	r1, [pc, #208]	; (d452c <_Z3dofv+0xd8>)
   d445a:	4d35      	ldr	r5, [pc, #212]	; (d4530 <_Z3dofv+0xdc>)
   d445c:	a807      	add	r0, sp, #28
   d445e:	f001 faaf 	bl	d59c0 <_ZN10OSCMessageC1EPKc>
  //outMessage.addFloat(-3.14);
  outMessage.addInt(random(0, 4096));
   d4462:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   d4466:	2000      	movs	r0, #0
   d4468:	f002 fb1e 	bl	d6aa8 <_Z6randomii>
   d446c:	4601      	mov	r1, r0
   d446e:	a807      	add	r0, sp, #28
   d4470:	f001 fba2 	bl	d5bb8 <_ZN10OSCMessage6addIntEi>
  outMessage.addInt(random(0, 4096));
   d4474:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   d4478:	2000      	movs	r0, #0
   d447a:	f002 fb15 	bl	d6aa8 <_Z6randomii>
   d447e:	4601      	mov	r1, r0
   d4480:	a807      	add	r0, sp, #28
   d4482:	f001 fb99 	bl	d5bb8 <_ZN10OSCMessage6addIntEi>
  outMessage.addInt(random(0, 4096));
   d4486:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   d448a:	2000      	movs	r0, #0
   d448c:	f002 fb0c 	bl	d6aa8 <_Z6randomii>
   d4490:	4601      	mov	r1, r0
   d4492:	a807      	add	r0, sp, #28
   d4494:	f001 fb90 	bl	d5bb8 <_ZN10OSCMessage6addIntEi>
  outMessage.addInt(random(0, 4096));
   d4498:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   d449c:	2000      	movs	r0, #0
   d449e:	f002 fb03 	bl	d6aa8 <_Z6randomii>
   d44a2:	4601      	mov	r1, r0
   d44a4:	a807      	add	r0, sp, #28
   d44a6:	f001 fb87 	bl	d5bb8 <_ZN10OSCMessage6addIntEi>
  outMessage.addInt(random(0, 4096));
   d44aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   d44ae:	2000      	movs	r0, #0
   d44b0:	f002 fafa 	bl	d6aa8 <_Z6randomii>
   d44b4:	4601      	mov	r1, r0
   d44b6:	a807      	add	r0, sp, #28
   d44b8:	f001 fb7e 	bl	d5bb8 <_ZN10OSCMessage6addIntEi>
  outMessage.addInt(random(0, 4096));
   d44bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   d44c0:	2000      	movs	r0, #0
   d44c2:	f002 faf1 	bl	d6aa8 <_Z6randomii>
   d44c6:	4601      	mov	r1, r0
   d44c8:	a807      	add	r0, sp, #28
   d44ca:	f001 fb75 	bl	d5bb8 <_ZN10OSCMessage6addIntEi>
  outMessage.addInt(random(0, 4096));
   d44ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   d44d2:	2000      	movs	r0, #0
   d44d4:	f002 fae8 	bl	d6aa8 <_Z6randomii>
   d44d8:	4601      	mov	r1, r0
   d44da:	a807      	add	r0, sp, #28
   d44dc:	f001 fb6c 	bl	d5bb8 <_ZN10OSCMessage6addIntEi>
  outMessage.addInt(random(0, 4096));
   d44e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   d44e4:	2000      	movs	r0, #0
   d44e6:	f002 fadf 	bl	d6aa8 <_Z6randomii>
   d44ea:	4601      	mov	r1, r0
   d44ec:	a807      	add	r0, sp, #28
   d44ee:	f001 fb63 	bl	d5bb8 <_ZN10OSCMessage6addIntEi>
  outMessage.addInt(random(0, 4096));
   d44f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   d44f6:	2000      	movs	r0, #0
   d44f8:	f002 fad6 	bl	d6aa8 <_Z6randomii>
   d44fc:	4601      	mov	r1, r0
   d44fe:	a807      	add	r0, sp, #28
   d4500:	f001 fb5a 	bl	d5bb8 <_ZN10OSCMessage6addIntEi>
   d4504:	4b0b      	ldr	r3, [pc, #44]	; (d4534 <_Z3dofv+0xe0>)
   d4506:	9301      	str	r3, [sp, #4]
   d4508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d450a:	ac02      	add	r4, sp, #8
   d450c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d450e:	682b      	ldr	r3, [r5, #0]
   d4510:	7023      	strb	r3, [r4, #0]
  outMessage.send( Udp, remoteIP, 8000 );
   d4512:	aa01      	add	r2, sp, #4
   d4514:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   d4518:	4907      	ldr	r1, [pc, #28]	; (d4538 <_Z3dofv+0xe4>)
   d451a:	a807      	add	r0, sp, #28
   d451c:	f001 fb9c 	bl	d5c58 <_ZN10OSCMessage4sendER3UDP9IPAddressj>
  outMessage.send( Udp, remoteIP, 8000 );
}

void dof() {

  OSCMessage outMessage("/9DOF");
   d4520:	a807      	add	r0, sp, #28
   d4522:	f001 fa71 	bl	d5a08 <_ZN10OSCMessageD1Ev>
  outMessage.addInt(random(0, 4096));
  outMessage.addInt(random(0, 4096));
  outMessage.addInt(random(0, 4096));
  outMessage.addInt(random(0, 4096));
  outMessage.send( Udp, remoteIP, 8000 );
}
   d4526:	b01d      	add	sp, #116	; 0x74
   d4528:	bd30      	pop	{r4, r5, pc}
   d452a:	bf00      	nop
   d452c:	000d972a 	.word	0x000d972a
   d4530:	2003e2fc 	.word	0x2003e2fc
   d4534:	000d9be0 	.word	0x000d9be0
   d4538:	2003e348 	.word	0x2003e348

000d453c <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d453c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4540:	4607      	mov	r7, r0
   d4542:	460c      	mov	r4, r1
{
    if (base == 0) {
   d4544:	4615      	mov	r5, r2
   d4546:	b92a      	cbnz	r2, d4554 <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d4548:	6803      	ldr	r3, [r0, #0]
   d454a:	b2c9      	uxtb	r1, r1
   d454c:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d454e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d4552:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d4554:	2900      	cmp	r1, #0
   d4556:	da07      	bge.n	d4568 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d4558:	2a0a      	cmp	r2, #10
   d455a:	d105      	bne.n	d4568 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d455c:	212d      	movs	r1, #45	; 0x2d
   d455e:	f002 f983 	bl	d6868 <_ZN5Print5printEc>
            val = -n;
   d4562:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d4564:	4606      	mov	r6, r0
            val = -n;
   d4566:	e001      	b.n	d456c <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d4568:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d456a:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d456c:	b2ea      	uxtb	r2, r5
   d456e:	4638      	mov	r0, r7
   d4570:	f002 f993 	bl	d689a <_ZN5Print11printNumberEmh>
    }
}
   d4574:	4430      	add	r0, r6
   d4576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d457a <_ZN5Print7printlnIiLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
   d457a:	b538      	push	{r3, r4, r5, lr}
   d457c:	4605      	mov	r5, r0
        size_t n = print(b, base);
   d457e:	f7ff ffdd 	bl	d453c <_ZN5Print5printIiLi0EEEjT_i>
   d4582:	4604      	mov	r4, r0
        n += println();
   d4584:	4628      	mov	r0, r5
   d4586:	f002 f972 	bl	d686e <_ZN5Print7printlnEv>
        return n;
    }
   d458a:	4420      	add	r0, r4
   d458c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4590 <_Z7startupR10OSCMessage>:
  // outMessage.addInt(random(0, 4096));
  // outMessage.send( Udp, remoteIP, 8000 );
  // delay(500);
}

void startup(OSCMessage &inMessage) {
   d4590:	b538      	push	{r3, r4, r5, lr}
   d4592:	4604      	mov	r4, r0
    Serial.println("START-UP");
   d4594:	f002 ff1e 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4598:	490e      	ldr	r1, [pc, #56]	; (d45d4 <_Z7startupR10OSCMessage+0x44>)
   d459a:	f002 f974 	bl	d6886 <_ZN5Print7printlnEPKc>
    Serial.println(inMessage.getInt(0));
   d459e:	f002 ff19 	bl	d73d4 <_Z16_fetch_usbserialv>
   d45a2:	2100      	movs	r1, #0
   d45a4:	4605      	mov	r5, r0
   d45a6:	4620      	mov	r0, r4
   d45a8:	f001 fae3 	bl	d5b72 <_ZN10OSCMessage6getIntEi>
   d45ac:	220a      	movs	r2, #10
   d45ae:	4601      	mov	r1, r0
   d45b0:	4628      	mov	r0, r5
   d45b2:	f7ff ffe2 	bl	d457a <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println(inMessage.getFloat(1));
   d45b6:	f002 ff0d 	bl	d73d4 <_Z16_fetch_usbserialv>
   d45ba:	2101      	movs	r1, #1
   d45bc:	4605      	mov	r5, r0
   d45be:	4620      	mov	r0, r4
   d45c0:	f001 fae6 	bl	d5b90 <_ZN10OSCMessage8getFloatEi>
   d45c4:	4628      	mov	r0, r5
   d45c6:	2102      	movs	r1, #2
   d45c8:	f002 fa54 	bl	d6a74 <_ZN5Print7printlnEfi>

    /* SENT DATA BACK TO SENDER */
    accelerometer();
}
   d45cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println("START-UP");
    Serial.println(inMessage.getInt(0));
    Serial.println(inMessage.getFloat(1));

    /* SENT DATA BACK TO SENDER */
    accelerometer();
   d45d0:	f7ff bddc 	b.w	d418c <_Z13accelerometerv>
   d45d4:	000d9730 	.word	0x000d9730

000d45d8 <_Z3ledR10OSCMessage>:
}

void led(OSCMessage &inMessage) {
   d45d8:	b538      	push	{r3, r4, r5, lr}
   d45da:	4604      	mov	r4, r0
    Serial.println("LED");
   d45dc:	f002 fefa 	bl	d73d4 <_Z16_fetch_usbserialv>
   d45e0:	490f      	ldr	r1, [pc, #60]	; (d4620 <_Z3ledR10OSCMessage+0x48>)
   d45e2:	f002 f950 	bl	d6886 <_ZN5Print7printlnEPKc>
    Serial.println(inMessage.getInt(0));
   d45e6:	f002 fef5 	bl	d73d4 <_Z16_fetch_usbserialv>
   d45ea:	2100      	movs	r1, #0
   d45ec:	4605      	mov	r5, r0
   d45ee:	4620      	mov	r0, r4
   d45f0:	f001 fabf 	bl	d5b72 <_ZN10OSCMessage6getIntEi>
   d45f4:	220a      	movs	r2, #10
   d45f6:	4601      	mov	r1, r0
   d45f8:	4628      	mov	r0, r5
   d45fa:	f7ff ffbe 	bl	d457a <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println(inMessage.getInt(1));
   d45fe:	f002 fee9 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4602:	2101      	movs	r1, #1
   d4604:	4605      	mov	r5, r0
   d4606:	4620      	mov	r0, r4
   d4608:	f001 fab3 	bl	d5b72 <_ZN10OSCMessage6getIntEi>
   d460c:	220a      	movs	r2, #10
   d460e:	4601      	mov	r1, r0
   d4610:	4628      	mov	r0, r5
   d4612:	f7ff ffb2 	bl	d457a <_ZN5Print7printlnIiLi0EEEjT_i>
  
    /* SENT DATA BACK TO SENDER */
    ldr();
}
   d4616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Serial.println("LED");
    Serial.println(inMessage.getInt(0));
    Serial.println(inMessage.getInt(1));
  
    /* SENT DATA BACK TO SENDER */
    ldr();
   d461a:	f7ff bedd 	b.w	d43d8 <_Z3ldrv>
   d461e:	bf00      	nop
   d4620:	000d9739 	.word	0x000d9739

000d4624 <_Z5motorR10OSCMessage>:
}

void motor(OSCMessage &inMessage) {
   d4624:	b538      	push	{r3, r4, r5, lr}
   d4626:	4604      	mov	r4, r0
    // Serial.println("MOTOR");

    Serial.print("MOTOR: ");
   d4628:	f002 fed4 	bl	d73d4 <_Z16_fetch_usbserialv>
   d462c:	4917      	ldr	r1, [pc, #92]	; (d468c <_Z5motorR10OSCMessage+0x68>)
   d462e:	f002 f917 	bl	d6860 <_ZN5Print5printEPKc>

    Serial.println(inMessage.getInt(0));
   d4632:	f002 fecf 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4636:	2100      	movs	r1, #0
   d4638:	4605      	mov	r5, r0
   d463a:	4620      	mov	r0, r4
   d463c:	f001 fa99 	bl	d5b72 <_ZN10OSCMessage6getIntEi>
   d4640:	220a      	movs	r2, #10
   d4642:	4601      	mov	r1, r0
   d4644:	4628      	mov	r0, r5
   d4646:	f7ff ff98 	bl	d457a <_ZN5Print7printlnIiLi0EEEjT_i>
    // Serial.println(inMessage.getInt(1));

//  drv.selectLibrary(1);

switch (inMessage.getInt(0))  {
   d464a:	4620      	mov	r0, r4
   d464c:	2100      	movs	r1, #0
   d464e:	f001 fa90 	bl	d5b72 <_ZN10OSCMessage6getIntEi>
   d4652:	2802      	cmp	r0, #2
   d4654:	4604      	mov	r4, r0
   d4656:	d115      	bne.n	d4684 <_Z5motorR10OSCMessage+0x60>
    // drv.setWaveform(1, 1);  // strong click 100%, see datasheet part 11.2
    // drv.setWaveform(2, 0); 
  break;
  case 2:
  
    drv.setWaveform(0, 84);  // ramp up medium 1, see datasheet part 11.2
   d4658:	2254      	movs	r2, #84	; 0x54
   d465a:	2100      	movs	r1, #0
   d465c:	480c      	ldr	r0, [pc, #48]	; (d4690 <_Z5motorR10OSCMessage+0x6c>)
   d465e:	f000 fdfa 	bl	d5256 <_ZN16Adafruit_DRV260511setWaveformEhh>
    drv.setWaveform(1, 1);  // strong click 100%, see datasheet part 11.2
   d4662:	2201      	movs	r2, #1
   d4664:	4611      	mov	r1, r2
   d4666:	480a      	ldr	r0, [pc, #40]	; (d4690 <_Z5motorR10OSCMessage+0x6c>)
   d4668:	f000 fdf5 	bl	d5256 <_ZN16Adafruit_DRV260511setWaveformEhh>
    drv.setWaveform(2, 0); 
   d466c:	2200      	movs	r2, #0
   d466e:	4621      	mov	r1, r4
   d4670:	4807      	ldr	r0, [pc, #28]	; (d4690 <_Z5motorR10OSCMessage+0x6c>)
   d4672:	f000 fdf0 	bl	d5256 <_ZN16Adafruit_DRV260511setWaveformEhh>
    drv.go();
   d4676:	4806      	ldr	r0, [pc, #24]	; (d4690 <_Z5motorR10OSCMessage+0x6c>)
   d4678:	f000 fdf5 	bl	d5266 <_ZN16Adafruit_DRV26052goEv>
    delay(1000);
   d467c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4680:	f001 fde0 	bl	d6244 <delay>

    

    /* SENT DATA BACK TO SENDER */
    dof();
}
   d4684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // delay(1000);

    

    /* SENT DATA BACK TO SENDER */
    dof();
   d4688:	f7ff bee4 	b.w	d4454 <_Z3dofv>
   d468c:	000d973d 	.word	0x000d973d
   d4690:	2003e3a0 	.word	0x2003e3a0

000d4694 <_ZN5Print7printlnIbLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
   d4694:	b538      	push	{r3, r4, r5, lr}
   d4696:	4605      	mov	r5, r0

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d4698:	b91a      	cbnz	r2, d46a2 <_ZN5Print7printlnIbLi0EEEjT_i+0xe>
        return write(n);
   d469a:	6803      	ldr	r3, [r0, #0]
   d469c:	689b      	ldr	r3, [r3, #8]
   d469e:	4798      	blx	r3
   d46a0:	e002      	b.n	d46a8 <_ZN5Print7printlnIbLi0EEEjT_i+0x14>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d46a2:	b2d2      	uxtb	r2, r2
   d46a4:	f002 f8f9 	bl	d689a <_ZN5Print11printNumberEmh>
   d46a8:	4604      	mov	r4, r0
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d46aa:	4628      	mov	r0, r5
   d46ac:	f002 f8df 	bl	d686e <_ZN5Print7printlnEv>
        return n;
    }
   d46b0:	4420      	add	r0, r4
   d46b2:	bd38      	pop	{r3, r4, r5, pc}
   d46b4:	0000      	movs	r0, r0
	...

000d46b8 <setup>:
        Particle.connect();
    }
    if(Particle.connected()) cloudConnected = true;
}

void setup() {
   d46b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d46ba:	b099      	sub	sp, #100	; 0x64
  Serial.begin(57600);
   d46bc:	f002 fe8a 	bl	d73d4 <_Z16_fetch_usbserialv>
   d46c0:	f44f 4161 	mov.w	r1, #57600	; 0xe100
   d46c4:	f002 fe74 	bl	d73b0 <_ZN9USBSerial5beginEl>
  while(!Serial);
   d46c8:	f002 fe84 	bl	d73d4 <_Z16_fetch_usbserialv>
   d46cc:	f002 fe77 	bl	d73be <_ZN9USBSerialcvbEv>
   d46d0:	2800      	cmp	r0, #0
   d46d2:	d0f9      	beq.n	d46c8 <setup+0x10>

  pinMode(DEEBUG, OUTPUT);
   d46d4:	2101      	movs	r1, #1
   d46d6:	2007      	movs	r0, #7
   d46d8:	4ccb      	ldr	r4, [pc, #812]	; (d4a08 <setup+0x350>)
   d46da:	f002 ff9d 	bl	d7618 <pinMode>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d46de:	2300      	movs	r3, #0
   d46e0:	461a      	mov	r2, r3
   d46e2:	4619      	mov	r1, r3
   d46e4:	6860      	ldr	r0, [r4, #4]
   d46e6:	f001 fd35 	bl	d6154 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d46ea:	2200      	movs	r2, #0
   d46ec:	4611      	mov	r1, r2
   d46ee:	6860      	ldr	r0, [r4, #4]
   d46f0:	f001 fd48 	bl	d6184 <network_ready>
  /* IF NOT CONFIGURED FOR ROUTER - THEN THIS */
  //WiFi.setCredentials("My_Router", "mypasswordishuge");

  /* IF ALREADY CONFIGURED FOR SPECFIC ROUTER - THEN THIS */
  WiFi.connect();
  while(!WiFi.ready());
   d46f4:	2800      	cmp	r0, #0
   d46f6:	d0f8      	beq.n	d46ea <setup+0x32>
     IPAddress netmask(255,255,255,0);
     IPAddress gateway(10,0,1,1);
     IPAddress dns(10,0,1,1);
     WiFi.setStaticIP(myAddress, netmask, gateway, dns);
*/
  Udp.begin(inPort);
   d46f8:	4bc4      	ldr	r3, [pc, #784]	; (d4a0c <setup+0x354>)
   d46fa:	48c5      	ldr	r0, [pc, #788]	; (d4a10 <setup+0x358>)
   d46fc:	8819      	ldrh	r1, [r3, #0]
   d46fe:	4fc5      	ldr	r7, [pc, #788]	; (d4a14 <setup+0x35c>)
   d4700:	2200      	movs	r2, #0
   d4702:	f002 fb0a 	bl	d6d1a <_ZN3UDP5beginEtm>
     Serial.print("ARGON: ");
     Serial.println(WiFi.hostname());
  */

 /* GET HOST (ARGON) IP */
  Serial.print("ARGON IP (DHCP): ");
   d4706:	f002 fe65 	bl	d73d4 <_Z16_fetch_usbserialv>
   d470a:	49c3      	ldr	r1, [pc, #780]	; (d4a18 <setup+0x360>)
   d470c:	f002 f8a8 	bl	d6860 <_ZN5Print5printEPKc>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
   d4710:	4bbd      	ldr	r3, [pc, #756]	; (d4a08 <setup+0x350>)
   d4712:	2200      	movs	r2, #0
   d4714:	4611      	mov	r1, r2
   d4716:	6858      	ldr	r0, [r3, #4]
   d4718:	f001 fd14 	bl	d6144 <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
   d471c:	ae12      	add	r6, sp, #72	; 0x48
   d471e:	1c81      	adds	r1, r0, #2
   d4720:	ad13      	add	r5, sp, #76	; 0x4c
   d4722:	4630      	mov	r0, r6
   d4724:	f001 febe 	bl	d64a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d472a:	1d3c      	adds	r4, r7, #4
   d472c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d472e:	682b      	ldr	r3, [r5, #0]
  argonIP = WiFi.localIP();
  sprintf(argonIPAddress, "%d.%d.%d.%d", argonIP[0], argonIP[1], argonIP[2], argonIP[3]);
   d4730:	7939      	ldrb	r1, [r7, #4]
   d4732:	79fa      	ldrb	r2, [r7, #7]
   d4734:	7023      	strb	r3, [r4, #0]
   d4736:	79bb      	ldrb	r3, [r7, #6]
   d4738:	9101      	str	r1, [sp, #4]
   d473a:	7979      	ldrb	r1, [r7, #5]
   d473c:	9100      	str	r1, [sp, #0]
   d473e:	48b7      	ldr	r0, [pc, #732]	; (d4a1c <setup+0x364>)
   d4740:	49b7      	ldr	r1, [pc, #732]	; (d4a20 <setup+0x368>)
   d4742:	f001 fd6f 	bl	d6224 <sprintf>
  Serial.println(argonIPAddress);
   d4746:	f002 fe45 	bl	d73d4 <_Z16_fetch_usbserialv>
   d474a:	49b4      	ldr	r1, [pc, #720]	; (d4a1c <setup+0x364>)
   d474c:	f002 f89b 	bl	d6886 <_ZN5Print7printlnEPKc>
  delay(5000);
   d4750:	f241 3088 	movw	r0, #5000	; 0x1388
   d4754:	f001 fd76 	bl	d6244 <delay>

//accelerometer setup
    int x, y, z, i;
  double xyz[3], gains[3], gains_orig[3];

  Serial.begin(57600);
   d4758:	f002 fe3c 	bl	d73d4 <_Z16_fetch_usbserialv>
   d475c:	f44f 4161 	mov.w	r1, #57600	; 0xe100
   d4760:	f002 fe26 	bl	d73b0 <_ZN9USBSerial5beginEl>
  Serial.println("");
   d4764:	f002 fe36 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4768:	49ae      	ldr	r1, [pc, #696]	; (d4a24 <setup+0x36c>)
   d476a:	f002 f88c 	bl	d6886 <_ZN5Print7printlnEPKc>
  accel.powerOn();
   d476e:	48ae      	ldr	r0, [pc, #696]	; (d4a28 <setup+0x370>)
   d4770:	f000 fdc4 	bl	d52fc <_ZN7ADXL3457powerOnEv>
  
  accel.getAxisGains(gains_orig);
   d4774:	4631      	mov	r1, r6
   d4776:	48ac      	ldr	r0, [pc, #688]	; (d4a28 <setup+0x370>)
   d4778:	f000 fe6b 	bl	d5452 <_ZN7ADXL34512getAxisGainsEPd>
  Serial.println("gains_orig[]:");
   d477c:	f002 fe2a 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4780:	49aa      	ldr	r1, [pc, #680]	; (d4a2c <setup+0x374>)
   d4782:	f002 f880 	bl	d6886 <_ZN5Print7printlnEPKc>
   d4786:	4634      	mov	r4, r6
   d4788:	ad18      	add	r5, sp, #96	; 0x60
  for(i = 0; i < 3; i++){
    Serial.print(gains_orig[i], 6);
   d478a:	f002 fe23 	bl	d73d4 <_Z16_fetch_usbserialv>
   d478e:	ecb4 0b02 	vldmia	r4!, {d0}
   d4792:	2106      	movs	r1, #6
   d4794:	f002 f960 	bl	d6a58 <_ZN5Print5printEdi>
    Serial.print(" ");
   d4798:	f002 fe1c 	bl	d73d4 <_Z16_fetch_usbserialv>
   d479c:	49a4      	ldr	r1, [pc, #656]	; (d4a30 <setup+0x378>)
   d479e:	f002 f85f 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println("");
  accel.powerOn();
  
  accel.getAxisGains(gains_orig);
  Serial.println("gains_orig[]:");
  for(i = 0; i < 3; i++){
   d47a2:	42a5      	cmp	r5, r4
   d47a4:	d1f1      	bne.n	d478a <setup+0xd2>
    Serial.print(gains_orig[i], 6);
    Serial.print(" ");
  }
  Serial.println("");
   d47a6:	f002 fe15 	bl	d73d4 <_Z16_fetch_usbserialv>
   d47aa:	499e      	ldr	r1, [pc, #632]	; (d4a24 <setup+0x36c>)
   d47ac:	f002 f86b 	bl	d6886 <_ZN5Print7printlnEPKc>
  
  gains[0] = .1;
   d47b0:	a38f      	add	r3, pc, #572	; (adr r3, d49f0 <setup+0x338>)
   d47b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  gains[1] = 1.1;
   d47ba:	a38f      	add	r3, pc, #572	; (adr r3, d49f8 <setup+0x340>)
   d47bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  gains[2] = 2.1;
   d47c4:	a38e      	add	r3, pc, #568	; (adr r3, d4a00 <setup+0x348>)
   d47c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  accel.setAxisGains(gains);
   d47ca:	ad0c      	add	r5, sp, #48	; 0x30
   d47cc:	4629      	mov	r1, r5
   d47ce:	4896      	ldr	r0, [pc, #600]	; (d4a28 <setup+0x370>)
  }
  Serial.println("");
  
  gains[0] = .1;
  gains[1] = 1.1;
  gains[2] = 2.1;
   d47d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  accel.setAxisGains(gains);
   d47d4:	f000 fe32 	bl	d543c <_ZN7ADXL34512setAxisGainsEPd>
  accel.getAxisGains(gains);
   d47d8:	4629      	mov	r1, r5
   d47da:	4893      	ldr	r0, [pc, #588]	; (d4a28 <setup+0x370>)
   d47dc:	f000 fe39 	bl	d5452 <_ZN7ADXL34512getAxisGainsEPd>
  Serial.println("set gains[]:");
   d47e0:	f002 fdf8 	bl	d73d4 <_Z16_fetch_usbserialv>
   d47e4:	4993      	ldr	r1, [pc, #588]	; (d4a34 <setup+0x37c>)
   d47e6:	f002 f84e 	bl	d6886 <_ZN5Print7printlnEPKc>
   d47ea:	462c      	mov	r4, r5
   d47ec:	462f      	mov	r7, r5
  for(i = 0; i < 3; i++){
    Serial.print(gains[i]);
   d47ee:	f002 fdf1 	bl	d73d4 <_Z16_fetch_usbserialv>
   d47f2:	ecb7 0b02 	vldmia	r7!, {d0}
   d47f6:	2102      	movs	r1, #2
   d47f8:	f002 f92e 	bl	d6a58 <_ZN5Print5printEdi>
    Serial.print(" ");
   d47fc:	f002 fdea 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4800:	498b      	ldr	r1, [pc, #556]	; (d4a30 <setup+0x378>)
   d4802:	f002 f82d 	bl	d6860 <_ZN5Print5printEPKc>
  gains[1] = 1.1;
  gains[2] = 2.1;
  accel.setAxisGains(gains);
  accel.getAxisGains(gains);
  Serial.println("set gains[]:");
  for(i = 0; i < 3; i++){
   d4806:	42be      	cmp	r6, r7
   d4808:	d1f1      	bne.n	d47ee <setup+0x136>
    Serial.print(gains[i]);
    Serial.print(" ");
  }
  Serial.println("");
   d480a:	f002 fde3 	bl	d73d4 <_Z16_fetch_usbserialv>
   d480e:	4985      	ldr	r1, [pc, #532]	; (d4a24 <setup+0x36c>)
   d4810:	f002 f839 	bl	d6886 <_ZN5Print7printlnEPKc>

  accel.setAxisGains(gains_orig);
   d4814:	4631      	mov	r1, r6
   d4816:	4884      	ldr	r0, [pc, #528]	; (d4a28 <setup+0x370>)
   d4818:	f000 fe10 	bl	d543c <_ZN7ADXL34512setAxisGainsEPd>
  accel.getAxisGains(gains);
   d481c:	4629      	mov	r1, r5
   d481e:	4882      	ldr	r0, [pc, #520]	; (d4a28 <setup+0x370>)
   d4820:	f000 fe17 	bl	d5452 <_ZN7ADXL34512getAxisGainsEPd>
  Serial.println("original gains?");
   d4824:	f002 fdd6 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4828:	4983      	ldr	r1, [pc, #524]	; (d4a38 <setup+0x380>)
   d482a:	f002 f82c 	bl	d6886 <_ZN5Print7printlnEPKc>
  for(i = 0; i < 3; i++){
    Serial.print(gains[i], 6);
   d482e:	f002 fdd1 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4832:	ecb4 0b02 	vldmia	r4!, {d0}
   d4836:	2106      	movs	r1, #6
   d4838:	f002 f90e 	bl	d6a58 <_ZN5Print5printEdi>
    Serial.print(" ");
   d483c:	f002 fdca 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4840:	497b      	ldr	r1, [pc, #492]	; (d4a30 <setup+0x378>)
   d4842:	f002 f80d 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println("");

  accel.setAxisGains(gains_orig);
  accel.getAxisGains(gains);
  Serial.println("original gains?");
  for(i = 0; i < 3; i++){
   d4846:	42a6      	cmp	r6, r4
   d4848:	d1f1      	bne.n	d482e <setup+0x176>
    Serial.print(gains[i], 6);
    Serial.print(" ");
  }
  Serial.println("");
   d484a:	f002 fdc3 	bl	d73d4 <_Z16_fetch_usbserialv>
   d484e:	4975      	ldr	r1, [pc, #468]	; (d4a24 <setup+0x36c>)
   d4850:	f002 f819 	bl	d6886 <_ZN5Print7printlnEPKc>
    
  accel.readAccel(&x, &y, &z);
   d4854:	ab05      	add	r3, sp, #20
   d4856:	aa04      	add	r2, sp, #16
   d4858:	a903      	add	r1, sp, #12
   d485a:	4873      	ldr	r0, [pc, #460]	; (d4a28 <setup+0x370>)
   d485c:	f000 fda1 	bl	d53a2 <_ZN7ADXL3459readAccelEPiS0_S0_>
  Serial.print("XYZ COUNTS: ");
   d4860:	f002 fdb8 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4864:	4975      	ldr	r1, [pc, #468]	; (d4a3c <setup+0x384>)
   d4866:	f001 fffb 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.print(x, DEC);
   d486a:	f002 fdb3 	bl	d73d4 <_Z16_fetch_usbserialv>
   d486e:	220a      	movs	r2, #10
   d4870:	9903      	ldr	r1, [sp, #12]
   d4872:	f7ff fe63 	bl	d453c <_ZN5Print5printIiLi0EEEjT_i>
  Serial.print(" ");
   d4876:	f002 fdad 	bl	d73d4 <_Z16_fetch_usbserialv>
   d487a:	496d      	ldr	r1, [pc, #436]	; (d4a30 <setup+0x378>)
   d487c:	f001 fff0 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.print(y, DEC);
   d4880:	f002 fda8 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4884:	220a      	movs	r2, #10
   d4886:	9904      	ldr	r1, [sp, #16]
   d4888:	f7ff fe58 	bl	d453c <_ZN5Print5printIiLi0EEEjT_i>
  Serial.print(" ");
   d488c:	f002 fda2 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4890:	4967      	ldr	r1, [pc, #412]	; (d4a30 <setup+0x378>)
   d4892:	f001 ffe5 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.print(z, DEC);
   d4896:	f002 fd9d 	bl	d73d4 <_Z16_fetch_usbserialv>
   d489a:	220a      	movs	r2, #10
   d489c:	9905      	ldr	r1, [sp, #20]
   d489e:	f7ff fe4d 	bl	d453c <_ZN5Print5printIiLi0EEEjT_i>
  Serial.println("");
   d48a2:	f002 fd97 	bl	d73d4 <_Z16_fetch_usbserialv>
   d48a6:	495f      	ldr	r1, [pc, #380]	; (d4a24 <setup+0x36c>)
   d48a8:	f001 ffed 	bl	d6886 <_ZN5Print7printlnEPKc>

  accel.get_Gxyz(xyz);
   d48ac:	a906      	add	r1, sp, #24
   d48ae:	485e      	ldr	r0, [pc, #376]	; (d4a28 <setup+0x370>)
   d48b0:	f000 fd8f 	bl	d53d2 <_ZN7ADXL3458get_GxyzEPd>
  Serial.print("XYZ Gs: ");
   d48b4:	f002 fd8e 	bl	d73d4 <_Z16_fetch_usbserialv>
   d48b8:	4961      	ldr	r1, [pc, #388]	; (d4a40 <setup+0x388>)
   d48ba:	f001 ffd1 	bl	d6860 <_ZN5Print5printEPKc>
   d48be:	ac06      	add	r4, sp, #24
  for(i = 0; i<3; i++){
    Serial.print(xyz[i], DEC);
   d48c0:	f002 fd88 	bl	d73d4 <_Z16_fetch_usbserialv>
   d48c4:	ecb4 0b02 	vldmia	r4!, {d0}
   d48c8:	210a      	movs	r1, #10
   d48ca:	f002 f8c5 	bl	d6a58 <_ZN5Print5printEdi>
    Serial.print(" ");
   d48ce:	f002 fd81 	bl	d73d4 <_Z16_fetch_usbserialv>
   d48d2:	4957      	ldr	r1, [pc, #348]	; (d4a30 <setup+0x378>)
   d48d4:	f001 ffc4 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.print(z, DEC);
  Serial.println("");

  accel.get_Gxyz(xyz);
  Serial.print("XYZ Gs: ");
  for(i = 0; i<3; i++){
   d48d8:	42a5      	cmp	r5, r4
   d48da:	d1f1      	bne.n	d48c0 <setup+0x208>
    Serial.print(xyz[i], DEC);
    Serial.print(" ");
  }
  Serial.println("");
   d48dc:	f002 fd7a 	bl	d73d4 <_Z16_fetch_usbserialv>
   d48e0:	4950      	ldr	r1, [pc, #320]	; (d4a24 <setup+0x36c>)
   d48e2:	f001 ffd0 	bl	d6886 <_ZN5Print7printlnEPKc>

  accel.setTapThreshold(1);
   d48e6:	2101      	movs	r1, #1
   d48e8:	484f      	ldr	r0, [pc, #316]	; (d4a28 <setup+0x370>)
   d48ea:	f000 fd8f 	bl	d540c <_ZN7ADXL34515setTapThresholdEi>
  Serial.print("getTapThreshold(): ");
   d48ee:	f002 fd71 	bl	d73d4 <_Z16_fetch_usbserialv>
   d48f2:	4954      	ldr	r1, [pc, #336]	; (d4a44 <setup+0x38c>)
   d48f4:	f001 ffb4 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.getTapThreshold(), DEC);
   d48f8:	f002 fd6c 	bl	d73d4 <_Z16_fetch_usbserialv>
   d48fc:	4604      	mov	r4, r0
   d48fe:	484a      	ldr	r0, [pc, #296]	; (d4a28 <setup+0x370>)
   d4900:	f000 fd90 	bl	d5424 <_ZN7ADXL34515getTapThresholdEv>
   d4904:	220a      	movs	r2, #10
   d4906:	4601      	mov	r1, r0
   d4908:	4620      	mov	r0, r4
   d490a:	f7ff fe36 	bl	d457a <_ZN5Print7printlnIiLi0EEEjT_i>
  
  accel.setAxisOffset(2, 3, 4);
   d490e:	2304      	movs	r3, #4
   d4910:	2203      	movs	r2, #3
   d4912:	2102      	movs	r1, #2
   d4914:	4844      	ldr	r0, [pc, #272]	; (d4a28 <setup+0x370>)
   d4916:	f000 fda7 	bl	d5468 <_ZN7ADXL34513setAxisOffsetEiii>
  Serial.print("getAxisOffset(&x, &y, &z): ");
   d491a:	f002 fd5b 	bl	d73d4 <_Z16_fetch_usbserialv>
   d491e:	494a      	ldr	r1, [pc, #296]	; (d4a48 <setup+0x390>)
   d4920:	f001 ff9e 	bl	d6860 <_ZN5Print5printEPKc>
  accel.getAxisOffset(&x, &y, &z);
   d4924:	ab05      	add	r3, sp, #20
   d4926:	aa04      	add	r2, sp, #16
   d4928:	a903      	add	r1, sp, #12
   d492a:	483f      	ldr	r0, [pc, #252]	; (d4a28 <setup+0x370>)
   d492c:	f000 fdb0 	bl	d5490 <_ZN7ADXL34513getAxisOffsetEPiS0_S0_>
  Serial.print(x);
   d4930:	f002 fd50 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4934:	220a      	movs	r2, #10
   d4936:	9903      	ldr	r1, [sp, #12]
   d4938:	f7ff fe00 	bl	d453c <_ZN5Print5printIiLi0EEEjT_i>
  Serial.print(" ");
   d493c:	f002 fd4a 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4940:	493b      	ldr	r1, [pc, #236]	; (d4a30 <setup+0x378>)
   d4942:	f001 ff8d 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.print(y);
   d4946:	f002 fd45 	bl	d73d4 <_Z16_fetch_usbserialv>
   d494a:	220a      	movs	r2, #10
   d494c:	9904      	ldr	r1, [sp, #16]
   d494e:	f7ff fdf5 	bl	d453c <_ZN5Print5printIiLi0EEEjT_i>
  Serial.print(" ");
   d4952:	f002 fd3f 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4956:	4936      	ldr	r1, [pc, #216]	; (d4a30 <setup+0x378>)
   d4958:	f001 ff82 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.print(z);
   d495c:	f002 fd3a 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4960:	220a      	movs	r2, #10
   d4962:	9905      	ldr	r1, [sp, #20]
   d4964:	f7ff fdea 	bl	d453c <_ZN5Print5printIiLi0EEEjT_i>
  Serial.println("");
   d4968:	f002 fd34 	bl	d73d4 <_Z16_fetch_usbserialv>
   d496c:	492d      	ldr	r1, [pc, #180]	; (d4a24 <setup+0x36c>)
   d496e:	f001 ff8a 	bl	d6886 <_ZN5Print7printlnEPKc>

  accel.setTapDuration(5);
   d4972:	2105      	movs	r1, #5
   d4974:	482c      	ldr	r0, [pc, #176]	; (d4a28 <setup+0x370>)
   d4976:	f000 fdaf 	bl	d54d8 <_ZN7ADXL34514setTapDurationEi>
  Serial.print("getTapDuration(): ");
   d497a:	f002 fd2b 	bl	d73d4 <_Z16_fetch_usbserialv>
   d497e:	4933      	ldr	r1, [pc, #204]	; (d4a4c <setup+0x394>)
   d4980:	f001 ff6e 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.getTapDuration(), DEC);
   d4984:	f002 fd26 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4988:	4604      	mov	r4, r0
   d498a:	4827      	ldr	r0, [pc, #156]	; (d4a28 <setup+0x370>)
   d498c:	f000 fdb0 	bl	d54f0 <_ZN7ADXL34514getTapDurationEv>
   d4990:	220a      	movs	r2, #10
   d4992:	4601      	mov	r1, r0
   d4994:	4620      	mov	r0, r4
   d4996:	f7ff fdf0 	bl	d457a <_ZN5Print7printlnIiLi0EEEjT_i>

  accel.setDoubleTapLatency(6);
   d499a:	2106      	movs	r1, #6
   d499c:	4822      	ldr	r0, [pc, #136]	; (d4a28 <setup+0x370>)
   d499e:	f000 fdb3 	bl	d5508 <_ZN7ADXL34519setDoubleTapLatencyEi>
  Serial.print("getDoubleTapLatency(): ");
   d49a2:	f002 fd17 	bl	d73d4 <_Z16_fetch_usbserialv>
   d49a6:	492a      	ldr	r1, [pc, #168]	; (d4a50 <setup+0x398>)
   d49a8:	f001 ff5a 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.getDoubleTapLatency(), DEC);
   d49ac:	f002 fd12 	bl	d73d4 <_Z16_fetch_usbserialv>
   d49b0:	4604      	mov	r4, r0
   d49b2:	481d      	ldr	r0, [pc, #116]	; (d4a28 <setup+0x370>)
   d49b4:	f000 fdac 	bl	d5510 <_ZN7ADXL34519getDoubleTapLatencyEv>
   d49b8:	220a      	movs	r2, #10
   d49ba:	4601      	mov	r1, r0
   d49bc:	4620      	mov	r0, r4
   d49be:	f7ff fddc 	bl	d457a <_ZN5Print7printlnIiLi0EEEjT_i>

  accel.setDoubleTapWindow(7);
   d49c2:	2107      	movs	r1, #7
   d49c4:	4818      	ldr	r0, [pc, #96]	; (d4a28 <setup+0x370>)
   d49c6:	f000 fdaf 	bl	d5528 <_ZN7ADXL34518setDoubleTapWindowEi>
  Serial.print("getDoubleTapWindow() ");
   d49ca:	f002 fd03 	bl	d73d4 <_Z16_fetch_usbserialv>
   d49ce:	4921      	ldr	r1, [pc, #132]	; (d4a54 <setup+0x39c>)
   d49d0:	f001 ff46 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.getDoubleTapWindow());
   d49d4:	f002 fcfe 	bl	d73d4 <_Z16_fetch_usbserialv>
   d49d8:	4604      	mov	r4, r0
   d49da:	4813      	ldr	r0, [pc, #76]	; (d4a28 <setup+0x370>)
   d49dc:	f000 fdb0 	bl	d5540 <_ZN7ADXL34518getDoubleTapWindowEv>
   d49e0:	220a      	movs	r2, #10
   d49e2:	4601      	mov	r1, r0
   d49e4:	4620      	mov	r0, r4
   d49e6:	f7ff fdc8 	bl	d457a <_ZN5Print7printlnIiLi0EEEjT_i>

  accel.setActivityThreshold(8);
   d49ea:	2108      	movs	r1, #8
   d49ec:	e034      	b.n	d4a58 <setup+0x3a0>
   d49ee:	bf00      	nop
   d49f0:	9999999a 	.word	0x9999999a
   d49f4:	3fb99999 	.word	0x3fb99999
   d49f8:	9999999a 	.word	0x9999999a
   d49fc:	3ff19999 	.word	0x3ff19999
   d4a00:	cccccccd 	.word	0xcccccccd
   d4a04:	4000cccc 	.word	0x4000cccc
   d4a08:	2003e718 	.word	0x2003e718
   d4a0c:	2003e260 	.word	0x2003e260
   d4a10:	2003e348 	.word	0x2003e348
   d4a14:	2003e3a4 	.word	0x2003e3a4
   d4a18:	000d9745 	.word	0x000d9745
   d4a1c:	2003e2dc 	.word	0x2003e2dc
   d4a20:	000d9757 	.word	0x000d9757
   d4a24:	000d9c8b 	.word	0x000d9c8b
   d4a28:	2003e320 	.word	0x2003e320
   d4a2c:	000d9763 	.word	0x000d9763
   d4a30:	000d982b 	.word	0x000d982b
   d4a34:	000d9771 	.word	0x000d9771
   d4a38:	000d977e 	.word	0x000d977e
   d4a3c:	000d978e 	.word	0x000d978e
   d4a40:	000d979b 	.word	0x000d979b
   d4a44:	000d97a4 	.word	0x000d97a4
   d4a48:	000d97b8 	.word	0x000d97b8
   d4a4c:	000d97d4 	.word	0x000d97d4
   d4a50:	000d97e7 	.word	0x000d97e7
   d4a54:	000d97ff 	.word	0x000d97ff
   d4a58:	48dc      	ldr	r0, [pc, #880]	; (d4dcc <setup+0x714>)
   d4a5a:	f000 fd7d 	bl	d5558 <_ZN7ADXL34520setActivityThresholdEi>
  Serial.print("getActivityThreshold() ");
   d4a5e:	f002 fcb9 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4a62:	49db      	ldr	r1, [pc, #876]	; (d4dd0 <setup+0x718>)
   d4a64:	f001 fefc 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.getActivityThreshold(), DEC);
   d4a68:	f002 fcb4 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4a6c:	4604      	mov	r4, r0
   d4a6e:	48d7      	ldr	r0, [pc, #860]	; (d4dcc <setup+0x714>)
   d4a70:	f000 fd7e 	bl	d5570 <_ZN7ADXL34520getActivityThresholdEv>
   d4a74:	220a      	movs	r2, #10
   d4a76:	4601      	mov	r1, r0
   d4a78:	4620      	mov	r0, r4
   d4a7a:	f7ff fd7e 	bl	d457a <_ZN5Print7printlnIiLi0EEEjT_i>

  accel.setInactivityThreshold(9);
   d4a7e:	2109      	movs	r1, #9
   d4a80:	48d2      	ldr	r0, [pc, #840]	; (d4dcc <setup+0x714>)
   d4a82:	f000 fd81 	bl	d5588 <_ZN7ADXL34522setInactivityThresholdEi>
  Serial.print("getInactivityThreshold() ");
   d4a86:	f002 fca5 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4a8a:	49d2      	ldr	r1, [pc, #840]	; (d4dd4 <setup+0x71c>)
   d4a8c:	f001 fee8 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.getInactivityThreshold(), DEC);
   d4a90:	f002 fca0 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4a94:	4604      	mov	r4, r0
   d4a96:	48cd      	ldr	r0, [pc, #820]	; (d4dcc <setup+0x714>)
   d4a98:	f000 fd82 	bl	d55a0 <_ZN7ADXL34522getInactivityThresholdEv>
   d4a9c:	220a      	movs	r2, #10
   d4a9e:	4601      	mov	r1, r0
   d4aa0:	4620      	mov	r0, r4
   d4aa2:	f7ff fd6a 	bl	d457a <_ZN5Print7printlnIiLi0EEEjT_i>

  accel.setTimeInactivity(10);
   d4aa6:	210a      	movs	r1, #10
   d4aa8:	48c8      	ldr	r0, [pc, #800]	; (d4dcc <setup+0x714>)
   d4aaa:	f000 fd85 	bl	d55b8 <_ZN7ADXL34517setTimeInactivityEi>
  Serial.print("getTimeInactivity(): ");
   d4aae:	f002 fc91 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4ab2:	49c9      	ldr	r1, [pc, #804]	; (d4dd8 <setup+0x720>)
   d4ab4:	f001 fed4 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.getTimeInactivity());
   d4ab8:	f002 fc8c 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4abc:	4604      	mov	r4, r0
   d4abe:	48c3      	ldr	r0, [pc, #780]	; (d4dcc <setup+0x714>)
   d4ac0:	f000 fd86 	bl	d55d0 <_ZN7ADXL34517getTimeInactivityEv>
   d4ac4:	220a      	movs	r2, #10
   d4ac6:	4601      	mov	r1, r0
   d4ac8:	4620      	mov	r0, r4
   d4aca:	f7ff fd56 	bl	d457a <_ZN5Print7printlnIiLi0EEEjT_i>

  accel.setFreeFallThreshold(11);
   d4ace:	210b      	movs	r1, #11
   d4ad0:	48be      	ldr	r0, [pc, #760]	; (d4dcc <setup+0x714>)
   d4ad2:	f000 fd89 	bl	d55e8 <_ZN7ADXL34520setFreeFallThresholdEi>
  Serial.print("getFreeFallThreshold(): ");
   d4ad6:	f002 fc7d 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4ada:	49c0      	ldr	r1, [pc, #768]	; (d4ddc <setup+0x724>)
   d4adc:	f001 fec0 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.getFreeFallThreshold());
   d4ae0:	f002 fc78 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4ae4:	4604      	mov	r4, r0
   d4ae6:	48b9      	ldr	r0, [pc, #740]	; (d4dcc <setup+0x714>)
   d4ae8:	f000 fd8a 	bl	d5600 <_ZN7ADXL34520getFreeFallThresholdEv>
   d4aec:	220a      	movs	r2, #10
   d4aee:	4601      	mov	r1, r0
   d4af0:	4620      	mov	r0, r4
   d4af2:	f7ff fd42 	bl	d457a <_ZN5Print7printlnIiLi0EEEjT_i>

  accel.setFreeFallDuration(12);
   d4af6:	210c      	movs	r1, #12
   d4af8:	48b4      	ldr	r0, [pc, #720]	; (d4dcc <setup+0x714>)
   d4afa:	f000 fd8d 	bl	d5618 <_ZN7ADXL34519setFreeFallDurationEi>
  Serial.print("getFreeFallDuration(): ");
   d4afe:	f002 fc69 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4b02:	49b7      	ldr	r1, [pc, #732]	; (d4de0 <setup+0x728>)
   d4b04:	f001 feac 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.getFreeFallDuration(), DEC);
   d4b08:	f002 fc64 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4b0c:	4604      	mov	r4, r0
   d4b0e:	48af      	ldr	r0, [pc, #700]	; (d4dcc <setup+0x714>)
   d4b10:	f000 fd8e 	bl	d5630 <_ZN7ADXL34519getFreeFallDurationEv>
   d4b14:	220a      	movs	r2, #10
   d4b16:	4601      	mov	r1, r0
   d4b18:	4620      	mov	r0, r4
   d4b1a:	f7ff fd2e 	bl	d457a <_ZN5Print7printlnIiLi0EEEjT_i>

  Serial.print("isActivityXEnabled(): ");
   d4b1e:	f002 fc59 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4b22:	49b0      	ldr	r1, [pc, #704]	; (d4de4 <setup+0x72c>)
   d4b24:	f001 fe9c 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.isActivityXEnabled(), DEC);
   d4b28:	f002 fc54 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4b2c:	4604      	mov	r4, r0
   d4b2e:	48a7      	ldr	r0, [pc, #668]	; (d4dcc <setup+0x714>)
   d4b30:	f000 fe67 	bl	d5802 <_ZN7ADXL34518isActivityXEnabledEv>
   d4b34:	220a      	movs	r2, #10
   d4b36:	4601      	mov	r1, r0
   d4b38:	4620      	mov	r0, r4
   d4b3a:	f7ff fdab 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("isActivityYEnabled(): ");
   d4b3e:	f002 fc49 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4b42:	49a9      	ldr	r1, [pc, #676]	; (d4de8 <setup+0x730>)
   d4b44:	f001 fe8c 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.isActivityYEnabled(), DEC);
   d4b48:	f002 fc44 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4b4c:	4604      	mov	r4, r0
   d4b4e:	489f      	ldr	r0, [pc, #636]	; (d4dcc <setup+0x714>)
   d4b50:	f000 fe5b 	bl	d580a <_ZN7ADXL34518isActivityYEnabledEv>
   d4b54:	220a      	movs	r2, #10
   d4b56:	4601      	mov	r1, r0
   d4b58:	4620      	mov	r0, r4
   d4b5a:	f7ff fd9b 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("isActivityZEnabled(): ");
   d4b5e:	f002 fc39 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4b62:	49a2      	ldr	r1, [pc, #648]	; (d4dec <setup+0x734>)
   d4b64:	f001 fe7c 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.isActivityZEnabled(), DEC);
   d4b68:	f002 fc34 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4b6c:	4604      	mov	r4, r0
   d4b6e:	4897      	ldr	r0, [pc, #604]	; (d4dcc <setup+0x714>)
   d4b70:	f000 fe4f 	bl	d5812 <_ZN7ADXL34518isActivityZEnabledEv>
   d4b74:	220a      	movs	r2, #10
   d4b76:	4601      	mov	r1, r0
   d4b78:	4620      	mov	r0, r4
   d4b7a:	f7ff fd8b 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("isInactivityXEnabled(): ");
   d4b7e:	f002 fc29 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4b82:	499b      	ldr	r1, [pc, #620]	; (d4df0 <setup+0x738>)
   d4b84:	f001 fe6c 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.isInactivityXEnabled(), DEC);
   d4b88:	f002 fc24 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4b8c:	4604      	mov	r4, r0
   d4b8e:	488f      	ldr	r0, [pc, #572]	; (d4dcc <setup+0x714>)
   d4b90:	f000 fe43 	bl	d581a <_ZN7ADXL34520isInactivityXEnabledEv>
   d4b94:	220a      	movs	r2, #10
   d4b96:	4601      	mov	r1, r0
   d4b98:	4620      	mov	r0, r4
   d4b9a:	f7ff fd7b 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("isInactivityYEnabled(): ");
   d4b9e:	f002 fc19 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4ba2:	4994      	ldr	r1, [pc, #592]	; (d4df4 <setup+0x73c>)
   d4ba4:	f001 fe5c 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.isInactivityYEnabled(), DEC);
   d4ba8:	f002 fc14 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4bac:	4604      	mov	r4, r0
   d4bae:	4887      	ldr	r0, [pc, #540]	; (d4dcc <setup+0x714>)
   d4bb0:	f000 fe37 	bl	d5822 <_ZN7ADXL34520isInactivityYEnabledEv>
   d4bb4:	220a      	movs	r2, #10
   d4bb6:	4601      	mov	r1, r0
   d4bb8:	4620      	mov	r0, r4
   d4bba:	f7ff fd6b 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("isInactivityZEnabled(): ");
   d4bbe:	f002 fc09 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4bc2:	498d      	ldr	r1, [pc, #564]	; (d4df8 <setup+0x740>)
   d4bc4:	f001 fe4c 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.isInactivityZEnabled(), DEC);
   d4bc8:	f002 fc04 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4bcc:	4604      	mov	r4, r0
   d4bce:	487f      	ldr	r0, [pc, #508]	; (d4dcc <setup+0x714>)
   d4bd0:	f000 fe2b 	bl	d582a <_ZN7ADXL34520isInactivityZEnabledEv>
   d4bd4:	220a      	movs	r2, #10
   d4bd6:	4601      	mov	r1, r0
   d4bd8:	4620      	mov	r0, r4
   d4bda:	f7ff fd5b 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("isActivityAc(): ");
   d4bde:	f002 fbf9 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4be2:	4986      	ldr	r1, [pc, #536]	; (d4dfc <setup+0x744>)
   d4be4:	f001 fe3c 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.isInactivityAc(), DEC);
   d4be8:	f002 fbf4 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4bec:	4604      	mov	r4, r0
   d4bee:	4877      	ldr	r0, [pc, #476]	; (d4dcc <setup+0x714>)
   d4bf0:	f000 fe1f 	bl	d5832 <_ZN7ADXL34514isInactivityAcEv>
   d4bf4:	220a      	movs	r2, #10
   d4bf6:	4601      	mov	r1, r0
   d4bf8:	4620      	mov	r0, r4
   d4bfa:	f7ff fd4b 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>

  accel.setActivityAc(true);
   d4bfe:	2101      	movs	r1, #1
   d4c00:	4872      	ldr	r0, [pc, #456]	; (d4dcc <setup+0x714>)
   d4c02:	f000 fdbf 	bl	d5784 <_ZN7ADXL34513setActivityAcEb>
  accel.setInactivityAc(true);
   d4c06:	2101      	movs	r1, #1
   d4c08:	4870      	ldr	r0, [pc, #448]	; (d4dcc <setup+0x714>)
   d4c0a:	f000 fdc0 	bl	d578e <_ZN7ADXL34515setInactivityAcEb>

  accel.setSuppressBit(true);
   d4c0e:	2101      	movs	r1, #1
   d4c10:	486e      	ldr	r0, [pc, #440]	; (d4dcc <setup+0x714>)
   d4c12:	f000 fdc1 	bl	d5798 <_ZN7ADXL34514setSuppressBitEb>
  Serial.print("getSuppressBit(); true? ");
   d4c16:	f002 fbdd 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4c1a:	4979      	ldr	r1, [pc, #484]	; (d4e00 <setup+0x748>)
   d4c1c:	f001 fe20 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.getSuppressBit());
   d4c20:	f002 fbd8 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4c24:	4604      	mov	r4, r0
   d4c26:	4869      	ldr	r0, [pc, #420]	; (d4dcc <setup+0x714>)
   d4c28:	f000 fe07 	bl	d583a <_ZN7ADXL34514getSuppressBitEv>
   d4c2c:	220a      	movs	r2, #10
   d4c2e:	4601      	mov	r1, r0
   d4c30:	4620      	mov	r0, r4
   d4c32:	f7ff fd2f 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>

  accel.setSuppressBit(false);
   d4c36:	2100      	movs	r1, #0
   d4c38:	4864      	ldr	r0, [pc, #400]	; (d4dcc <setup+0x714>)
   d4c3a:	f000 fdad 	bl	d5798 <_ZN7ADXL34514setSuppressBitEb>
  Serial.print("getSuppressBit(); false? ");
   d4c3e:	f002 fbc9 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4c42:	4970      	ldr	r1, [pc, #448]	; (d4e04 <setup+0x74c>)
   d4c44:	f001 fe0c 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.getSuppressBit());
   d4c48:	f002 fbc4 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4c4c:	4604      	mov	r4, r0
   d4c4e:	485f      	ldr	r0, [pc, #380]	; (d4dcc <setup+0x714>)
   d4c50:	f000 fdf3 	bl	d583a <_ZN7ADXL34514getSuppressBitEv>
   d4c54:	220a      	movs	r2, #10
   d4c56:	4601      	mov	r1, r0
   d4c58:	4620      	mov	r0, r4
   d4c5a:	f7ff fd1b 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>
  
  accel.setTapDetectionOnX(true);
   d4c5e:	2101      	movs	r1, #1
   d4c60:	485a      	ldr	r0, [pc, #360]	; (d4dcc <setup+0x714>)
   d4c62:	f000 fd9e 	bl	d57a2 <_ZN7ADXL34518setTapDetectionOnXEb>
  Serial.print("isTapDetectionOnX(); true? ");
   d4c66:	f002 fbb5 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4c6a:	4967      	ldr	r1, [pc, #412]	; (d4e08 <setup+0x750>)
   d4c6c:	f001 fdf8 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.isTapDetectionOnX(), DEC);
   d4c70:	f002 fbb0 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4c74:	4604      	mov	r4, r0
   d4c76:	4855      	ldr	r0, [pc, #340]	; (d4dcc <setup+0x714>)
   d4c78:	f000 fde3 	bl	d5842 <_ZN7ADXL34517isTapDetectionOnXEv>
   d4c7c:	220a      	movs	r2, #10
   d4c7e:	4601      	mov	r1, r0
   d4c80:	4620      	mov	r0, r4
   d4c82:	f7ff fd07 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>
  accel.setTapDetectionOnX(false);
   d4c86:	2100      	movs	r1, #0
   d4c88:	4850      	ldr	r0, [pc, #320]	; (d4dcc <setup+0x714>)
   d4c8a:	f000 fd8a 	bl	d57a2 <_ZN7ADXL34518setTapDetectionOnXEb>
  Serial.print("isTapDetectionOnX(); false? ");
   d4c8e:	f002 fba1 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4c92:	495e      	ldr	r1, [pc, #376]	; (d4e0c <setup+0x754>)
   d4c94:	f001 fde4 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.isTapDetectionOnX(), DEC);
   d4c98:	f002 fb9c 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4c9c:	4604      	mov	r4, r0
   d4c9e:	484b      	ldr	r0, [pc, #300]	; (d4dcc <setup+0x714>)
   d4ca0:	f000 fdcf 	bl	d5842 <_ZN7ADXL34517isTapDetectionOnXEv>
   d4ca4:	220a      	movs	r2, #10
   d4ca6:	4601      	mov	r1, r0
   d4ca8:	4620      	mov	r0, r4
   d4caa:	f7ff fcf3 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>

  accel.setTapDetectionOnY(true);
   d4cae:	2101      	movs	r1, #1
   d4cb0:	4846      	ldr	r0, [pc, #280]	; (d4dcc <setup+0x714>)
   d4cb2:	f000 fd7b 	bl	d57ac <_ZN7ADXL34518setTapDetectionOnYEb>
  Serial.print("isTapDetectionOnY(); true? ");
   d4cb6:	f002 fb8d 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4cba:	4955      	ldr	r1, [pc, #340]	; (d4e10 <setup+0x758>)
   d4cbc:	f001 fdd0 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.isTapDetectionOnY(), DEC);
   d4cc0:	f002 fb88 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4cc4:	4604      	mov	r4, r0
   d4cc6:	4841      	ldr	r0, [pc, #260]	; (d4dcc <setup+0x714>)
   d4cc8:	f000 fdbf 	bl	d584a <_ZN7ADXL34517isTapDetectionOnYEv>
   d4ccc:	220a      	movs	r2, #10
   d4cce:	4601      	mov	r1, r0
   d4cd0:	4620      	mov	r0, r4
   d4cd2:	f7ff fcdf 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>
  accel.setTapDetectionOnY(false);
   d4cd6:	2100      	movs	r1, #0
   d4cd8:	483c      	ldr	r0, [pc, #240]	; (d4dcc <setup+0x714>)
   d4cda:	f000 fd67 	bl	d57ac <_ZN7ADXL34518setTapDetectionOnYEb>
  Serial.print("isTapDetectionOnY(); false? ");
   d4cde:	f002 fb79 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4ce2:	494c      	ldr	r1, [pc, #304]	; (d4e14 <setup+0x75c>)
   d4ce4:	f001 fdbc 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.isTapDetectionOnY(), DEC);
   d4ce8:	f002 fb74 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4cec:	4604      	mov	r4, r0
   d4cee:	4837      	ldr	r0, [pc, #220]	; (d4dcc <setup+0x714>)
   d4cf0:	f000 fdab 	bl	d584a <_ZN7ADXL34517isTapDetectionOnYEv>
   d4cf4:	220a      	movs	r2, #10
   d4cf6:	4601      	mov	r1, r0
   d4cf8:	4620      	mov	r0, r4
   d4cfa:	f7ff fccb 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>

  accel.setTapDetectionOnZ(true);
   d4cfe:	2101      	movs	r1, #1
   d4d00:	4832      	ldr	r0, [pc, #200]	; (d4dcc <setup+0x714>)
   d4d02:	f000 fd58 	bl	d57b6 <_ZN7ADXL34518setTapDetectionOnZEb>
  Serial.print("isTapDetectionOnZ(); true? ");
   d4d06:	f002 fb65 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4d0a:	4943      	ldr	r1, [pc, #268]	; (d4e18 <setup+0x760>)
   d4d0c:	f001 fda8 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.isTapDetectionOnZ(), DEC);
   d4d10:	f002 fb60 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4d14:	4604      	mov	r4, r0
   d4d16:	482d      	ldr	r0, [pc, #180]	; (d4dcc <setup+0x714>)
   d4d18:	f000 fd9b 	bl	d5852 <_ZN7ADXL34517isTapDetectionOnZEv>
   d4d1c:	220a      	movs	r2, #10
   d4d1e:	4601      	mov	r1, r0
   d4d20:	4620      	mov	r0, r4
   d4d22:	f7ff fcb7 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>
  accel.setTapDetectionOnZ(false);
   d4d26:	2100      	movs	r1, #0
   d4d28:	4828      	ldr	r0, [pc, #160]	; (d4dcc <setup+0x714>)
   d4d2a:	f000 fd44 	bl	d57b6 <_ZN7ADXL34518setTapDetectionOnZEb>
  Serial.print("isTapDetectionOnZ(); false? ");
   d4d2e:	f002 fb51 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4d32:	493a      	ldr	r1, [pc, #232]	; (d4e1c <setup+0x764>)
   d4d34:	f001 fd94 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.isTapDetectionOnZ(), DEC);
   d4d38:	f002 fb4c 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4d3c:	4604      	mov	r4, r0
   d4d3e:	4823      	ldr	r0, [pc, #140]	; (d4dcc <setup+0x714>)
   d4d40:	f000 fd87 	bl	d5852 <_ZN7ADXL34517isTapDetectionOnZEv>
   d4d44:	220a      	movs	r2, #10
   d4d46:	4601      	mov	r1, r0
   d4d48:	4620      	mov	r0, r4
   d4d4a:	f7ff fca3 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>

  accel.setActivityX(true);
   d4d4e:	2101      	movs	r1, #1
   d4d50:	481e      	ldr	r0, [pc, #120]	; (d4dcc <setup+0x714>)
   d4d52:	f000 fcf9 	bl	d5748 <_ZN7ADXL34512setActivityXEb>
  accel.setActivityY(true);
   d4d56:	2101      	movs	r1, #1
   d4d58:	481c      	ldr	r0, [pc, #112]	; (d4dcc <setup+0x714>)
   d4d5a:	f000 fcfa 	bl	d5752 <_ZN7ADXL34512setActivityYEb>
  accel.setActivityZ(true);
   d4d5e:	2101      	movs	r1, #1
   d4d60:	481a      	ldr	r0, [pc, #104]	; (d4dcc <setup+0x714>)
   d4d62:	f000 fcfb 	bl	d575c <_ZN7ADXL34512setActivityZEb>

  accel.setInactivityX(false);
   d4d66:	2100      	movs	r1, #0
   d4d68:	4818      	ldr	r0, [pc, #96]	; (d4dcc <setup+0x714>)
   d4d6a:	f000 fcfc 	bl	d5766 <_ZN7ADXL34514setInactivityXEb>
  accel.setInactivityY(false);
   d4d6e:	2100      	movs	r1, #0
   d4d70:	4816      	ldr	r0, [pc, #88]	; (d4dcc <setup+0x714>)
   d4d72:	f000 fcfd 	bl	d5770 <_ZN7ADXL34514setInactivityYEb>
  accel.setInactivityZ(false);
   d4d76:	2100      	movs	r1, #0
   d4d78:	4814      	ldr	r0, [pc, #80]	; (d4dcc <setup+0x714>)
   d4d7a:	f000 fcfe 	bl	d577a <_ZN7ADXL34514setInactivityZEb>

  Serial.print("isActivitySourceOnX(): ");
   d4d7e:	f002 fb29 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4d82:	4927      	ldr	r1, [pc, #156]	; (d4e20 <setup+0x768>)
   d4d84:	f001 fd6c 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.isActivitySourceOnX(), DEC);
   d4d88:	f002 fb24 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4d8c:	4604      	mov	r4, r0
   d4d8e:	480f      	ldr	r0, [pc, #60]	; (d4dcc <setup+0x714>)
   d4d90:	f000 fd63 	bl	d585a <_ZN7ADXL34519isActivitySourceOnXEv>
   d4d94:	220a      	movs	r2, #10
   d4d96:	4601      	mov	r1, r0
   d4d98:	4620      	mov	r0, r4
   d4d9a:	f7ff fc7b 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("accel.isActivitySourceOnY(): ");
   d4d9e:	f002 fb19 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4da2:	4920      	ldr	r1, [pc, #128]	; (d4e24 <setup+0x76c>)
   d4da4:	f001 fd5c 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.isActivitySourceOnY(), DEC);
   d4da8:	f002 fb14 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4dac:	4604      	mov	r4, r0
   d4dae:	4807      	ldr	r0, [pc, #28]	; (d4dcc <setup+0x714>)
   d4db0:	f000 fd57 	bl	d5862 <_ZN7ADXL34519isActivitySourceOnYEv>
   d4db4:	220a      	movs	r2, #10
   d4db6:	4601      	mov	r1, r0
   d4db8:	4620      	mov	r0, r4
   d4dba:	f7ff fc6b 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("accel.isActivitySourceOnZ(): ");
   d4dbe:	f002 fb09 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4dc2:	4919      	ldr	r1, [pc, #100]	; (d4e28 <setup+0x770>)
   d4dc4:	f001 fd4c 	bl	d6860 <_ZN5Print5printEPKc>
   d4dc8:	e030      	b.n	d4e2c <setup+0x774>
   d4dca:	bf00      	nop
   d4dcc:	2003e320 	.word	0x2003e320
   d4dd0:	000d9815 	.word	0x000d9815
   d4dd4:	000d982d 	.word	0x000d982d
   d4dd8:	000d9847 	.word	0x000d9847
   d4ddc:	000d985d 	.word	0x000d985d
   d4de0:	000d9876 	.word	0x000d9876
   d4de4:	000d988e 	.word	0x000d988e
   d4de8:	000d98a5 	.word	0x000d98a5
   d4dec:	000d98bc 	.word	0x000d98bc
   d4df0:	000d98d3 	.word	0x000d98d3
   d4df4:	000d98ec 	.word	0x000d98ec
   d4df8:	000d9905 	.word	0x000d9905
   d4dfc:	000d991e 	.word	0x000d991e
   d4e00:	000d992f 	.word	0x000d992f
   d4e04:	000d9948 	.word	0x000d9948
   d4e08:	000d9962 	.word	0x000d9962
   d4e0c:	000d997e 	.word	0x000d997e
   d4e10:	000d999b 	.word	0x000d999b
   d4e14:	000d99b7 	.word	0x000d99b7
   d4e18:	000d99d4 	.word	0x000d99d4
   d4e1c:	000d99f0 	.word	0x000d99f0
   d4e20:	000d9a0d 	.word	0x000d9a0d
   d4e24:	000d9a25 	.word	0x000d9a25
   d4e28:	000d9a43 	.word	0x000d9a43
  Serial.println(accel.isActivitySourceOnZ(), DEC);
   d4e2c:	f002 fad2 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4e30:	4604      	mov	r4, r0
   d4e32:	4885      	ldr	r0, [pc, #532]	; (d5048 <setup+0x990>)
   d4e34:	f000 fd19 	bl	d586a <_ZN7ADXL34519isActivitySourceOnZEv>
   d4e38:	220a      	movs	r2, #10
   d4e3a:	4601      	mov	r1, r0
   d4e3c:	4620      	mov	r0, r4
   d4e3e:	f7ff fc29 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("accel.isTapSourceOnX(): ");
   d4e42:	f002 fac7 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4e46:	4981      	ldr	r1, [pc, #516]	; (d504c <setup+0x994>)
   d4e48:	f001 fd0a 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.isTapSourceOnX(), DEC);
   d4e4c:	f002 fac2 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4e50:	4604      	mov	r4, r0
   d4e52:	487d      	ldr	r0, [pc, #500]	; (d5048 <setup+0x990>)
   d4e54:	f000 fd0d 	bl	d5872 <_ZN7ADXL34514isTapSourceOnXEv>
   d4e58:	220a      	movs	r2, #10
   d4e5a:	4601      	mov	r1, r0
   d4e5c:	4620      	mov	r0, r4
   d4e5e:	f7ff fc19 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("accel.isTapSourceOnY(): ");
   d4e62:	f002 fab7 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4e66:	497a      	ldr	r1, [pc, #488]	; (d5050 <setup+0x998>)
   d4e68:	f001 fcfa 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.isTapSourceOnY(), DEC);
   d4e6c:	f002 fab2 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4e70:	4604      	mov	r4, r0
   d4e72:	4875      	ldr	r0, [pc, #468]	; (d5048 <setup+0x990>)
   d4e74:	f000 fd01 	bl	d587a <_ZN7ADXL34514isTapSourceOnYEv>
   d4e78:	220a      	movs	r2, #10
   d4e7a:	4601      	mov	r1, r0
   d4e7c:	4620      	mov	r0, r4
   d4e7e:	f7ff fc09 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("accel.isTapSourceOnZ(): ");
   d4e82:	f002 faa7 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4e86:	4973      	ldr	r1, [pc, #460]	; (d5054 <setup+0x99c>)
   d4e88:	f001 fcea 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.isTapSourceOnZ(), DEC);
   d4e8c:	f002 faa2 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4e90:	4604      	mov	r4, r0
   d4e92:	486d      	ldr	r0, [pc, #436]	; (d5048 <setup+0x990>)
   d4e94:	f000 fcf5 	bl	d5882 <_ZN7ADXL34514isTapSourceOnZEv>
   d4e98:	220a      	movs	r2, #10
   d4e9a:	4601      	mov	r1, r0
   d4e9c:	4620      	mov	r0, r4
   d4e9e:	f7ff fbf9 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("accel.isAsleep(): ");
   d4ea2:	f002 fa97 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4ea6:	496c      	ldr	r1, [pc, #432]	; (d5058 <setup+0x9a0>)
   d4ea8:	f001 fcda 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.isAsleep(), DEC);
   d4eac:	f002 fa92 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4eb0:	4604      	mov	r4, r0
   d4eb2:	4865      	ldr	r0, [pc, #404]	; (d5048 <setup+0x990>)
   d4eb4:	f000 fce9 	bl	d588a <_ZN7ADXL3458isAsleepEv>
   d4eb8:	220a      	movs	r2, #10
   d4eba:	4601      	mov	r1, r0
   d4ebc:	4620      	mov	r0, r4
   d4ebe:	f7ff fbe9 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>

  Serial.print("accel.isLowPower(): ");
   d4ec2:	f002 fa87 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4ec6:	4965      	ldr	r1, [pc, #404]	; (d505c <setup+0x9a4>)
   d4ec8:	f001 fcca 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.isLowPower(), DEC);
   d4ecc:	f002 fa82 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4ed0:	4604      	mov	r4, r0
   d4ed2:	485d      	ldr	r0, [pc, #372]	; (d5048 <setup+0x990>)
   d4ed4:	f000 fcdd 	bl	d5892 <_ZN7ADXL34510isLowPowerEv>
   d4ed8:	220a      	movs	r2, #10
   d4eda:	4601      	mov	r1, r0
   d4edc:	4620      	mov	r0, r4
   d4ede:	f7ff fbd9 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>
  accel.setLowPower(false);
   d4ee2:	2100      	movs	r1, #0
   d4ee4:	4858      	ldr	r0, [pc, #352]	; (d5048 <setup+0x990>)
   d4ee6:	f000 fc6b 	bl	d57c0 <_ZN7ADXL34511setLowPowerEb>
  
  accel.setRate(3.14159);
   d4eea:	ed9f 0b55 	vldr	d0, [pc, #340]	; d5040 <setup+0x988>
   d4eee:	4856      	ldr	r0, [pc, #344]	; (d5048 <setup+0x990>)
   d4ef0:	f000 fbd4 	bl	d569c <_ZN7ADXL3457setRateEd>
  Serial.print("getRate(): 3.14159?");
   d4ef4:	f002 fa6e 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4ef8:	4959      	ldr	r1, [pc, #356]	; (d5060 <setup+0x9a8>)
   d4efa:	f001 fcb1 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.getRate());
   d4efe:	f002 fa69 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4f02:	4604      	mov	r4, r0
   d4f04:	4850      	ldr	r0, [pc, #320]	; (d5048 <setup+0x990>)
   d4f06:	f000 fb9f 	bl	d5648 <_ZN7ADXL3457getRateEv>
   d4f0a:	2102      	movs	r1, #2
   d4f0c:	4620      	mov	r0, r4
   d4f0e:	f001 fda6 	bl	d6a5e <_ZN5Print7printlnEdi>

  Serial.print("getInterruptSource(): ");
   d4f12:	f002 fa5f 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4f16:	4953      	ldr	r1, [pc, #332]	; (d5064 <setup+0x9ac>)
   d4f18:	f001 fca2 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.getInterruptSource(), DEC);
   d4f1c:	f002 fa5a 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4f20:	4604      	mov	r4, r0
   d4f22:	4849      	ldr	r0, [pc, #292]	; (d5048 <setup+0x990>)
   d4f24:	f000 fbe2 	bl	d56ec <_ZN7ADXL34518getInterruptSourceEv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4f28:	220a      	movs	r2, #10
   d4f2a:	4601      	mov	r1, r0
   d4f2c:	4620      	mov	r0, r4
   d4f2e:	f001 fcb4 	bl	d689a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4f32:	4620      	mov	r0, r4
   d4f34:	f001 fc9b 	bl	d686e <_ZN5Print7printlnEv>

  Serial.print("getInterruptSource(1): ");
   d4f38:	f002 fa4c 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4f3c:	494a      	ldr	r1, [pc, #296]	; (d5068 <setup+0x9b0>)
   d4f3e:	f001 fc8f 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.getInterruptSource(1), DEC);
   d4f42:	f002 fa47 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4f46:	2101      	movs	r1, #1
   d4f48:	4604      	mov	r4, r0
   d4f4a:	483f      	ldr	r0, [pc, #252]	; (d5048 <setup+0x990>)
   d4f4c:	f000 fca5 	bl	d589a <_ZN7ADXL34518getInterruptSourceEh>
   d4f50:	220a      	movs	r2, #10
   d4f52:	4601      	mov	r1, r0
   d4f54:	4620      	mov	r0, r4
   d4f56:	f7ff fb9d 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>
  
  Serial.print("getInterruptMapping(1): ");
   d4f5a:	f002 fa3b 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4f5e:	4943      	ldr	r1, [pc, #268]	; (d506c <setup+0x9b4>)
   d4f60:	f001 fc7e 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.getInterruptMapping(1), DEC);
   d4f64:	f002 fa36 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4f68:	2101      	movs	r1, #1
   d4f6a:	4604      	mov	r4, r0
   d4f6c:	4836      	ldr	r0, [pc, #216]	; (d5048 <setup+0x990>)
   d4f6e:	f000 fc98 	bl	d58a2 <_ZN7ADXL34519getInterruptMappingEh>
   d4f72:	220a      	movs	r2, #10
   d4f74:	4601      	mov	r1, r0
   d4f76:	4620      	mov	r0, r4
   d4f78:	f7ff fb8c 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>
  
  accel.setInterruptMapping(1, true);
   d4f7c:	2201      	movs	r2, #1
   d4f7e:	4611      	mov	r1, r2
   d4f80:	4831      	ldr	r0, [pc, #196]	; (d5048 <setup+0x990>)
   d4f82:	f000 fc22 	bl	d57ca <_ZN7ADXL34519setInterruptMappingEhb>
  Serial.print("isInterruptEnabled(1): ");
   d4f86:	f002 fa25 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4f8a:	4939      	ldr	r1, [pc, #228]	; (d5070 <setup+0x9b8>)
   d4f8c:	f001 fc68 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.isInterruptEnabled(1));
   d4f90:	f002 fa20 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4f94:	2101      	movs	r1, #1
   d4f96:	4604      	mov	r4, r0
   d4f98:	482b      	ldr	r0, [pc, #172]	; (d5048 <setup+0x990>)
   d4f9a:	f000 fc86 	bl	d58aa <_ZN7ADXL34518isInterruptEnabledEh>
   d4f9e:	220a      	movs	r2, #10
   d4fa0:	4601      	mov	r1, r0
   d4fa2:	4620      	mov	r0, r4
   d4fa4:	f7ff fb76 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>
  
  accel.setInterrupt(1, true);
   d4fa8:	2201      	movs	r2, #1
   d4faa:	4611      	mov	r1, r2
   d4fac:	4826      	ldr	r0, [pc, #152]	; (d5048 <setup+0x990>)
   d4fae:	f000 fc11 	bl	d57d4 <_ZN7ADXL34512setInterruptEhb>

  accel.setSelfTestBit(false);
   d4fb2:	2100      	movs	r1, #0
   d4fb4:	4824      	ldr	r0, [pc, #144]	; (d5048 <setup+0x990>)
   d4fb6:	f000 fbc2 	bl	d573e <_ZN7ADXL34514setSelfTestBitEb>
  Serial.print("getSelfTestBit(): ");
   d4fba:	f002 fa0b 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4fbe:	492d      	ldr	r1, [pc, #180]	; (d5074 <setup+0x9bc>)
   d4fc0:	f001 fc4e 	bl	d6860 <_ZN5Print5printEPKc>
  Serial.println(accel.getSelfTestBit(), DEC);
   d4fc4:	f002 fa06 	bl	d73d4 <_Z16_fetch_usbserialv>
   d4fc8:	4604      	mov	r4, r0
   d4fca:	481f      	ldr	r0, [pc, #124]	; (d5048 <setup+0x990>)
   d4fcc:	f000 fc15 	bl	d57fa <_ZN7ADXL34514getSelfTestBitEv>
   d4fd0:	220a      	movs	r2, #10
   d4fd2:	4601      	mov	r1, r0
   d4fd4:	4620      	mov	r0, r4
   d4fd6:	f7ff fb5d 	bl	d4694 <_ZN5Print7printlnIbLi0EEEjT_i>

  accel.printAllRegister();
   d4fda:	481b      	ldr	r0, [pc, #108]	; (d5048 <setup+0x990>)
   d4fdc:	f000 fc82 	bl	d58e4 <_ZN7ADXL34516printAllRegisterEv>

//set up communication with the ADXL and the Argon
  Wire.begin(); //initiate the Wirelibrary
   d4fe0:	f002 fb5c 	bl	d769c <_Z19__fetch_global_Wirev>
   d4fe4:	f001 f9d4 	bl	d6390 <_ZN7TwoWire5beginEv>
  // set ADXL345 in measuring mode
  Wire.beginTransmission(ADXL345); //start communicating with the Argon
   d4fe8:	f002 fb58 	bl	d769c <_Z19__fetch_global_Wirev>
   d4fec:	4b22      	ldr	r3, [pc, #136]	; (d5078 <setup+0x9c0>)
   d4fee:	6819      	ldr	r1, [r3, #0]
   d4ff0:	f001 fa09 	bl	d6406 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x2D); //access/talk to POWER_CTL register - 0x2D
   d4ff4:	f002 fb52 	bl	d769c <_Z19__fetch_global_Wirev>
   d4ff8:	212d      	movs	r1, #45	; 0x2d
   d4ffa:	f7ff f886 	bl	d410a <_ZN7TwoWire5writeEi>
  //Enable measurement
  Wire.write(8); //(8dec -> 0000 1000 binary) Bit D3 High for measuring enable
   d4ffe:	f002 fb4d 	bl	d769c <_Z19__fetch_global_Wirev>
   d5002:	2108      	movs	r1, #8
   d5004:	f7ff f881 	bl	d410a <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d5008:	f002 fb48 	bl	d769c <_Z19__fetch_global_Wirev>
   d500c:	f001 fa02 	bl	d6414 <_ZN7TwoWire15endTransmissionEv>
  delay(10);
   d5010:	200a      	movs	r0, #10
   d5012:	f001 f917 	bl	d6244 <delay>

  //set up haptic motor driver
 Serial.println("DRV test");
   d5016:	f002 f9dd 	bl	d73d4 <_Z16_fetch_usbserialv>
   d501a:	4918      	ldr	r1, [pc, #96]	; (d507c <setup+0x9c4>)
   d501c:	f001 fc33 	bl	d6886 <_ZN5Print7printlnEPKc>
 drv.begin();
   d5020:	4817      	ldr	r0, [pc, #92]	; (d5080 <setup+0x9c8>)
   d5022:	f000 f8ca 	bl	d51ba <_ZN16Adafruit_DRV26055beginEv>

// I2C trigger by sending 'go' command 
  // default, internal trigger when sending GO command
 drv.setMode(DRV2605_MODE_INTTRIG);
   d5026:	2100      	movs	r1, #0
   d5028:	4815      	ldr	r0, [pc, #84]	; (d5080 <setup+0x9c8>)
   d502a:	f000 f920 	bl	d526e <_ZN16Adafruit_DRV26057setModeEh>

 drv.selectLibrary(1);
   d502e:	2101      	movs	r1, #1
   d5030:	4813      	ldr	r0, [pc, #76]	; (d5080 <setup+0x9c8>)
   d5032:	f000 f914 	bl	d525e <_ZN16Adafruit_DRV260513selectLibraryEh>
// //configure which kind of vibrations to use: set to different variables for differnt options? for now assign differnt vibes for differnt frequencies.
//   drv.setWaveform(0, 84);  // ramp up medium 1, see datasheet part 11.2
//   drv.setWaveform(1, 1);  // strong click 100%, see datasheet part 11.2
//   drv.setWaveform(2, 0);  // end of waveforms
//   //end of driver motor set up
}
   d5036:	b019      	add	sp, #100	; 0x64
   d5038:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d503a:	bf00      	nop
   d503c:	f3af 8000 	nop.w
   d5040:	f01b866e 	.word	0xf01b866e
   d5044:	400921f9 	.word	0x400921f9
   d5048:	2003e320 	.word	0x2003e320
   d504c:	000d9a61 	.word	0x000d9a61
   d5050:	000d9a7a 	.word	0x000d9a7a
   d5054:	000d9a93 	.word	0x000d9a93
   d5058:	000d9aac 	.word	0x000d9aac
   d505c:	000d9abf 	.word	0x000d9abf
   d5060:	000d9ad4 	.word	0x000d9ad4
   d5064:	000d9ae8 	.word	0x000d9ae8
   d5068:	000d9aff 	.word	0x000d9aff
   d506c:	000d9b17 	.word	0x000d9b17
   d5070:	000d9b30 	.word	0x000d9b30
   d5074:	000d9b48 	.word	0x000d9b48
   d5078:	2003e264 	.word	0x2003e264
   d507c:	000d9b5b 	.word	0x000d9b5b
   d5080:	2003e3a0 	.word	0x2003e3a0

000d5084 <_GLOBAL__sub_I_SystemMode>:
  outMessage.addInt(random(0, 4096));
  outMessage.addInt(random(0, 4096));
  outMessage.addInt(random(0, 4096));
  outMessage.addInt(random(0, 4096));
  outMessage.send( Udp, remoteIP, 8000 );
}
   d5084:	b573      	push	{r0, r1, r4, r5, r6, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5086:	f000 feb9 	bl	d5dfc <HAL_Pin_Map>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d508a:	4c24      	ldr	r4, [pc, #144]	; (d511c <_GLOBAL__sub_I_SystemMode+0x98>)

/* THESE ARE PARTICLE SPECIFIC PARAMETERS APPLIED AT CODE RUNTIME */
/* RUN ALL PARTICLE CLOUD COMMUNICATION IN SEPARATE THREAD */
SYSTEM_THREAD(ENABLED);
/* HOW TO CONNECT TO WiFi & INTERNET: AUTOMATIC, SEMI_AUTOMATIC, MANUAL */  
SYSTEM_MODE(SEMI_AUTOMATIC);
   d508c:	4d24      	ldr	r5, [pc, #144]	; (d5120 <_GLOBAL__sub_I_SystemMode+0x9c>)
unsigned int localPort = 8888;
//IPAddress multicastAddress(224,0,0,0);

// A UDP instance to let us send and receive packets over UDP
UDP Udp;
IPAddress argonIP;
   d508e:	4e25      	ldr	r6, [pc, #148]	; (d5124 <_GLOBAL__sub_I_SystemMode+0xa0>)
 * Date:
 */

/* THESE ARE PARTICLE SPECIFIC PARAMETERS APPLIED AT CODE RUNTIME */
/* RUN ALL PARTICLE CLOUD COMMUNICATION IN SEPARATE THREAD */
SYSTEM_THREAD(ENABLED);
   d5090:	2100      	movs	r1, #0
   d5092:	2001      	movs	r0, #1
   d5094:	f001 f832 	bl	d60fc <system_thread_set_state>
   d5098:	2300      	movs	r3, #0
   d509a:	6023      	str	r3, [r4, #0]
   d509c:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d509e:	71a3      	strb	r3, [r4, #6]
   d50a0:	8123      	strh	r3, [r4, #8]
   d50a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d50a6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d50a8:	2002      	movs	r0, #2
   d50aa:	f001 f817 	bl	d60dc <set_system_mode>
/* HOW TO CONNECT TO WiFi & INTERNET: AUTOMATIC, SEMI_AUTOMATIC, MANUAL */  
SYSTEM_MODE(SEMI_AUTOMATIC);
   d50ae:	462a      	mov	r2, r5
   d50b0:	491d      	ldr	r1, [pc, #116]	; (d5128 <_GLOBAL__sub_I_SystemMode+0xa4>)
   d50b2:	4620      	mov	r0, r4
   d50b4:	f002 fb18 	bl	d76e8 <__aeabi_atexit>
// UDP Port used for two way communication
unsigned int localPort = 8888;
//IPAddress multicastAddress(224,0,0,0);

// A UDP instance to let us send and receive packets over UDP
UDP Udp;
   d50b8:	4c1c      	ldr	r4, [pc, #112]	; (d512c <_GLOBAL__sub_I_SystemMode+0xa8>)

//motor driver library
#include "adafruit-drv2605-photon.h"


Adafruit_DRV2605 drv;
   d50ba:	481d      	ldr	r0, [pc, #116]	; (d5130 <_GLOBAL__sub_I_SystemMode+0xac>)
   d50bc:	f000 f844 	bl	d5148 <_ZN16Adafruit_DRV2605C1Ev>


//Accelerometer variables
ADXL345 accel;
   d50c0:	481c      	ldr	r0, [pc, #112]	; (d5134 <_GLOBAL__sub_I_SystemMode+0xb0>)
   d50c2:	f000 f8dd 	bl	d5280 <_ZN7ADXL345C1Ev>
// UDP Port used for two way communication
unsigned int localPort = 8888;
//IPAddress multicastAddress(224,0,0,0);

// A UDP instance to let us send and receive packets over UDP
UDP Udp;
   d50c6:	4620      	mov	r0, r4
   d50c8:	f002 f81c 	bl	d7104 <_ZN3UDPC1Ev>
   d50cc:	462a      	mov	r2, r5
   d50ce:	491a      	ldr	r1, [pc, #104]	; (d5138 <_GLOBAL__sub_I_SystemMode+0xb4>)
   d50d0:	4620      	mov	r0, r4
IPAddress argonIP;
   d50d2:	4c1a      	ldr	r4, [pc, #104]	; (d513c <_GLOBAL__sub_I_SystemMode+0xb8>)
// UDP Port used for two way communication
unsigned int localPort = 8888;
//IPAddress multicastAddress(224,0,0,0);

// A UDP instance to let us send and receive packets over UDP
UDP Udp;
   d50d4:	f002 fb08 	bl	d76e8 <__aeabi_atexit>
IPAddress argonIP;
   d50d8:	4630      	mov	r0, r6
   d50da:	f001 f9d5 	bl	d6488 <_ZN9IPAddressC1Ev>
   d50de:	462a      	mov	r2, r5
   d50e0:	4621      	mov	r1, r4
   d50e2:	4630      	mov	r0, r6
IPAddress remoteIP(192,168,1,107);
   d50e4:	4e16      	ldr	r6, [pc, #88]	; (d5140 <_GLOBAL__sub_I_SystemMode+0xbc>)
unsigned int localPort = 8888;
//IPAddress multicastAddress(224,0,0,0);

// A UDP instance to let us send and receive packets over UDP
UDP Udp;
IPAddress argonIP;
   d50e6:	f002 faff 	bl	d76e8 <__aeabi_atexit>
IPAddress remoteIP(192,168,1,107);
   d50ea:	236b      	movs	r3, #107	; 0x6b
   d50ec:	9300      	str	r3, [sp, #0]
   d50ee:	22a8      	movs	r2, #168	; 0xa8
   d50f0:	2301      	movs	r3, #1
   d50f2:	21c0      	movs	r1, #192	; 0xc0
   d50f4:	4630      	mov	r0, r6
   d50f6:	f001 fa0b 	bl	d6510 <_ZN9IPAddressC1Ehhhh>
   d50fa:	4630      	mov	r0, r6
char argonIPAddress[24];
// 192,168,1,107 (studio)//192,168,0,103 (home)

//IPAddress outIP(192, 168, 0, 14);
IPAddress senderAddress;
   d50fc:	4e11      	ldr	r6, [pc, #68]	; (d5144 <_GLOBAL__sub_I_SystemMode+0xc0>)
//IPAddress multicastAddress(224,0,0,0);

// A UDP instance to let us send and receive packets over UDP
UDP Udp;
IPAddress argonIP;
IPAddress remoteIP(192,168,1,107);
   d50fe:	462a      	mov	r2, r5
   d5100:	4621      	mov	r1, r4
   d5102:	f002 faf1 	bl	d76e8 <__aeabi_atexit>
char argonIPAddress[24];
// 192,168,1,107 (studio)//192,168,0,103 (home)

//IPAddress outIP(192, 168, 0, 14);
IPAddress senderAddress;
   d5106:	4630      	mov	r0, r6
   d5108:	f001 f9be 	bl	d6488 <_ZN9IPAddressC1Ev>
   d510c:	462a      	mov	r2, r5
   d510e:	4621      	mov	r1, r4
   d5110:	4630      	mov	r0, r6
  outMessage.addInt(random(0, 4096));
  outMessage.addInt(random(0, 4096));
  outMessage.addInt(random(0, 4096));
  outMessage.addInt(random(0, 4096));
  outMessage.send( Udp, remoteIP, 8000 );
}
   d5112:	b002      	add	sp, #8
   d5114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
IPAddress remoteIP(192,168,1,107);
char argonIPAddress[24];
// 192,168,1,107 (studio)//192,168,0,103 (home)

//IPAddress outIP(192, 168, 0, 14);
IPAddress senderAddress;
   d5118:	f002 bae6 	b.w	d76e8 <__aeabi_atexit>
   d511c:	2003e310 	.word	0x2003e310
   d5120:	2003e2d8 	.word	0x2003e2d8
   d5124:	2003e3a4 	.word	0x2003e3a4
   d5128:	000d40d9 	.word	0x000d40d9
   d512c:	2003e348 	.word	0x2003e348
   d5130:	2003e3a0 	.word	0x2003e3a0
   d5134:	2003e320 	.word	0x2003e320
   d5138:	000d40b9 	.word	0x000d40b9
   d513c:	000d40b7 	.word	0x000d40b7
   d5140:	2003e2f8 	.word	0x2003e2f8
   d5144:	2003e3bc 	.word	0x2003e3bc

000d5148 <_ZN16Adafruit_DRV2605C1Ev>:
    @brief  Instantiates a new DRV2605 class
*/
/**************************************************************************/
// I2C, no address adjustments or pins
Adafruit_DRV2605::Adafruit_DRV2605() {
}
   d5148:	4770      	bx	lr

000d514a <_ZN16Adafruit_DRV260513readRegister8Eh>:
  writeRegister8(DRV2605_REG_RTPIN, rtp);
}

/********************************************************************/

uint8_t Adafruit_DRV2605::readRegister8(uint8_t reg) {
   d514a:	b510      	push	{r4, lr}
   d514c:	460c      	mov	r4, r1
  uint8_t x ;
   // use i2c
    Wire.beginTransmission(DRV2605_ADDR);
   d514e:	f002 faa5 	bl	d769c <_Z19__fetch_global_Wirev>
   d5152:	215a      	movs	r1, #90	; 0x5a
   d5154:	f001 f957 	bl	d6406 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((byte)reg);
   d5158:	f002 faa0 	bl	d769c <_Z19__fetch_global_Wirev>
   d515c:	6803      	ldr	r3, [r0, #0]
   d515e:	4621      	mov	r1, r4
   d5160:	689b      	ldr	r3, [r3, #8]
   d5162:	4798      	blx	r3
    Wire.endTransmission();
   d5164:	f002 fa9a 	bl	d769c <_Z19__fetch_global_Wirev>
   d5168:	f001 f954 	bl	d6414 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom((byte)DRV2605_ADDR, (byte)1);
   d516c:	f002 fa96 	bl	d769c <_Z19__fetch_global_Wirev>
   d5170:	2201      	movs	r2, #1
   d5172:	215a      	movs	r1, #90	; 0x5a
   d5174:	f001 f940 	bl	d63f8 <_ZN7TwoWire11requestFromEhj>
    x = Wire.read();
   d5178:	f002 fa90 	bl	d769c <_Z19__fetch_global_Wirev>
   d517c:	6803      	ldr	r3, [r0, #0]
   d517e:	695b      	ldr	r3, [r3, #20]
   d5180:	4798      	blx	r3

  //  Serial.print("$"); Serial.print(reg, HEX);
  //  Serial.print(": 0x"); Serial.println(x, HEX);

  return x;
}
   d5182:	b2c0      	uxtb	r0, r0
   d5184:	bd10      	pop	{r4, pc}

000d5186 <_ZN16Adafruit_DRV260514writeRegister8Ehh>:

void Adafruit_DRV2605::writeRegister8(uint8_t reg, uint8_t val) {
   d5186:	b538      	push	{r3, r4, r5, lr}
   d5188:	4614      	mov	r4, r2
   d518a:	460d      	mov	r5, r1
   // use i2c
    Wire.beginTransmission(DRV2605_ADDR);
   d518c:	f002 fa86 	bl	d769c <_Z19__fetch_global_Wirev>
   d5190:	215a      	movs	r1, #90	; 0x5a
   d5192:	f001 f938 	bl	d6406 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((byte)reg);
   d5196:	f002 fa81 	bl	d769c <_Z19__fetch_global_Wirev>
   d519a:	6803      	ldr	r3, [r0, #0]
   d519c:	4629      	mov	r1, r5
   d519e:	689b      	ldr	r3, [r3, #8]
   d51a0:	4798      	blx	r3
    Wire.write((byte)val);
   d51a2:	f002 fa7b 	bl	d769c <_Z19__fetch_global_Wirev>
   d51a6:	6803      	ldr	r3, [r0, #0]
   d51a8:	4621      	mov	r1, r4
   d51aa:	689b      	ldr	r3, [r3, #8]
   d51ac:	4798      	blx	r3
    Wire.endTransmission();
   d51ae:	f002 fa75 	bl	d769c <_Z19__fetch_global_Wirev>
}
   d51b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_DRV2605::writeRegister8(uint8_t reg, uint8_t val) {
   // use i2c
    Wire.beginTransmission(DRV2605_ADDR);
    Wire.write((byte)reg);
    Wire.write((byte)val);
    Wire.endTransmission();
   d51b6:	f001 b92d 	b.w	d6414 <_ZN7TwoWire15endTransmissionEv>

000d51ba <_ZN16Adafruit_DRV26055beginEv>:
/**************************************************************************/
/*!
    @brief  Setups the HW
*/
/**************************************************************************/
boolean Adafruit_DRV2605::begin() {
   d51ba:	b510      	push	{r4, lr}
   d51bc:	4604      	mov	r4, r0
  Wire.begin();
   d51be:	f002 fa6d 	bl	d769c <_Z19__fetch_global_Wirev>
   d51c2:	f001 f8e5 	bl	d6390 <_ZN7TwoWire5beginEv>
  uint8_t id = readRegister8(DRV2605_REG_STATUS);
   d51c6:	2100      	movs	r1, #0
   d51c8:	4620      	mov	r0, r4
   d51ca:	f7ff ffbe 	bl	d514a <_ZN16Adafruit_DRV260513readRegister8Eh>
  //Serial.print("Status 0x"); Serial.println(id, HEX);

  writeRegister8(DRV2605_REG_MODE, 0x00); // out of standby
   d51ce:	4620      	mov	r0, r4
   d51d0:	2200      	movs	r2, #0
   d51d2:	2101      	movs	r1, #1
   d51d4:	f7ff ffd7 	bl	d5186 <_ZN16Adafruit_DRV260514writeRegister8Ehh>

  writeRegister8(DRV2605_REG_RTPIN, 0x00); // no real-time-playback
   d51d8:	4620      	mov	r0, r4
   d51da:	2200      	movs	r2, #0
   d51dc:	2102      	movs	r1, #2
   d51de:	f7ff ffd2 	bl	d5186 <_ZN16Adafruit_DRV260514writeRegister8Ehh>

  writeRegister8(DRV2605_REG_WAVESEQ1, 1); // strong click
   d51e2:	4620      	mov	r0, r4
   d51e4:	2201      	movs	r2, #1
   d51e6:	2104      	movs	r1, #4
   d51e8:	f7ff ffcd 	bl	d5186 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_WAVESEQ2, 0);
   d51ec:	4620      	mov	r0, r4
   d51ee:	2200      	movs	r2, #0
   d51f0:	2105      	movs	r1, #5
   d51f2:	f7ff ffc8 	bl	d5186 <_ZN16Adafruit_DRV260514writeRegister8Ehh>

  writeRegister8(DRV2605_REG_OVERDRIVE, 0); // no overdrive
   d51f6:	4620      	mov	r0, r4
   d51f8:	2200      	movs	r2, #0
   d51fa:	210d      	movs	r1, #13
   d51fc:	f7ff ffc3 	bl	d5186 <_ZN16Adafruit_DRV260514writeRegister8Ehh>

  writeRegister8(DRV2605_REG_SUSTAINPOS, 0);
   d5200:	4620      	mov	r0, r4
   d5202:	2200      	movs	r2, #0
   d5204:	210e      	movs	r1, #14
   d5206:	f7ff ffbe 	bl	d5186 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_SUSTAINNEG, 0);
   d520a:	4620      	mov	r0, r4
   d520c:	2200      	movs	r2, #0
   d520e:	210f      	movs	r1, #15
   d5210:	f7ff ffb9 	bl	d5186 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_BREAK, 0);
   d5214:	4620      	mov	r0, r4
   d5216:	2200      	movs	r2, #0
   d5218:	2110      	movs	r1, #16
   d521a:	f7ff ffb4 	bl	d5186 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
  writeRegister8(DRV2605_REG_AUDIOMAX, 0x64);
   d521e:	2264      	movs	r2, #100	; 0x64
   d5220:	4620      	mov	r0, r4
   d5222:	2113      	movs	r1, #19
   d5224:	f7ff ffaf 	bl	d5186 <_ZN16Adafruit_DRV260514writeRegister8Ehh>

  // ERM open loop

  // turn off N_ERM_LRA
  writeRegister8(DRV2605_REG_FEEDBACK, readRegister8(DRV2605_REG_FEEDBACK) & 0x7F);
   d5228:	211a      	movs	r1, #26
   d522a:	4620      	mov	r0, r4
   d522c:	f7ff ff8d 	bl	d514a <_ZN16Adafruit_DRV260513readRegister8Eh>
   d5230:	211a      	movs	r1, #26
   d5232:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   d5236:	4620      	mov	r0, r4
   d5238:	f7ff ffa5 	bl	d5186 <_ZN16Adafruit_DRV260514writeRegister8Ehh>
  // turn on ERM_OPEN_LOOP
  writeRegister8(DRV2605_REG_CONTROL3, readRegister8(DRV2605_REG_CONTROL3) | 0x20);
   d523c:	211d      	movs	r1, #29
   d523e:	4620      	mov	r0, r4
   d5240:	f7ff ff83 	bl	d514a <_ZN16Adafruit_DRV260513readRegister8Eh>
   d5244:	f040 0220 	orr.w	r2, r0, #32
   d5248:	b2d2      	uxtb	r2, r2
   d524a:	4620      	mov	r0, r4
   d524c:	211d      	movs	r1, #29
   d524e:	f7ff ff9a 	bl	d5186 <_ZN16Adafruit_DRV260514writeRegister8Ehh>

  return true;
}
   d5252:	2001      	movs	r0, #1
   d5254:	bd10      	pop	{r4, pc}

000d5256 <_ZN16Adafruit_DRV260511setWaveformEhh>:

void Adafruit_DRV2605::setWaveform(uint8_t slot, uint8_t w) {
  writeRegister8(DRV2605_REG_WAVESEQ1+slot, w);
   d5256:	3104      	adds	r1, #4
   d5258:	b2c9      	uxtb	r1, r1
   d525a:	f7ff bf94 	b.w	d5186 <_ZN16Adafruit_DRV260514writeRegister8Ehh>

000d525e <_ZN16Adafruit_DRV260513selectLibraryEh>:
}

void Adafruit_DRV2605::selectLibrary(uint8_t lib) {
  writeRegister8(DRV2605_REG_LIBRARY, lib);
   d525e:	460a      	mov	r2, r1
   d5260:	2103      	movs	r1, #3
   d5262:	f7ff bf90 	b.w	d5186 <_ZN16Adafruit_DRV260514writeRegister8Ehh>

000d5266 <_ZN16Adafruit_DRV26052goEv>:
}

void Adafruit_DRV2605::go() {
  writeRegister8(DRV2605_REG_GO, 1);
   d5266:	2201      	movs	r2, #1
   d5268:	210c      	movs	r1, #12
   d526a:	f7ff bf8c 	b.w	d5186 <_ZN16Adafruit_DRV260514writeRegister8Ehh>

000d526e <_ZN16Adafruit_DRV26057setModeEh>:
}

void Adafruit_DRV2605::setMode(uint8_t mode) {
  writeRegister8(DRV2605_REG_MODE, mode);
   d526e:	460a      	mov	r2, r1
   d5270:	2101      	movs	r1, #1
   d5272:	f7ff bf88 	b.w	d5186 <_ZN16Adafruit_DRV260514writeRegister8Ehh>

000d5276 <_GLOBAL__sub_I__ZN16Adafruit_DRV2605C2Ev>:
   d5276:	f000 bdc1 	b.w	d5dfc <HAL_Pin_Map>
   d527a:	0000      	movs	r0, r0
   d527c:	0000      	movs	r0, r0
	...

000d5280 <_ZN7ADXL345C1Ev>:
#include "math.h"

#define DEVICE (0x53)    // ADXL345 device address
#define TO_READ (6)      // num of bytes we are going to read each time (two bytes for each axis)

ADXL345::ADXL345() {
   d5280:	b530      	push	{r4, r5, lr}
  status = ADXL345_OK;
  error_code = ADXL345_NO_ERROR;

  gains[0] = 0.00376390;
   d5282:	a50b      	add	r5, pc, #44	; (adr r5, d52b0 <_ZN7ADXL345C1Ev+0x30>)
   d5284:	e9d5 4500 	ldrd	r4, r5, [r5]
   d5288:	e9c0 4502 	strd	r4, r5, [r0, #8]
  gains[1] = 0.00376009;
   d528c:	a50a      	add	r5, pc, #40	; (adr r5, d52b8 <_ZN7ADXL345C1Ev+0x38>)
   d528e:	e9d5 4500 	ldrd	r4, r5, [r5]
   d5292:	e9c0 4504 	strd	r4, r5, [r0, #16]
  gains[2] = 0.00349265;
   d5296:	a50a      	add	r5, pc, #40	; (adr r5, d52c0 <_ZN7ADXL345C1Ev+0x40>)
   d5298:	e9d5 4500 	ldrd	r4, r5, [r5]

#define DEVICE (0x53)    // ADXL345 device address
#define TO_READ (6)      // num of bytes we are going to read each time (two bytes for each axis)

ADXL345::ADXL345() {
  status = ADXL345_OK;
   d529c:	2201      	movs	r2, #1
   d529e:	7002      	strb	r2, [r0, #0]
  error_code = ADXL345_NO_ERROR;
   d52a0:	2200      	movs	r2, #0
   d52a2:	7042      	strb	r2, [r0, #1]

  gains[0] = 0.00376390;
  gains[1] = 0.00376009;
  gains[2] = 0.00349265;
   d52a4:	e9c0 4506 	strd	r4, r5, [r0, #24]
}
   d52a8:	bd30      	pop	{r4, r5, pc}
   d52aa:	bf00      	nop
   d52ac:	f3af 8000 	nop.w
   d52b0:	6cf9279f 	.word	0x6cf9279f
   d52b4:	3f6ed578 	.word	0x3f6ed578
   d52b8:	f28f7f0e 	.word	0xf28f7f0e
   d52bc:	3f6ecd7a 	.word	0x3f6ecd7a
   d52c0:	30d80f20 	.word	0x30d80f20
   d52c4:	3f6c9c9e 	.word	0x3f6c9c9e

000d52c8 <_ZN7ADXL3457writeToEhh>:
  for(i=0; i<3; i++){
    xyz[i] = xyz_int[i] * gains[i];
  }
}
// Writes val to address register on device
void ADXL345::writeTo(byte address, byte val) {
   d52c8:	b538      	push	{r3, r4, r5, lr}
   d52ca:	4614      	mov	r4, r2
   d52cc:	460d      	mov	r5, r1
  Wire.beginTransmission(DEVICE); // start transmission to device 
   d52ce:	f002 f9e5 	bl	d769c <_Z19__fetch_global_Wirev>
   d52d2:	2153      	movs	r1, #83	; 0x53
   d52d4:	f001 f897 	bl	d6406 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(address);             // send register address
   d52d8:	f002 f9e0 	bl	d769c <_Z19__fetch_global_Wirev>
   d52dc:	6803      	ldr	r3, [r0, #0]
   d52de:	4629      	mov	r1, r5
   d52e0:	689b      	ldr	r3, [r3, #8]
   d52e2:	4798      	blx	r3
  Wire.write(val);                 // send value to write
   d52e4:	f002 f9da 	bl	d769c <_Z19__fetch_global_Wirev>
   d52e8:	6803      	ldr	r3, [r0, #0]
   d52ea:	4621      	mov	r1, r4
   d52ec:	689b      	ldr	r3, [r3, #8]
   d52ee:	4798      	blx	r3
  Wire.endTransmission();         // end transmission
   d52f0:	f002 f9d4 	bl	d769c <_Z19__fetch_global_Wirev>
}
   d52f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
// Writes val to address register on device
void ADXL345::writeTo(byte address, byte val) {
  Wire.beginTransmission(DEVICE); // start transmission to device 
  Wire.write(address);             // send register address
  Wire.write(val);                 // send value to write
  Wire.endTransmission();         // end transmission
   d52f8:	f001 b88c 	b.w	d6414 <_ZN7TwoWire15endTransmissionEv>

000d52fc <_ZN7ADXL3457powerOnEv>:
  gains[0] = 0.00376390;
  gains[1] = 0.00376009;
  gains[2] = 0.00349265;
}

void ADXL345::powerOn() {
   d52fc:	b510      	push	{r4, lr}
   d52fe:	4604      	mov	r4, r0
  Wire.begin();        // join i2c bus (address optional for master)
   d5300:	f002 f9cc 	bl	d769c <_Z19__fetch_global_Wirev>
   d5304:	f001 f844 	bl	d6390 <_ZN7TwoWire5beginEv>
  //Turning on the ADXL345
  writeTo(ADXL345_POWER_CTL, 0);      
   d5308:	4620      	mov	r0, r4
   d530a:	2200      	movs	r2, #0
   d530c:	212d      	movs	r1, #45	; 0x2d
   d530e:	f7ff ffdb 	bl	d52c8 <_ZN7ADXL3457writeToEhh>
  writeTo(ADXL345_POWER_CTL, 16);
   d5312:	4620      	mov	r0, r4
   d5314:	2210      	movs	r2, #16
   d5316:	212d      	movs	r1, #45	; 0x2d
   d5318:	f7ff ffd6 	bl	d52c8 <_ZN7ADXL3457writeToEhh>
  writeTo(ADXL345_POWER_CTL, 8); 
   d531c:	4620      	mov	r0, r4
   d531e:	2208      	movs	r2, #8
   d5320:	212d      	movs	r1, #45	; 0x2d
}
   d5322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void ADXL345::powerOn() {
  Wire.begin();        // join i2c bus (address optional for master)
  //Turning on the ADXL345
  writeTo(ADXL345_POWER_CTL, 0);      
  writeTo(ADXL345_POWER_CTL, 16);
  writeTo(ADXL345_POWER_CTL, 8); 
   d5326:	f7ff bfcf 	b.w	d52c8 <_ZN7ADXL3457writeToEhh>

000d532a <_ZN7ADXL3458readFromEhiPh>:
  Wire.write(val);                 // send value to write
  Wire.endTransmission();         // end transmission
}

// Reads num bytes starting from address register on device in to _buff array
void ADXL345::readFrom(byte address, int num, byte _buff[]) {
   d532a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d532e:	4616      	mov	r6, r2
   d5330:	461f      	mov	r7, r3
   d5332:	460c      	mov	r4, r1
   d5334:	4605      	mov	r5, r0
  Wire.beginTransmission(DEVICE); // start transmission to device 
   d5336:	f002 f9b1 	bl	d769c <_Z19__fetch_global_Wirev>
   d533a:	2153      	movs	r1, #83	; 0x53
   d533c:	f001 f863 	bl	d6406 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(address);             // writes address to read from
   d5340:	f002 f9ac 	bl	d769c <_Z19__fetch_global_Wirev>
   d5344:	6803      	ldr	r3, [r0, #0]
   d5346:	4621      	mov	r1, r4
   d5348:	689b      	ldr	r3, [r3, #8]
   d534a:	4798      	blx	r3
  Wire.endTransmission();         // end transmission
   d534c:	f002 f9a6 	bl	d769c <_Z19__fetch_global_Wirev>
   d5350:	f001 f860 	bl	d6414 <_ZN7TwoWire15endTransmissionEv>

  Wire.beginTransmission(DEVICE); // start transmission to device
   d5354:	f002 f9a2 	bl	d769c <_Z19__fetch_global_Wirev>
   d5358:	2153      	movs	r1, #83	; 0x53
   d535a:	f001 f854 	bl	d6406 <_ZN7TwoWire17beginTransmissionEi>
  Wire.requestFrom(DEVICE, num);    // request 6 bytes from device
   d535e:	f002 f99d 	bl	d769c <_Z19__fetch_global_Wirev>
   d5362:	4632      	mov	r2, r6
   d5364:	2153      	movs	r1, #83	; 0x53
   d5366:	f001 f847 	bl	d63f8 <_ZN7TwoWire11requestFromEhj>
   d536a:	463c      	mov	r4, r7

  int i = 0;
  while(Wire.available())         // device may send less than requested (abnormal)
   d536c:	f002 f996 	bl	d769c <_Z19__fetch_global_Wirev>
   d5370:	6803      	ldr	r3, [r0, #0]
   d5372:	691b      	ldr	r3, [r3, #16]
   d5374:	ebc7 0804 	rsb	r8, r7, r4
   d5378:	4798      	blx	r3
   d537a:	b138      	cbz	r0, d538c <_ZN7ADXL3458readFromEhiPh+0x62>
  { 
    _buff[i] = Wire.read();       // receive a byte
   d537c:	f002 f98e 	bl	d769c <_Z19__fetch_global_Wirev>
   d5380:	6803      	ldr	r3, [r0, #0]
   d5382:	695b      	ldr	r3, [r3, #20]
   d5384:	4798      	blx	r3
   d5386:	f804 0b01 	strb.w	r0, [r4], #1

  Wire.beginTransmission(DEVICE); // start transmission to device
  Wire.requestFrom(DEVICE, num);    // request 6 bytes from device

  int i = 0;
  while(Wire.available())         // device may send less than requested (abnormal)
   d538a:	e7ef      	b.n	d536c <_ZN7ADXL3458readFromEhiPh+0x42>
  { 
    _buff[i] = Wire.read();       // receive a byte
    i++;
  }
  if(i != num){
   d538c:	4546      	cmp	r6, r8
    status = ADXL345_ERROR;
    error_code = ADXL345_READ_ERROR;
   d538e:	bf1e      	ittt	ne
   d5390:	2301      	movne	r3, #1
  { 
    _buff[i] = Wire.read();       // receive a byte
    i++;
  }
  if(i != num){
    status = ADXL345_ERROR;
   d5392:	7028      	strbne	r0, [r5, #0]
    error_code = ADXL345_READ_ERROR;
   d5394:	706b      	strbne	r3, [r5, #1]
  }
  Wire.endTransmission();         // end transmission
   d5396:	f002 f981 	bl	d769c <_Z19__fetch_global_Wirev>
}
   d539a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  }
  if(i != num){
    status = ADXL345_ERROR;
    error_code = ADXL345_READ_ERROR;
  }
  Wire.endTransmission();         // end transmission
   d539e:	f001 b839 	b.w	d6414 <_ZN7TwoWire15endTransmissionEv>

000d53a2 <_ZN7ADXL3459readAccelEPiS0_S0_>:

// Reads the acceleration into three variable x, y and z
void ADXL345::readAccel(int *xyz){
  readAccel(xyz, xyz + 1, xyz + 2);
}
void ADXL345::readAccel(int *x, int *y, int *z) {
   d53a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53a4:	4604      	mov	r4, r0
   d53a6:	460f      	mov	r7, r1
   d53a8:	4616      	mov	r6, r2
   d53aa:	461d      	mov	r5, r3
  readFrom(ADXL345_DATAX0, TO_READ, _buff); //read the acceleration data from the ADXL345
   d53ac:	2206      	movs	r2, #6
   d53ae:	f100 0320 	add.w	r3, r0, #32
   d53b2:	2132      	movs	r1, #50	; 0x32
   d53b4:	f7ff ffb9 	bl	d532a <_ZN7ADXL3458readFromEhiPh>

  // each axis reading comes in 10 bit resolution, ie 2 bytes.  Least Significat Byte first!!
  // thus we are converting both bytes in to one int
  *x = (((int)_buff[1]) << 8) | _buff[0];   
   d53b8:	8c23      	ldrh	r3, [r4, #32]
   d53ba:	603b      	str	r3, [r7, #0]
  *y = (((int)_buff[3]) << 8) | _buff[2];
   d53bc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d53be:	6033      	str	r3, [r6, #0]
  *z = (((int)_buff[5]) << 8) | _buff[4];
   d53c0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   d53c2:	602b      	str	r3, [r5, #0]
   d53c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53c6 <_ZN7ADXL3459readAccelEPi>:
  writeTo(ADXL345_POWER_CTL, 16);
  writeTo(ADXL345_POWER_CTL, 8); 
}

// Reads the acceleration into three variable x, y and z
void ADXL345::readAccel(int *xyz){
   d53c6:	460a      	mov	r2, r1
  readAccel(xyz, xyz + 1, xyz + 2);
   d53c8:	f101 0308 	add.w	r3, r1, #8
   d53cc:	3204      	adds	r2, #4
   d53ce:	f7ff bfe8 	b.w	d53a2 <_ZN7ADXL3459readAccelEPiS0_S0_>

000d53d2 <_ZN7ADXL3458get_GxyzEPd>:
  *x = (((int)_buff[1]) << 8) | _buff[0];   
  *y = (((int)_buff[3]) << 8) | _buff[2];
  *z = (((int)_buff[5]) << 8) | _buff[4];
}

void ADXL345::get_Gxyz(double *xyz){
   d53d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d53d6:	b085      	sub	sp, #20
  int i;
  int xyz_int[3];
  readAccel(xyz_int);
   d53d8:	af01      	add	r7, sp, #4
  *x = (((int)_buff[1]) << 8) | _buff[0];   
  *y = (((int)_buff[3]) << 8) | _buff[2];
  *z = (((int)_buff[5]) << 8) | _buff[4];
}

void ADXL345::get_Gxyz(double *xyz){
   d53da:	460d      	mov	r5, r1
  int i;
  int xyz_int[3];
  readAccel(xyz_int);
   d53dc:	4639      	mov	r1, r7
  *x = (((int)_buff[1]) << 8) | _buff[0];   
  *y = (((int)_buff[3]) << 8) | _buff[2];
  *z = (((int)_buff[5]) << 8) | _buff[4];
}

void ADXL345::get_Gxyz(double *xyz){
   d53de:	4606      	mov	r6, r0
  int i;
  int xyz_int[3];
  readAccel(xyz_int);
   d53e0:	f7ff fff1 	bl	d53c6 <_ZN7ADXL3459readAccelEPi>
   d53e4:	3608      	adds	r6, #8
  for(i=0; i<3; i++){
   d53e6:	2400      	movs	r4, #0
    xyz[i] = xyz_int[i] * gains[i];
   d53e8:	e8f6 8902 	ldrd	r8, r9, [r6], #8
   d53ec:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   d53f0:	f003 fd70 	bl	d8ed4 <__aeabi_i2d>
   d53f4:	4642      	mov	r2, r8
   d53f6:	464b      	mov	r3, r9
   d53f8:	f003 fdd2 	bl	d8fa0 <__aeabi_dmul>

void ADXL345::get_Gxyz(double *xyz){
  int i;
  int xyz_int[3];
  readAccel(xyz_int);
  for(i=0; i<3; i++){
   d53fc:	3401      	adds	r4, #1
   d53fe:	2c03      	cmp	r4, #3
    xyz[i] = xyz_int[i] * gains[i];
   d5400:	e8e5 0102 	strd	r0, r1, [r5], #8

void ADXL345::get_Gxyz(double *xyz){
  int i;
  int xyz_int[3];
  readAccel(xyz_int);
  for(i=0; i<3; i++){
   d5404:	d1f0      	bne.n	d53e8 <_ZN7ADXL3458get_GxyzEPd+0x16>
    xyz[i] = xyz_int[i] * gains[i];
  }
}
   d5406:	b005      	add	sp, #20
   d5408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d540c <_ZN7ADXL34515setTapThresholdEi>:
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d540c:	2900      	cmp	r1, #0
   d540e:	dd04      	ble.n	d541a <_ZN7ADXL34515setTapThresholdEi+0xe>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d5410:	29fe      	cmp	r1, #254	; 0xfe
   d5412:	bfd4      	ite	le
   d5414:	460a      	movle	r2, r1
   d5416:	22ff      	movgt	r2, #255	; 0xff
   d5418:	e000      	b.n	d541c <_ZN7ADXL34515setTapThresholdEi+0x10>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d541a:	2200      	movs	r2, #0
// the scale factor is 62.5 mg/LSB
// A value of 0 may result in undesirable behavior
void ADXL345::setTapThreshold(int tapThreshold) {
  tapThreshold = min(max(tapThreshold,0),255);
  byte _b = byte (tapThreshold);
  writeTo(ADXL345_THRESH_TAP, _b);  
   d541c:	b2d2      	uxtb	r2, r2
   d541e:	211d      	movs	r1, #29
   d5420:	f7ff bf52 	b.w	d52c8 <_ZN7ADXL3457writeToEhh>

000d5424 <_ZN7ADXL34515getTapThresholdEv>:
}

// Gets the THRESH_TAP byte value
// return value is comprised between 0 and 255
// the scale factor is 62.5 mg/LSB
int ADXL345::getTapThreshold() {
   d5424:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_THRESH_TAP, 1, &_b);  
   d5426:	2201      	movs	r2, #1
   d5428:	f10d 0307 	add.w	r3, sp, #7
   d542c:	211d      	movs	r1, #29
   d542e:	f7ff ff7c 	bl	d532a <_ZN7ADXL3458readFromEhiPh>
  return int (_b);
}
   d5432:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5436:	b003      	add	sp, #12
   d5438:	f85d fb04 	ldr.w	pc, [sp], #4

000d543c <_ZN7ADXL34512setAxisGainsEPd>:

// set/get the gain for each axis in Gs / count
void ADXL345::setAxisGains(double *_gains){
   d543c:	b530      	push	{r4, r5, lr}
   d543e:	f100 0308 	add.w	r3, r0, #8
   d5442:	3020      	adds	r0, #32
  int i;
  for(i = 0; i < 3; i++){
    gains[i] = _gains[i];
   d5444:	e8f1 4502 	ldrd	r4, r5, [r1], #8
   d5448:	e8e3 4502 	strd	r4, r5, [r3], #8
}

// set/get the gain for each axis in Gs / count
void ADXL345::setAxisGains(double *_gains){
  int i;
  for(i = 0; i < 3; i++){
   d544c:	4283      	cmp	r3, r0
   d544e:	d1f9      	bne.n	d5444 <_ZN7ADXL34512setAxisGainsEPd+0x8>
    gains[i] = _gains[i];
  }
}
   d5450:	bd30      	pop	{r4, r5, pc}

000d5452 <_ZN7ADXL34512getAxisGainsEPd>:
void ADXL345::getAxisGains(double *_gains){
   d5452:	b530      	push	{r4, r5, lr}
   d5454:	f100 0308 	add.w	r3, r0, #8
   d5458:	3020      	adds	r0, #32
  int i;
  for(i = 0; i < 3; i++){
    _gains[i] = gains[i];
   d545a:	e8f3 4502 	ldrd	r4, r5, [r3], #8
    gains[i] = _gains[i];
  }
}
void ADXL345::getAxisGains(double *_gains){
  int i;
  for(i = 0; i < 3; i++){
   d545e:	4283      	cmp	r3, r0
    _gains[i] = gains[i];
   d5460:	e8e1 4502 	strd	r4, r5, [r1], #8
    gains[i] = _gains[i];
  }
}
void ADXL345::getAxisGains(double *_gains){
  int i;
  for(i = 0; i < 3; i++){
   d5464:	d1f9      	bne.n	d545a <_ZN7ADXL34512getAxisGainsEPd+0x8>
    _gains[i] = gains[i];
  }
}
   d5466:	bd30      	pop	{r4, r5, pc}

000d5468 <_ZN7ADXL34513setAxisOffsetEiii>:

// Sets the OFSX, OFSY and OFSZ bytes
// OFSX, OFSY and OFSZ are user offset adjustments in twos complement format with
// a scale factor of 15,6mg/LSB
// OFSX, OFSY and OFSZ should be comprised between 
void ADXL345::setAxisOffset(int x, int y, int z) {
   d5468:	b570      	push	{r4, r5, r6, lr}
   d546a:	4604      	mov	r4, r0
   d546c:	4616      	mov	r6, r2
  writeTo(ADXL345_OFSX, byte (x));  
   d546e:	b2ca      	uxtb	r2, r1
   d5470:	211e      	movs	r1, #30

// Sets the OFSX, OFSY and OFSZ bytes
// OFSX, OFSY and OFSZ are user offset adjustments in twos complement format with
// a scale factor of 15,6mg/LSB
// OFSX, OFSY and OFSZ should be comprised between 
void ADXL345::setAxisOffset(int x, int y, int z) {
   d5472:	461d      	mov	r5, r3
  writeTo(ADXL345_OFSX, byte (x));  
   d5474:	f7ff ff28 	bl	d52c8 <_ZN7ADXL3457writeToEhh>
  writeTo(ADXL345_OFSY, byte (y));  
   d5478:	b2f2      	uxtb	r2, r6
   d547a:	4620      	mov	r0, r4
   d547c:	211f      	movs	r1, #31
   d547e:	f7ff ff23 	bl	d52c8 <_ZN7ADXL3457writeToEhh>
  writeTo(ADXL345_OFSZ, byte (z));  
   d5482:	b2ea      	uxtb	r2, r5
   d5484:	4620      	mov	r0, r4
   d5486:	2120      	movs	r1, #32
}
   d5488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
// a scale factor of 15,6mg/LSB
// OFSX, OFSY and OFSZ should be comprised between 
void ADXL345::setAxisOffset(int x, int y, int z) {
  writeTo(ADXL345_OFSX, byte (x));  
  writeTo(ADXL345_OFSY, byte (y));  
  writeTo(ADXL345_OFSZ, byte (z));  
   d548c:	f7ff bf1c 	b.w	d52c8 <_ZN7ADXL3457writeToEhh>

000d5490 <_ZN7ADXL34513getAxisOffsetEPiS0_S0_>:
}

// Gets the OFSX, OFSY and OFSZ bytes
void ADXL345::getAxisOffset(int* x, int* y, int*z) {
   d5490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5492:	460f      	mov	r7, r1
   d5494:	4616      	mov	r6, r2
   d5496:	461d      	mov	r5, r3
  byte _b;
  readFrom(ADXL345_OFSX, 1, &_b);  
   d5498:	2201      	movs	r2, #1
   d549a:	f10d 0307 	add.w	r3, sp, #7
   d549e:	211e      	movs	r1, #30
  writeTo(ADXL345_OFSY, byte (y));  
  writeTo(ADXL345_OFSZ, byte (z));  
}

// Gets the OFSX, OFSY and OFSZ bytes
void ADXL345::getAxisOffset(int* x, int* y, int*z) {
   d54a0:	4604      	mov	r4, r0
  byte _b;
  readFrom(ADXL345_OFSX, 1, &_b);  
   d54a2:	f7ff ff42 	bl	d532a <_ZN7ADXL3458readFromEhiPh>
  *x = int (_b);
   d54a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d54aa:	603b      	str	r3, [r7, #0]
  readFrom(ADXL345_OFSY, 1, &_b);  
   d54ac:	4620      	mov	r0, r4
   d54ae:	f10d 0307 	add.w	r3, sp, #7
   d54b2:	2201      	movs	r2, #1
   d54b4:	211f      	movs	r1, #31
   d54b6:	f7ff ff38 	bl	d532a <_ZN7ADXL3458readFromEhiPh>
  *y = int (_b);
   d54ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d54be:	6033      	str	r3, [r6, #0]
  readFrom(ADXL345_OFSZ, 1, &_b);  
   d54c0:	2201      	movs	r2, #1
   d54c2:	f10d 0307 	add.w	r3, sp, #7
   d54c6:	2120      	movs	r1, #32
   d54c8:	4620      	mov	r0, r4
   d54ca:	f7ff ff2e 	bl	d532a <_ZN7ADXL3458readFromEhiPh>
  *z = int (_b);
   d54ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d54d2:	602b      	str	r3, [r5, #0]
}
   d54d4:	b003      	add	sp, #12
   d54d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d54d8 <_ZN7ADXL34514setTapDurationEi>:
   d54d8:	2900      	cmp	r1, #0
   d54da:	dd04      	ble.n	d54e6 <_ZN7ADXL34514setTapDurationEi+0xe>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d54dc:	29fe      	cmp	r1, #254	; 0xfe
   d54de:	bfd4      	ite	le
   d54e0:	460a      	movle	r2, r1
   d54e2:	22ff      	movgt	r2, #255	; 0xff
   d54e4:	e000      	b.n	d54e8 <_ZN7ADXL34514setTapDurationEi+0x10>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d54e6:	2200      	movs	r2, #0
// The scale factor is 625¦Ìs/LSB
// A value of 0 disables the tap/double tap funcitons. Max value is 255.
void ADXL345::setTapDuration(int tapDuration) {
  tapDuration = min(max(tapDuration,0),255);
  byte _b = byte (tapDuration);
  writeTo(ADXL345_DUR, _b);  
   d54e8:	b2d2      	uxtb	r2, r2
   d54ea:	2121      	movs	r1, #33	; 0x21
   d54ec:	f7ff beec 	b.w	d52c8 <_ZN7ADXL3457writeToEhh>

000d54f0 <_ZN7ADXL34514getTapDurationEv>:
}

// Gets the DUR byte
int ADXL345::getTapDuration() {
   d54f0:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_DUR, 1, &_b);  
   d54f2:	2201      	movs	r2, #1
   d54f4:	f10d 0307 	add.w	r3, sp, #7
   d54f8:	2121      	movs	r1, #33	; 0x21
   d54fa:	f7ff ff16 	bl	d532a <_ZN7ADXL3458readFromEhiPh>
  return int (_b);
}
   d54fe:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5502:	b003      	add	sp, #12
   d5504:	f85d fb04 	ldr.w	pc, [sp], #4

000d5508 <_ZN7ADXL34519setDoubleTapLatencyEi>:
// of the time window, during which a possible second tap can be detected.
// The scale factor is 1.25ms/LSB. A value of 0 disables the double tap function.
// It accepts a maximum value of 255.
void ADXL345::setDoubleTapLatency(int doubleTapLatency) {
  byte _b = byte (doubleTapLatency);
  writeTo(ADXL345_LATENT, _b);  
   d5508:	b2ca      	uxtb	r2, r1
   d550a:	2122      	movs	r1, #34	; 0x22
   d550c:	f7ff bedc 	b.w	d52c8 <_ZN7ADXL3457writeToEhh>

000d5510 <_ZN7ADXL34519getDoubleTapLatencyEv>:
}

// Gets the Latent value
int ADXL345::getDoubleTapLatency() {
   d5510:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_LATENT, 1, &_b);  
   d5512:	2201      	movs	r2, #1
   d5514:	f10d 0307 	add.w	r3, sp, #7
   d5518:	2122      	movs	r1, #34	; 0x22
   d551a:	f7ff ff06 	bl	d532a <_ZN7ADXL3458readFromEhiPh>
  return int (_b);
}
   d551e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5522:	b003      	add	sp, #12
   d5524:	f85d fb04 	ldr.w	pc, [sp], #4

000d5528 <_ZN7ADXL34518setDoubleTapWindowEi>:
   d5528:	2900      	cmp	r1, #0
   d552a:	dd04      	ble.n	d5536 <_ZN7ADXL34518setDoubleTapWindowEi+0xe>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d552c:	29fe      	cmp	r1, #254	; 0xfe
   d552e:	bfd4      	ite	le
   d5530:	460a      	movle	r2, r1
   d5532:	22ff      	movgt	r2, #255	; 0xff
   d5534:	e000      	b.n	d5538 <_ZN7ADXL34518setDoubleTapWindowEi+0x10>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d5536:	2200      	movs	r2, #0
// during which a second valud tap can begin. The scale factor is 1.25ms/LSB. A
// value of 0 disables the double tap function. The maximum value is 255.
void ADXL345::setDoubleTapWindow(int doubleTapWindow) {
  doubleTapWindow = min(max(doubleTapWindow,0),255);
  byte _b = byte (doubleTapWindow);
  writeTo(ADXL345_WINDOW, _b);  
   d5538:	b2d2      	uxtb	r2, r2
   d553a:	2123      	movs	r1, #35	; 0x23
   d553c:	f7ff bec4 	b.w	d52c8 <_ZN7ADXL3457writeToEhh>

000d5540 <_ZN7ADXL34518getDoubleTapWindowEv>:
}

// Gets the Window register
int ADXL345::getDoubleTapWindow() {
   d5540:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_WINDOW, 1, &_b);  
   d5542:	2201      	movs	r2, #1
   d5544:	f10d 0307 	add.w	r3, sp, #7
   d5548:	2123      	movs	r1, #35	; 0x23
   d554a:	f7ff feee 	bl	d532a <_ZN7ADXL3458readFromEhiPh>
  return int (_b);
}
   d554e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5552:	b003      	add	sp, #12
   d5554:	f85d fb04 	ldr.w	pc, [sp], #4

000d5558 <_ZN7ADXL34520setActivityThresholdEi>:
   d5558:	2900      	cmp	r1, #0
   d555a:	dd04      	ble.n	d5566 <_ZN7ADXL34520setActivityThresholdEi+0xe>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d555c:	29fe      	cmp	r1, #254	; 0xfe
   d555e:	bfd4      	ite	le
   d5560:	460a      	movle	r2, r1
   d5562:	22ff      	movgt	r2, #255	; 0xff
   d5564:	e000      	b.n	d5568 <_ZN7ADXL34520setActivityThresholdEi+0x10>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d5566:	2200      	movs	r2, #0
// factor is 62.5mg/LSB. A value of 0 may result in undesirable behavior if the 
// activity interrupt is enabled. The maximum value is 255.
void ADXL345::setActivityThreshold(int activityThreshold) {
  activityThreshold = min(max(activityThreshold,0),255);
  byte _b = byte (activityThreshold);
  writeTo(ADXL345_THRESH_ACT, _b);  
   d5568:	b2d2      	uxtb	r2, r2
   d556a:	2124      	movs	r1, #36	; 0x24
   d556c:	f7ff beac 	b.w	d52c8 <_ZN7ADXL3457writeToEhh>

000d5570 <_ZN7ADXL34520getActivityThresholdEv>:
}

// Gets the THRESH_ACT byte
int ADXL345::getActivityThreshold() {
   d5570:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_THRESH_ACT, 1, &_b);  
   d5572:	2201      	movs	r2, #1
   d5574:	f10d 0307 	add.w	r3, sp, #7
   d5578:	2124      	movs	r1, #36	; 0x24
   d557a:	f7ff fed6 	bl	d532a <_ZN7ADXL3458readFromEhiPh>
  return int (_b);
}
   d557e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5582:	b003      	add	sp, #12
   d5584:	f85d fb04 	ldr.w	pc, [sp], #4

000d5588 <_ZN7ADXL34522setInactivityThresholdEi>:
   d5588:	2900      	cmp	r1, #0
   d558a:	dd04      	ble.n	d5596 <_ZN7ADXL34522setInactivityThresholdEi+0xe>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d558c:	29fe      	cmp	r1, #254	; 0xfe
   d558e:	bfd4      	ite	le
   d5590:	460a      	movle	r2, r1
   d5592:	22ff      	movgt	r2, #255	; 0xff
   d5594:	e000      	b.n	d5598 <_ZN7ADXL34522setInactivityThresholdEi+0x10>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d5596:	2200      	movs	r2, #0
// factor is 62.5mg/LSB. A value of 0 may result in undesirable behavior if the 
// inactivity interrupt is enabled. The maximum value is 255.
void ADXL345::setInactivityThreshold(int inactivityThreshold) {
  inactivityThreshold = min(max(inactivityThreshold,0),255);
  byte _b = byte (inactivityThreshold);
  writeTo(ADXL345_THRESH_INACT, _b);  
   d5598:	b2d2      	uxtb	r2, r2
   d559a:	2125      	movs	r1, #37	; 0x25
   d559c:	f7ff be94 	b.w	d52c8 <_ZN7ADXL3457writeToEhh>

000d55a0 <_ZN7ADXL34522getInactivityThresholdEv>:
}

// Gets the THRESH_INACT byte
int ADXL345::getInactivityThreshold() {
   d55a0:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_THRESH_INACT, 1, &_b);  
   d55a2:	2201      	movs	r2, #1
   d55a4:	f10d 0307 	add.w	r3, sp, #7
   d55a8:	2125      	movs	r1, #37	; 0x25
   d55aa:	f7ff febe 	bl	d532a <_ZN7ADXL3458readFromEhiPh>
  return int (_b);
}
   d55ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d55b2:	b003      	add	sp, #12
   d55b4:	f85d fb04 	ldr.w	pc, [sp], #4

000d55b8 <_ZN7ADXL34517setTimeInactivityEi>:
   d55b8:	2900      	cmp	r1, #0
   d55ba:	dd04      	ble.n	d55c6 <_ZN7ADXL34517setTimeInactivityEi+0xe>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d55bc:	29fe      	cmp	r1, #254	; 0xfe
   d55be:	bfd4      	ite	le
   d55c0:	460a      	movle	r2, r1
   d55c2:	22ff      	movgt	r2, #255	; 0xff
   d55c4:	e000      	b.n	d55c8 <_ZN7ADXL34517setTimeInactivityEi+0x10>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d55c6:	2200      	movs	r2, #0
// register for inactivity to be declared. The scale factor is 1sec/LSB. The value must
// be between 0 and 255.
void ADXL345::setTimeInactivity(int timeInactivity) {
  timeInactivity = min(max(timeInactivity,0),255);
  byte _b = byte (timeInactivity);
  writeTo(ADXL345_TIME_INACT, _b);  
   d55c8:	b2d2      	uxtb	r2, r2
   d55ca:	2126      	movs	r1, #38	; 0x26
   d55cc:	f7ff be7c 	b.w	d52c8 <_ZN7ADXL3457writeToEhh>

000d55d0 <_ZN7ADXL34517getTimeInactivityEv>:
}

// Gets the TIME_INACT register
int ADXL345::getTimeInactivity() {
   d55d0:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_TIME_INACT, 1, &_b);  
   d55d2:	2201      	movs	r2, #1
   d55d4:	f10d 0307 	add.w	r3, sp, #7
   d55d8:	2126      	movs	r1, #38	; 0x26
   d55da:	f7ff fea6 	bl	d532a <_ZN7ADXL3458readFromEhiPh>
  return int (_b);
}
   d55de:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d55e2:	b003      	add	sp, #12
   d55e4:	f85d fb04 	ldr.w	pc, [sp], #4

000d55e8 <_ZN7ADXL34520setFreeFallThresholdEi>:
   d55e8:	2900      	cmp	r1, #0
   d55ea:	dd04      	ble.n	d55f6 <_ZN7ADXL34520setFreeFallThresholdEi+0xe>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d55ec:	29fe      	cmp	r1, #254	; 0xfe
   d55ee:	bfd4      	ite	le
   d55f0:	460a      	movle	r2, r1
   d55f2:	22ff      	movgt	r2, #255	; 0xff
   d55f4:	e000      	b.n	d55f8 <_ZN7ADXL34520setFreeFallThresholdEi+0x10>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d55f6:	2200      	movs	r2, #0
// scale factor is 62.5mg/LSB. A value of 0 may result in undesirable behavior if the free-fall
// interrupt is enabled. The maximum value is 255.
void ADXL345::setFreeFallThreshold(int freeFallThreshold) {
  freeFallThreshold = min(max(freeFallThreshold,0),255);
  byte _b = byte (freeFallThreshold);
  writeTo(ADXL345_THRESH_FF, _b);  
   d55f8:	b2d2      	uxtb	r2, r2
   d55fa:	2128      	movs	r1, #40	; 0x28
   d55fc:	f7ff be64 	b.w	d52c8 <_ZN7ADXL3457writeToEhh>

000d5600 <_ZN7ADXL34520getFreeFallThresholdEv>:
}

// Gets the THRESH_FF register.
int ADXL345::getFreeFallThreshold() {
   d5600:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_THRESH_FF, 1, &_b);  
   d5602:	2201      	movs	r2, #1
   d5604:	f10d 0307 	add.w	r3, sp, #7
   d5608:	2128      	movs	r1, #40	; 0x28
   d560a:	f7ff fe8e 	bl	d532a <_ZN7ADXL3458readFromEhiPh>
  return int (_b);
}
   d560e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5612:	b003      	add	sp, #12
   d5614:	f85d fb04 	ldr.w	pc, [sp], #4

000d5618 <_ZN7ADXL34519setFreeFallDurationEi>:
   d5618:	2900      	cmp	r1, #0
   d561a:	dd04      	ble.n	d5626 <_ZN7ADXL34519setFreeFallDurationEi+0xe>

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d561c:	29fe      	cmp	r1, #254	; 0xfe
   d561e:	bfd4      	ite	le
   d5620:	460a      	movle	r2, r1
   d5622:	22ff      	movgt	r2, #255	; 0xff
   d5624:	e000      	b.n	d5628 <_ZN7ADXL34519setFreeFallDurationEi+0x10>
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
   d5626:	2200      	movs	r2, #0
// interrupt. The scale factor is 5ms/LSB. A value of 0 may result in undesirable behavior if
// the free-fall interrupt is enabled. The maximum value is 255.
void ADXL345::setFreeFallDuration(int freeFallDuration) {
  freeFallDuration = min(max(freeFallDuration,0),255);  
  byte _b = byte (freeFallDuration);
  writeTo(ADXL345_TIME_FF, _b);  
   d5628:	b2d2      	uxtb	r2, r2
   d562a:	2129      	movs	r1, #41	; 0x29
   d562c:	f7ff be4c 	b.w	d52c8 <_ZN7ADXL3457writeToEhh>

000d5630 <_ZN7ADXL34519getFreeFallDurationEv>:
}

// Gets the TIME_FF register.
int ADXL345::getFreeFallDuration() {
   d5630:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_TIME_FF, 1, &_b);  
   d5632:	2201      	movs	r2, #1
   d5634:	f10d 0307 	add.w	r3, sp, #7
   d5638:	2129      	movs	r1, #41	; 0x29
   d563a:	f7ff fe76 	bl	d532a <_ZN7ADXL3458readFromEhiPh>
  return int (_b);
}
   d563e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5642:	b003      	add	sp, #12
   d5644:	f85d fb04 	ldr.w	pc, [sp], #4

000d5648 <_ZN7ADXL3457getRateEv>:
}
void ADXL345::setLowPower(bool state) {  
  setRegisterBit(ADXL345_BW_RATE, 4, state); 
}

double ADXL345::getRate(){
   d5648:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_BW_RATE, 1, &_b);
   d564a:	2201      	movs	r2, #1
   d564c:	f10d 0307 	add.w	r3, sp, #7
   d5650:	212c      	movs	r1, #44	; 0x2c
   d5652:	f7ff fe6a 	bl	d532a <_ZN7ADXL3458readFromEhiPh>
  _b &= B00001111;
   d5656:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d565a:	f000 000f 	and.w	r0, r0, #15
   d565e:	f88d 0007 	strb.w	r0, [sp, #7]
  return (pow(2,((int) _b)-6)) * 6.25;
   d5662:	3806      	subs	r0, #6
   d5664:	f003 fc36 	bl	d8ed4 <__aeabi_i2d>
   d5668:	ed9f 0b09 	vldr	d0, [pc, #36]	; d5690 <_ZN7ADXL3457getRateEv+0x48>
   d566c:	ec41 0b11 	vmov	d1, r0, r1
   d5670:	f002 f9a6 	bl	d79c0 <pow>
   d5674:	2200      	movs	r2, #0
   d5676:	4b08      	ldr	r3, [pc, #32]	; (d5698 <_ZN7ADXL3457getRateEv+0x50>)
   d5678:	ec51 0b10 	vmov	r0, r1, d0
   d567c:	f003 fc90 	bl	d8fa0 <__aeabi_dmul>
}
   d5680:	ec41 0b10 	vmov	d0, r0, r1
   d5684:	b003      	add	sp, #12
   d5686:	f85d fb04 	ldr.w	pc, [sp], #4
   d568a:	bf00      	nop
   d568c:	f3af 8000 	nop.w
   d5690:	00000000 	.word	0x00000000
   d5694:	40000000 	.word	0x40000000
   d5698:	40190000 	.word	0x40190000

000d569c <_ZN7ADXL3457setRateEd>:

void ADXL345::setRate(double rate){
   d569c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  byte _b,_s;
  int v = (int) (rate / 6.25);
   d569e:	4b12      	ldr	r3, [pc, #72]	; (d56e8 <_ZN7ADXL3457setRateEd+0x4c>)
   d56a0:	2200      	movs	r2, #0
  readFrom(ADXL345_BW_RATE, 1, &_b);
  _b &= B00001111;
  return (pow(2,((int) _b)-6)) * 6.25;
}

void ADXL345::setRate(double rate){
   d56a2:	4605      	mov	r5, r0
  byte _b,_s;
  int v = (int) (rate / 6.25);
   d56a4:	ec51 0b10 	vmov	r0, r1, d0
   d56a8:	f003 fda4 	bl	d91f4 <__aeabi_ddiv>
   d56ac:	f003 ff28 	bl	d9500 <__aeabi_d2iz>
  int r = 0;
   d56b0:	2400      	movs	r4, #0
  while (v >>= 1)
   d56b2:	1040      	asrs	r0, r0, #1
   d56b4:	d001      	beq.n	d56ba <_ZN7ADXL3457setRateEd+0x1e>
  {
    r++;
   d56b6:	3401      	adds	r4, #1

void ADXL345::setRate(double rate){
  byte _b,_s;
  int v = (int) (rate / 6.25);
  int r = 0;
  while (v >>= 1)
   d56b8:	e7fb      	b.n	d56b2 <_ZN7ADXL3457setRateEd+0x16>
  {
    r++;
  }
  if (r <= 9) { 
   d56ba:	2c09      	cmp	r4, #9
   d56bc:	dc11      	bgt.n	d56e2 <_ZN7ADXL3457setRateEd+0x46>
    readFrom(ADXL345_BW_RATE, 1, &_b);
   d56be:	2201      	movs	r2, #1
   d56c0:	212c      	movs	r1, #44	; 0x2c
   d56c2:	4628      	mov	r0, r5
   d56c4:	f10d 0307 	add.w	r3, sp, #7
   d56c8:	f7ff fe2f 	bl	d532a <_ZN7ADXL3458readFromEhiPh>
    _s = (byte) (r + 6) | (_b & B11110000);
    writeTo(ADXL345_BW_RATE, _s);
   d56cc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d56d0:	3406      	adds	r4, #6
   d56d2:	f022 020f 	bic.w	r2, r2, #15
   d56d6:	4322      	orrs	r2, r4
   d56d8:	b2d2      	uxtb	r2, r2
   d56da:	212c      	movs	r1, #44	; 0x2c
   d56dc:	4628      	mov	r0, r5
   d56de:	f7ff fdf3 	bl	d52c8 <_ZN7ADXL3457writeToEhh>
  }
}
   d56e2:	b003      	add	sp, #12
   d56e4:	bd30      	pop	{r4, r5, pc}
   d56e6:	bf00      	nop
   d56e8:	40190000 	.word	0x40190000

000d56ec <_ZN7ADXL34518getInterruptSourceEv>:
  byte bw_code;
  readFrom(ADXL345_BW_RATE, 1, &bw_code);
  return bw_code;
}

byte ADXL345::getInterruptSource() {
   d56ec:	b507      	push	{r0, r1, r2, lr}
  byte _b;
  readFrom(ADXL345_INT_SOURCE, 1, &_b);
   d56ee:	2201      	movs	r2, #1
   d56f0:	f10d 0307 	add.w	r3, sp, #7
   d56f4:	2130      	movs	r1, #48	; 0x30
   d56f6:	f7ff fe18 	bl	d532a <_ZN7ADXL3458readFromEhiPh>
  return _b;
}
   d56fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d56fe:	b003      	add	sp, #12
   d5700:	f85d fb04 	ldr.w	pc, [sp], #4

000d5704 <_ZN7ADXL34514setRegisterBitEhib>:

void ADXL345::setInterrupt(byte interruptBit, bool state) {
  setRegisterBit(ADXL345_INT_ENABLE, interruptBit, state);
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
   d5704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5706:	4616      	mov	r6, r2
   d5708:	461f      	mov	r7, r3
  byte _b;
  readFrom(regAdress, 1, &_b);
   d570a:	2201      	movs	r2, #1
   d570c:	f10d 0307 	add.w	r3, sp, #7

void ADXL345::setInterrupt(byte interruptBit, bool state) {
  setRegisterBit(ADXL345_INT_ENABLE, interruptBit, state);
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
   d5710:	4604      	mov	r4, r0
   d5712:	460d      	mov	r5, r1
  byte _b;
  readFrom(regAdress, 1, &_b);
   d5714:	f7ff fe09 	bl	d532a <_ZN7ADXL3458readFromEhiPh>
   d5718:	2201      	movs	r2, #1
   d571a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (state) {
    _b |= (1 << bitPos);  // forces nth bit of _b to be 1.  all other bits left alone.
   d571e:	40b2      	lsls	r2, r6
}

void ADXL345::setRegisterBit(byte regAdress, int bitPos, bool state) {
  byte _b;
  readFrom(regAdress, 1, &_b);
  if (state) {
   d5720:	b10f      	cbz	r7, d5726 <_ZN7ADXL34514setRegisterBitEhib+0x22>
    _b |= (1 << bitPos);  // forces nth bit of _b to be 1.  all other bits left alone.
   d5722:	4313      	orrs	r3, r2
   d5724:	e001      	b.n	d572a <_ZN7ADXL34514setRegisterBitEhib+0x26>
  } 
  else {
    _b &= ~(1 << bitPos); // forces nth bit of _b to be 0.  all other bits left alone.
   d5726:	ea23 0302 	bic.w	r3, r3, r2
   d572a:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  writeTo(regAdress, _b);  
   d572e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d5732:	4629      	mov	r1, r5
   d5734:	4620      	mov	r0, r4
   d5736:	f7ff fdc7 	bl	d52c8 <_ZN7ADXL3457writeToEhh>
}
   d573a:	b003      	add	sp, #12
   d573c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d573e <_ZN7ADXL34514setSelfTestBitEb>:

// Sets the SELF-TEST bit
// if set to 1 it applies a self-test force to the sensor causing a shift in the output data
// if set to 0 it disables the self-test force
void ADXL345::setSelfTestBit(bool selfTestBit) {
  setRegisterBit(ADXL345_DATA_FORMAT, 7, selfTestBit);
   d573e:	460b      	mov	r3, r1
   d5740:	2207      	movs	r2, #7
   d5742:	2131      	movs	r1, #49	; 0x31
   d5744:	f7ff bfde 	b.w	d5704 <_ZN7ADXL34514setRegisterBitEhib>

000d5748 <_ZN7ADXL34512setActivityXEb>:
bool ADXL345::isInactivityZEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 0); 
}

void ADXL345::setActivityX(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 6, state); 
   d5748:	460b      	mov	r3, r1
   d574a:	2206      	movs	r2, #6
   d574c:	2127      	movs	r1, #39	; 0x27
   d574e:	f7ff bfd9 	b.w	d5704 <_ZN7ADXL34514setRegisterBitEhib>

000d5752 <_ZN7ADXL34512setActivityYEb>:
}
void ADXL345::setActivityY(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 5, state); 
   d5752:	460b      	mov	r3, r1
   d5754:	2205      	movs	r2, #5
   d5756:	2127      	movs	r1, #39	; 0x27
   d5758:	f7ff bfd4 	b.w	d5704 <_ZN7ADXL34514setRegisterBitEhib>

000d575c <_ZN7ADXL34512setActivityZEb>:
}
void ADXL345::setActivityZ(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 4, state); 
   d575c:	460b      	mov	r3, r1
   d575e:	2204      	movs	r2, #4
   d5760:	2127      	movs	r1, #39	; 0x27
   d5762:	f7ff bfcf 	b.w	d5704 <_ZN7ADXL34514setRegisterBitEhib>

000d5766 <_ZN7ADXL34514setInactivityXEb>:
}
void ADXL345::setInactivityX(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 2, state); 
   d5766:	460b      	mov	r3, r1
   d5768:	2202      	movs	r2, #2
   d576a:	2127      	movs	r1, #39	; 0x27
   d576c:	f7ff bfca 	b.w	d5704 <_ZN7ADXL34514setRegisterBitEhib>

000d5770 <_ZN7ADXL34514setInactivityYEb>:
}
void ADXL345::setInactivityY(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 1, state); 
   d5770:	460b      	mov	r3, r1
   d5772:	2201      	movs	r2, #1
   d5774:	2127      	movs	r1, #39	; 0x27
   d5776:	f7ff bfc5 	b.w	d5704 <_ZN7ADXL34514setRegisterBitEhib>

000d577a <_ZN7ADXL34514setInactivityZEb>:
}
void ADXL345::setInactivityZ(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 0, state); 
   d577a:	460b      	mov	r3, r1
   d577c:	2200      	movs	r2, #0
   d577e:	2127      	movs	r1, #39	; 0x27
   d5780:	f7ff bfc0 	b.w	d5704 <_ZN7ADXL34514setRegisterBitEhib>

000d5784 <_ZN7ADXL34513setActivityAcEb>:
bool ADXL345::isInactivityAc(){ 
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 3); 
}

void ADXL345::setActivityAc(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 7, state); 
   d5784:	460b      	mov	r3, r1
   d5786:	2207      	movs	r2, #7
   d5788:	2127      	movs	r1, #39	; 0x27
   d578a:	f7ff bfbb 	b.w	d5704 <_ZN7ADXL34514setRegisterBitEhib>

000d578e <_ZN7ADXL34515setInactivityAcEb>:
}
void ADXL345::setInactivityAc(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 3, state); 
   d578e:	460b      	mov	r3, r1
   d5790:	2203      	movs	r2, #3
   d5792:	2127      	movs	r1, #39	; 0x27
   d5794:	f7ff bfb6 	b.w	d5704 <_ZN7ADXL34514setRegisterBitEhib>

000d5798 <_ZN7ADXL34514setSuppressBitEb>:

bool ADXL345::getSuppressBit(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 3); 
}
void ADXL345::setSuppressBit(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 3, state); 
   d5798:	460b      	mov	r3, r1
   d579a:	2203      	movs	r2, #3
   d579c:	212a      	movs	r1, #42	; 0x2a
   d579e:	f7ff bfb1 	b.w	d5704 <_ZN7ADXL34514setRegisterBitEhib>

000d57a2 <_ZN7ADXL34518setTapDetectionOnXEb>:

bool ADXL345::isTapDetectionOnX(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 2); 
}
void ADXL345::setTapDetectionOnX(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 2, state); 
   d57a2:	460b      	mov	r3, r1
   d57a4:	2202      	movs	r2, #2
   d57a6:	212a      	movs	r1, #42	; 0x2a
   d57a8:	f7ff bfac 	b.w	d5704 <_ZN7ADXL34514setRegisterBitEhib>

000d57ac <_ZN7ADXL34518setTapDetectionOnYEb>:
}
bool ADXL345::isTapDetectionOnY(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 1); 
}
void ADXL345::setTapDetectionOnY(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 1, state); 
   d57ac:	460b      	mov	r3, r1
   d57ae:	2201      	movs	r2, #1
   d57b0:	212a      	movs	r1, #42	; 0x2a
   d57b2:	f7ff bfa7 	b.w	d5704 <_ZN7ADXL34514setRegisterBitEhib>

000d57b6 <_ZN7ADXL34518setTapDetectionOnZEb>:
}
bool ADXL345::isTapDetectionOnZ(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 0); 
}
void ADXL345::setTapDetectionOnZ(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 0, state); 
   d57b6:	460b      	mov	r3, r1
   d57b8:	2200      	movs	r2, #0
   d57ba:	212a      	movs	r1, #42	; 0x2a
   d57bc:	f7ff bfa2 	b.w	d5704 <_ZN7ADXL34514setRegisterBitEhib>

000d57c0 <_ZN7ADXL34511setLowPowerEb>:

bool ADXL345::isLowPower(){ 
  return getRegisterBit(ADXL345_BW_RATE, 4); 
}
void ADXL345::setLowPower(bool state) {  
  setRegisterBit(ADXL345_BW_RATE, 4, state); 
   d57c0:	460b      	mov	r3, r1
   d57c2:	2204      	movs	r2, #4
   d57c4:	212c      	movs	r1, #44	; 0x2c
   d57c6:	f7ff bf9d 	b.w	d5704 <_ZN7ADXL34514setRegisterBitEhib>

000d57ca <_ZN7ADXL34519setInterruptMappingEhb>:
}

// Set the mapping of an interrupt to pin1 or pin2
// eg: setInterruptMapping(ADXL345_INT_DOUBLE_TAP_BIT,ADXL345_INT2_PIN);
void ADXL345::setInterruptMapping(byte interruptBit, bool interruptPin) {
  setRegisterBit(ADXL345_INT_MAP, interruptBit, interruptPin);
   d57ca:	4613      	mov	r3, r2
   d57cc:	460a      	mov	r2, r1
   d57ce:	212f      	movs	r1, #47	; 0x2f
   d57d0:	f7ff bf98 	b.w	d5704 <_ZN7ADXL34514setRegisterBitEhib>

000d57d4 <_ZN7ADXL34512setInterruptEhb>:
bool ADXL345::isInterruptEnabled(byte interruptBit) {
  return getRegisterBit(ADXL345_INT_ENABLE,interruptBit);
}

void ADXL345::setInterrupt(byte interruptBit, bool state) {
  setRegisterBit(ADXL345_INT_ENABLE, interruptBit, state);
   d57d4:	4613      	mov	r3, r2
   d57d6:	460a      	mov	r2, r1
   d57d8:	212e      	movs	r1, #46	; 0x2e
   d57da:	f7ff bf93 	b.w	d5704 <_ZN7ADXL34514setRegisterBitEhib>

000d57de <_ZN7ADXL34514getRegisterBitEhi>:
    _b &= ~(1 << bitPos); // forces nth bit of _b to be 0.  all other bits left alone.
  }
  writeTo(regAdress, _b);  
}

bool ADXL345::getRegisterBit(byte regAdress, int bitPos) {
   d57de:	b513      	push	{r0, r1, r4, lr}
   d57e0:	4614      	mov	r4, r2
  byte _b;
  readFrom(regAdress, 1, &_b);
   d57e2:	f10d 0307 	add.w	r3, sp, #7
   d57e6:	2201      	movs	r2, #1
   d57e8:	f7ff fd9f 	bl	d532a <_ZN7ADXL3458readFromEhiPh>
  return ((_b >> bitPos) & 1);
   d57ec:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d57f0:	4120      	asrs	r0, r4
}
   d57f2:	f000 0001 	and.w	r0, r0, #1
   d57f6:	b002      	add	sp, #8
   d57f8:	bd10      	pop	{r4, pc}

000d57fa <_ZN7ADXL34514getSelfTestBitEv>:
  _s |= (_b & B11101100);
  writeTo(ADXL345_DATA_FORMAT, _s);
}
// gets the state of the SELF_TEST bit
bool ADXL345::getSelfTestBit() {
  return getRegisterBit(ADXL345_DATA_FORMAT, 7);
   d57fa:	2207      	movs	r2, #7
   d57fc:	2131      	movs	r1, #49	; 0x31
   d57fe:	f7ff bfee 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d5802 <_ZN7ADXL34518isActivityXEnabledEv>:
  readFrom(ADXL345_TIME_FF, 1, &_b);  
  return int (_b);
}

bool ADXL345::isActivityXEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 6); 
   d5802:	2206      	movs	r2, #6
   d5804:	2127      	movs	r1, #39	; 0x27
   d5806:	f7ff bfea 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d580a <_ZN7ADXL34518isActivityYEnabledEv>:
}
bool ADXL345::isActivityYEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 5); 
   d580a:	2205      	movs	r2, #5
   d580c:	2127      	movs	r1, #39	; 0x27
   d580e:	f7ff bfe6 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d5812 <_ZN7ADXL34518isActivityZEnabledEv>:
}
bool ADXL345::isActivityZEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 4); 
   d5812:	2204      	movs	r2, #4
   d5814:	2127      	movs	r1, #39	; 0x27
   d5816:	f7ff bfe2 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d581a <_ZN7ADXL34520isInactivityXEnabledEv>:
}
bool ADXL345::isInactivityXEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 2); 
   d581a:	2202      	movs	r2, #2
   d581c:	2127      	movs	r1, #39	; 0x27
   d581e:	f7ff bfde 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d5822 <_ZN7ADXL34520isInactivityYEnabledEv>:
}
bool ADXL345::isInactivityYEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 1); 
   d5822:	2201      	movs	r2, #1
   d5824:	2127      	movs	r1, #39	; 0x27
   d5826:	f7ff bfda 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d582a <_ZN7ADXL34520isInactivityZEnabledEv>:
}
bool ADXL345::isInactivityZEnabled() {  
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 0); 
   d582a:	2200      	movs	r2, #0
   d582c:	2127      	movs	r1, #39	; 0x27
   d582e:	f7ff bfd6 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d5832 <_ZN7ADXL34514isInactivityAcEv>:

bool ADXL345::isActivityAc() { 
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 7); 
}
bool ADXL345::isInactivityAc(){ 
  return getRegisterBit(ADXL345_ACT_INACT_CTL, 3); 
   d5832:	2203      	movs	r2, #3
   d5834:	2127      	movs	r1, #39	; 0x27
   d5836:	f7ff bfd2 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d583a <_ZN7ADXL34514getSuppressBitEv>:
void ADXL345::setInactivityAc(bool state) {  
  setRegisterBit(ADXL345_ACT_INACT_CTL, 3, state); 
}

bool ADXL345::getSuppressBit(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 3); 
   d583a:	2203      	movs	r2, #3
   d583c:	212a      	movs	r1, #42	; 0x2a
   d583e:	f7ff bfce 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d5842 <_ZN7ADXL34517isTapDetectionOnXEv>:
void ADXL345::setSuppressBit(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 3, state); 
}

bool ADXL345::isTapDetectionOnX(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 2); 
   d5842:	2202      	movs	r2, #2
   d5844:	212a      	movs	r1, #42	; 0x2a
   d5846:	f7ff bfca 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d584a <_ZN7ADXL34517isTapDetectionOnYEv>:
}
void ADXL345::setTapDetectionOnX(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 2, state); 
}
bool ADXL345::isTapDetectionOnY(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 1); 
   d584a:	2201      	movs	r2, #1
   d584c:	212a      	movs	r1, #42	; 0x2a
   d584e:	f7ff bfc6 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d5852 <_ZN7ADXL34517isTapDetectionOnZEv>:
}
void ADXL345::setTapDetectionOnY(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 1, state); 
}
bool ADXL345::isTapDetectionOnZ(){ 
  return getRegisterBit(ADXL345_TAP_AXES, 0); 
   d5852:	2200      	movs	r2, #0
   d5854:	212a      	movs	r1, #42	; 0x2a
   d5856:	f7ff bfc2 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d585a <_ZN7ADXL34519isActivitySourceOnXEv>:
void ADXL345::setTapDetectionOnZ(bool state) {  
  setRegisterBit(ADXL345_TAP_AXES, 0, state); 
}

bool ADXL345::isActivitySourceOnX(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 6); 
   d585a:	2206      	movs	r2, #6
   d585c:	212b      	movs	r1, #43	; 0x2b
   d585e:	f7ff bfbe 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d5862 <_ZN7ADXL34519isActivitySourceOnYEv>:
}
bool ADXL345::isActivitySourceOnY(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 5); 
   d5862:	2205      	movs	r2, #5
   d5864:	212b      	movs	r1, #43	; 0x2b
   d5866:	f7ff bfba 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d586a <_ZN7ADXL34519isActivitySourceOnZEv>:
}
bool ADXL345::isActivitySourceOnZ(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 4); 
   d586a:	2204      	movs	r2, #4
   d586c:	212b      	movs	r1, #43	; 0x2b
   d586e:	f7ff bfb6 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d5872 <_ZN7ADXL34514isTapSourceOnXEv>:
}

bool ADXL345::isTapSourceOnX(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 2); 
   d5872:	2202      	movs	r2, #2
   d5874:	212b      	movs	r1, #43	; 0x2b
   d5876:	f7ff bfb2 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d587a <_ZN7ADXL34514isTapSourceOnYEv>:
}
bool ADXL345::isTapSourceOnY(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 1); 
   d587a:	2201      	movs	r2, #1
   d587c:	212b      	movs	r1, #43	; 0x2b
   d587e:	f7ff bfae 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d5882 <_ZN7ADXL34514isTapSourceOnZEv>:
}
bool ADXL345::isTapSourceOnZ(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 0); 
   d5882:	2200      	movs	r2, #0
   d5884:	212b      	movs	r1, #43	; 0x2b
   d5886:	f7ff bfaa 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d588a <_ZN7ADXL3458isAsleepEv>:
}

bool ADXL345::isAsleep(){ 
  return getRegisterBit(ADXL345_ACT_TAP_STATUS, 3); 
   d588a:	2203      	movs	r2, #3
   d588c:	212b      	movs	r1, #43	; 0x2b
   d588e:	f7ff bfa6 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d5892 <_ZN7ADXL34510isLowPowerEv>:
}

bool ADXL345::isLowPower(){ 
  return getRegisterBit(ADXL345_BW_RATE, 4); 
   d5892:	2204      	movs	r2, #4
   d5894:	212c      	movs	r1, #44	; 0x2c
   d5896:	f7ff bfa2 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d589a <_ZN7ADXL34518getInterruptSourceEh>:
  readFrom(ADXL345_INT_SOURCE, 1, &_b);
  return _b;
}

bool ADXL345::getInterruptSource(byte interruptBit) {
  return getRegisterBit(ADXL345_INT_SOURCE,interruptBit);
   d589a:	460a      	mov	r2, r1
   d589c:	2130      	movs	r1, #48	; 0x30
   d589e:	f7ff bf9e 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d58a2 <_ZN7ADXL34519getInterruptMappingEh>:
}

bool ADXL345::getInterruptMapping(byte interruptBit) {
  return getRegisterBit(ADXL345_INT_MAP,interruptBit);
   d58a2:	460a      	mov	r2, r1
   d58a4:	212f      	movs	r1, #47	; 0x2f
   d58a6:	f7ff bf9a 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>

000d58aa <_ZN7ADXL34518isInterruptEnabledEh>:
void ADXL345::setInterruptMapping(byte interruptBit, bool interruptPin) {
  setRegisterBit(ADXL345_INT_MAP, interruptBit, interruptPin);
}

bool ADXL345::isInterruptEnabled(byte interruptBit) {
  return getRegisterBit(ADXL345_INT_ENABLE,interruptBit);
   d58aa:	460a      	mov	r2, r1
   d58ac:	212e      	movs	r1, #46	; 0x2e
   d58ae:	f7ff bf96 	b.w	d57de <_ZN7ADXL34514getRegisterBitEhi>
	...

000d58b4 <_Z10print_byteh>:
    print_byte(_b);
    Serial.println("");    
  }
}

void print_byte(byte val){
   d58b4:	b538      	push	{r3, r4, r5, lr}
   d58b6:	4605      	mov	r5, r0
  int i;
  Serial.print("B");
   d58b8:	f001 fd8c 	bl	d73d4 <_Z16_fetch_usbserialv>
   d58bc:	4908      	ldr	r1, [pc, #32]	; (d58e0 <_Z10print_byteh+0x2c>)
   d58be:	f000 ffcf 	bl	d6860 <_ZN5Print5printEPKc>
  for(i=7; i>=0; i--){
   d58c2:	2407      	movs	r4, #7
    Serial.print(val >> i & 1, BIN);
   d58c4:	f001 fd86 	bl	d73d4 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d58c8:	fa45 f104 	asr.w	r1, r5, r4
   d58cc:	2202      	movs	r2, #2
   d58ce:	f001 0101 	and.w	r1, r1, #1
   d58d2:	f000 ffe2 	bl	d689a <_ZN5Print11printNumberEmh>
}

void print_byte(byte val){
  int i;
  Serial.print("B");
  for(i=7; i>=0; i--){
   d58d6:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   d58da:	d2f3      	bcs.n	d58c4 <_Z10print_byteh+0x10>
    Serial.print(val >> i & 1, BIN);
  }
   d58dc:	bd38      	pop	{r3, r4, r5, pc}
   d58de:	bf00      	nop
   d58e0:	000d9b64 	.word	0x000d9b64

000d58e4 <_ZN7ADXL34516printAllRegisterEv>:
  return ((_b >> bitPos) & 1);
}

// print all register value to the serial ouptut, which requires it to be setup
// this can be used to manually to check the current configuration of the device
void ADXL345::printAllRegister() {
   d58e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d58e6:	4605      	mov	r5, r0
  byte _b;
  Serial.print("0x00: ");
   d58e8:	f001 fd74 	bl	d73d4 <_Z16_fetch_usbserialv>
   d58ec:	491c      	ldr	r1, [pc, #112]	; (d5960 <_ZN7ADXL34516printAllRegisterEv+0x7c>)
   d58ee:	f000 ffb7 	bl	d6860 <_ZN5Print5printEPKc>
  readFrom(0x00, 1, &_b);
   d58f2:	f10d 0307 	add.w	r3, sp, #7
   d58f6:	2201      	movs	r2, #1
   d58f8:	2100      	movs	r1, #0
   d58fa:	4628      	mov	r0, r5
   d58fc:	f7ff fd15 	bl	d532a <_ZN7ADXL3458readFromEhiPh>
  print_byte(_b);
   d5900:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5904:	f7ff ffd6 	bl	d58b4 <_Z10print_byteh>
  Serial.println("");
   d5908:	f001 fd64 	bl	d73d4 <_Z16_fetch_usbserialv>
   d590c:	4915      	ldr	r1, [pc, #84]	; (d5964 <_ZN7ADXL34516printAllRegisterEv+0x80>)
   d590e:	f000 ffba 	bl	d6886 <_ZN5Print7printlnEPKc>
  int i;
  for (i=29;i<=57;i++){
   d5912:	241d      	movs	r4, #29
    Serial.print("0x");
   d5914:	f001 fd5e 	bl	d73d4 <_Z16_fetch_usbserialv>
   d5918:	4913      	ldr	r1, [pc, #76]	; (d5968 <_ZN7ADXL34516printAllRegisterEv+0x84>)
   d591a:	f000 ffa1 	bl	d6860 <_ZN5Print5printEPKc>
    Serial.print(i, HEX);
   d591e:	f001 fd59 	bl	d73d4 <_Z16_fetch_usbserialv>
   d5922:	2210      	movs	r2, #16
   d5924:	4621      	mov	r1, r4
   d5926:	f000 ffb8 	bl	d689a <_ZN5Print11printNumberEmh>
    Serial.print(": ");
   d592a:	f001 fd53 	bl	d73d4 <_Z16_fetch_usbserialv>
   d592e:	490f      	ldr	r1, [pc, #60]	; (d596c <_ZN7ADXL34516printAllRegisterEv+0x88>)
   d5930:	f000 ff96 	bl	d6860 <_ZN5Print5printEPKc>
    readFrom(i, 1, &_b);
   d5934:	b2e1      	uxtb	r1, r4
   d5936:	f10d 0307 	add.w	r3, sp, #7
   d593a:	2201      	movs	r2, #1
   d593c:	4628      	mov	r0, r5
   d593e:	f7ff fcf4 	bl	d532a <_ZN7ADXL3458readFromEhiPh>
    print_byte(_b);
   d5942:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5946:	f7ff ffb5 	bl	d58b4 <_Z10print_byteh>
  Serial.print("0x00: ");
  readFrom(0x00, 1, &_b);
  print_byte(_b);
  Serial.println("");
  int i;
  for (i=29;i<=57;i++){
   d594a:	3401      	adds	r4, #1
    Serial.print("0x");
    Serial.print(i, HEX);
    Serial.print(": ");
    readFrom(i, 1, &_b);
    print_byte(_b);
    Serial.println("");    
   d594c:	f001 fd42 	bl	d73d4 <_Z16_fetch_usbserialv>
   d5950:	4904      	ldr	r1, [pc, #16]	; (d5964 <_ZN7ADXL34516printAllRegisterEv+0x80>)
   d5952:	f000 ff98 	bl	d6886 <_ZN5Print7printlnEPKc>
  Serial.print("0x00: ");
  readFrom(0x00, 1, &_b);
  print_byte(_b);
  Serial.println("");
  int i;
  for (i=29;i<=57;i++){
   d5956:	2c3a      	cmp	r4, #58	; 0x3a
   d5958:	d1dc      	bne.n	d5914 <_ZN7ADXL34516printAllRegisterEv+0x30>
    Serial.print(": ");
    readFrom(i, 1, &_b);
    print_byte(_b);
    Serial.println("");    
  }
}
   d595a:	b003      	add	sp, #12
   d595c:	bd30      	pop	{r4, r5, pc}
   d595e:	bf00      	nop
   d5960:	000d9b66 	.word	0x000d9b66
   d5964:	000d9c8b 	.word	0x000d9c8b
   d5968:	000d9b6d 	.word	0x000d9b6d
   d596c:	000d9b71 	.word	0x000d9b71

000d5970 <_GLOBAL__sub_I__ZN7ADXL345C2Ev>:
   d5970:	f000 ba44 	b.w	d5dfc <HAL_Pin_Map>

000d5974 <_ZN10OSCMessage12setupMessageEv>:
    outputAddress = address;
}

void OSCMessage::setupMessage()
{
    incomingBuffer = NULL;
   d5974:	2300      	movs	r3, #0
   d5976:	6003      	str	r3, [r0, #0]
    inputDatas = NULL;
   d5978:	6283      	str	r3, [r0, #40]	; 0x28
    incomingBufferSize = 0;
   d597a:	6043      	str	r3, [r0, #4]
    
    outputDatas = NULL;
   d597c:	64c3      	str	r3, [r0, #76]	; 0x4c
    outputDatasSize = 0;
   d597e:	6503      	str	r3, [r0, #80]	; 0x50
   d5980:	4770      	bx	lr
	...

000d5984 <_ZN10OSCMessageC1Ev>:
#include "simple-OSC.h"

OSCMessage::OSCMessage()
   d5984:	b538      	push	{r3, r4, r5, lr}
   d5986:	4d0d      	ldr	r5, [pc, #52]	; (d59bc <_ZN10OSCMessageC1Ev+0x38>)
   d5988:	4604      	mov	r4, r0
   d598a:	4629      	mov	r1, r5
   d598c:	3008      	adds	r0, #8
   d598e:	f001 f8fd 	bl	d6b8c <_ZN6StringC1EPK19__FlashStringHelper>
   d5992:	4629      	mov	r1, r5
   d5994:	f104 0018 	add.w	r0, r4, #24
   d5998:	f001 f8f8 	bl	d6b8c <_ZN6StringC1EPK19__FlashStringHelper>
   d599c:	4629      	mov	r1, r5
   d599e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d59a2:	f001 f8f3 	bl	d6b8c <_ZN6StringC1EPK19__FlashStringHelper>
   d59a6:	4629      	mov	r1, r5
   d59a8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d59ac:	f001 f8ee 	bl	d6b8c <_ZN6StringC1EPK19__FlashStringHelper>
{
    setupMessage();
   d59b0:	4620      	mov	r0, r4
   d59b2:	f7ff ffdf 	bl	d5974 <_ZN10OSCMessage12setupMessageEv>
}
   d59b6:	4620      	mov	r0, r4
   d59b8:	bd38      	pop	{r3, r4, r5, pc}
   d59ba:	bf00      	nop
   d59bc:	000d9c8b 	.word	0x000d9c8b

000d59c0 <_ZN10OSCMessageC1EPKc>:

OSCMessage::OSCMessage(const char * address)
   d59c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59c2:	4d10      	ldr	r5, [pc, #64]	; (d5a04 <_ZN10OSCMessageC1EPKc+0x44>)
   d59c4:	4604      	mov	r4, r0
   d59c6:	460f      	mov	r7, r1
   d59c8:	3008      	adds	r0, #8
   d59ca:	4629      	mov	r1, r5
   d59cc:	f001 f8de 	bl	d6b8c <_ZN6StringC1EPK19__FlashStringHelper>
   d59d0:	f104 062c 	add.w	r6, r4, #44	; 0x2c
   d59d4:	4629      	mov	r1, r5
   d59d6:	f104 0018 	add.w	r0, r4, #24
   d59da:	f001 f8d7 	bl	d6b8c <_ZN6StringC1EPK19__FlashStringHelper>
   d59de:	4629      	mov	r1, r5
   d59e0:	4630      	mov	r0, r6
   d59e2:	f001 f8d3 	bl	d6b8c <_ZN6StringC1EPK19__FlashStringHelper>
   d59e6:	4629      	mov	r1, r5
   d59e8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d59ec:	f001 f8ce 	bl	d6b8c <_ZN6StringC1EPK19__FlashStringHelper>
{
    setupMessage();
   d59f0:	4620      	mov	r0, r4
   d59f2:	f7ff ffbf 	bl	d5974 <_ZN10OSCMessage12setupMessageEv>
    outputAddress = address;
   d59f6:	4639      	mov	r1, r7
   d59f8:	4630      	mov	r0, r6
   d59fa:	f001 f8da 	bl	d6bb2 <_ZN6StringaSEPKc>
}
   d59fe:	4620      	mov	r0, r4
   d5a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5a02:	bf00      	nop
   d5a04:	000d9c8b 	.word	0x000d9c8b

000d5a08 <_ZN10OSCMessageD1Ev>:
    outputDatas = NULL;
    outputDatasSize = 0;
}

//DESTRUCTOR
OSCMessage::~OSCMessage()
   d5a08:	b510      	push	{r4, lr}
   d5a0a:	4604      	mov	r4, r0
{
    free(incomingBuffer);
   d5a0c:	6800      	ldr	r0, [r0, #0]
   d5a0e:	f000 fbf9 	bl	d6204 <free>
    free(inputDatas);
   d5a12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5a14:	f000 fbf6 	bl	d6204 <free>
    free(outputDatas);
   d5a18:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d5a1a:	f000 fbf3 	bl	d6204 <free>
    outputDatas = NULL;
    outputDatasSize = 0;
}

//DESTRUCTOR
OSCMessage::~OSCMessage()
   d5a1e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5a22:	f001 f86c 	bl	d6afe <_ZN6StringD1Ev>
   d5a26:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d5a2a:	f001 f868 	bl	d6afe <_ZN6StringD1Ev>
   d5a2e:	f104 0018 	add.w	r0, r4, #24
   d5a32:	f001 f864 	bl	d6afe <_ZN6StringD1Ev>
   d5a36:	f104 0008 	add.w	r0, r4, #8
   d5a3a:	f001 f860 	bl	d6afe <_ZN6StringD1Ev>
{
    free(incomingBuffer);
    free(inputDatas);
    free(outputDatas);
}
   d5a3e:	4620      	mov	r0, r4
   d5a40:	bd10      	pop	{r4, pc}

000d5a42 <_ZN10OSCMessage4fillEc>:

///RECEIVING
void OSCMessage::fill(char incomingByte)
{
   d5a42:	b538      	push	{r3, r4, r5, lr}
   d5a44:	460d      	mov	r5, r1
    incomingBuffer = (char *) realloc ( incomingBuffer, incomingBufferSize + 1 );
   d5a46:	6841      	ldr	r1, [r0, #4]
    free(outputDatas);
}

///RECEIVING
void OSCMessage::fill(char incomingByte)
{
   d5a48:	4604      	mov	r4, r0
    incomingBuffer = (char *) realloc ( incomingBuffer, incomingBufferSize + 1 );
   d5a4a:	3101      	adds	r1, #1
   d5a4c:	6800      	ldr	r0, [r0, #0]
   d5a4e:	f000 fbe1 	bl	d6214 <realloc>
   d5a52:	6020      	str	r0, [r4, #0]
    if (incomingBuffer != NULL)
   d5a54:	b118      	cbz	r0, d5a5e <_ZN10OSCMessage4fillEc+0x1c>
    {
        incomingBuffer[incomingBufferSize++] = incomingByte;
   d5a56:	6863      	ldr	r3, [r4, #4]
   d5a58:	1c5a      	adds	r2, r3, #1
   d5a5a:	6062      	str	r2, [r4, #4]
   d5a5c:	54c5      	strb	r5, [r0, r3]
   d5a5e:	bd38      	pop	{r3, r4, r5, pc}

000d5a60 <_ZN10OSCMessage5parseEv>:
    }
}

bool OSCMessage::parse()
{
   d5a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5a64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5a68:	b083      	sub	sp, #12
   d5a6a:	4606      	mov	r6, r0
   d5a6c:	af00      	add	r7, sp, #0
    // Serial.print("got : ");
    int addressLocation = -1;
    int typesLocation = -1;
    int dataLocation = -1;
   d5a6e:	4614      	mov	r4, r2

bool OSCMessage::parse()
{
    // Serial.print("got : ");
    int addressLocation = -1;
    int typesLocation = -1;
   d5a70:	4691      	mov	r9, r2
}

bool OSCMessage::parse()
{
    // Serial.print("got : ");
    int addressLocation = -1;
   d5a72:	4690      	mov	r8, r2
        }
        else if ( addressLocation > 0 && incomingBuffer[i] == 0 && typesLocation < 0)
        {
            char charTypes[i-addressLocation-1];
            memcpy(charTypes,&incomingBuffer[addressLocation+1],i-1);
            inputTypes = charTypes;
   d5a74:	f100 0b18 	add.w	fp, r0, #24
    /*for(int i = 0 ; i < incomingBufferSize ; i++)
     {
     Serial.print (incomingBuffer[i],DEC);  Serial.print(" ");
     }
     Serial.println();*/
    for(int i = 0 ; i < incomingBufferSize ; i++)
   d5a78:	f8d6 a004 	ldr.w	sl, [r6, #4]
   d5a7c:	1c55      	adds	r5, r2, #1
   d5a7e:	45aa      	cmp	sl, r5
   d5a80:	dd61      	ble.n	d5b46 <_ZN10OSCMessage5parseEv+0xe6>
    {
        if (incomingBuffer[i] == 44)
   d5a82:	6831      	ldr	r1, [r6, #0]
   d5a84:	5d4b      	ldrb	r3, [r1, r5]
   d5a86:	2b2c      	cmp	r3, #44	; 0x2c
   d5a88:	d110      	bne.n	d5aac <_ZN10OSCMessage5parseEv+0x4c>
        {
            char charAddress[i-1];
   d5a8a:	1dd3      	adds	r3, r2, #7
   d5a8c:	f023 0307 	bic.w	r3, r3, #7
            memcpy(charAddress,incomingBuffer,i-1);
            inputAddress = charAddress;
            addressLocation = i;
   d5a90:	46e8      	mov	r8, sp
     Serial.println();*/
    for(int i = 0 ; i < incomingBufferSize ; i++)
    {
        if (incomingBuffer[i] == 44)
        {
            char charAddress[i-1];
   d5a92:	ebad 0d03 	sub.w	sp, sp, r3
            memcpy(charAddress,incomingBuffer,i-1);
   d5a96:	4668      	mov	r0, sp
   d5a98:	f003 fd88 	bl	d95ac <memcpy>
            inputAddress = charAddress;
   d5a9c:	4669      	mov	r1, sp
   d5a9e:	f106 0008 	add.w	r0, r6, #8
   d5aa2:	f001 f886 	bl	d6bb2 <_ZN6StringaSEPKc>
   d5aa6:	46c5      	mov	sp, r8
   d5aa8:	46a8      	mov	r8, r5
   d5aaa:	e04a      	b.n	d5b42 <_ZN10OSCMessage5parseEv+0xe2>
            addressLocation = i;
            //Serial.print("address : ");  Serial.println(inputAddress);
        }
        else if ( addressLocation > 0 && incomingBuffer[i] == 0 && typesLocation < 0)
   d5aac:	f1b8 0f00 	cmp.w	r8, #0
   d5ab0:	dd47      	ble.n	d5b42 <_ZN10OSCMessage5parseEv+0xe2>
   d5ab2:	b9bb      	cbnz	r3, d5ae4 <_ZN10OSCMessage5parseEv+0x84>
   d5ab4:	f1b9 0f00 	cmp.w	r9, #0
   d5ab8:	da14      	bge.n	d5ae4 <_ZN10OSCMessage5parseEv+0x84>
        {
            char charTypes[i-addressLocation-1];
   d5aba:	ebc8 0305 	rsb	r3, r8, r5
   d5abe:	3306      	adds	r3, #6
   d5ac0:	f023 0307 	bic.w	r3, r3, #7
            memcpy(charTypes,&incomingBuffer[addressLocation+1],i-1);
            inputTypes = charTypes;
            typesLocation = i;
   d5ac4:	46e9      	mov	r9, sp
            addressLocation = i;
            //Serial.print("address : ");  Serial.println(inputAddress);
        }
        else if ( addressLocation > 0 && incomingBuffer[i] == 0 && typesLocation < 0)
        {
            char charTypes[i-addressLocation-1];
   d5ac6:	ebad 0d03 	sub.w	sp, sp, r3
            memcpy(charTypes,&incomingBuffer[addressLocation+1],i-1);
   d5aca:	f108 0301 	add.w	r3, r8, #1
   d5ace:	4419      	add	r1, r3
   d5ad0:	4668      	mov	r0, sp
   d5ad2:	f003 fd6b 	bl	d95ac <memcpy>
            inputTypes = charTypes;
   d5ad6:	4669      	mov	r1, sp
   d5ad8:	4658      	mov	r0, fp
   d5ada:	f001 f86a 	bl	d6bb2 <_ZN6StringaSEPKc>
   d5ade:	46cd      	mov	sp, r9
            typesLocation = i;
   d5ae0:	46a9      	mov	r9, r5
   d5ae2:	e02e      	b.n	d5b42 <_ZN10OSCMessage5parseEv+0xe2>
            //Serial.print("types : ");  Serial.println(inputTypes);
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation <0)
   d5ae4:	f1b9 0f00 	cmp.w	r9, #0
   d5ae8:	dd2b      	ble.n	d5b42 <_ZN10OSCMessage5parseEv+0xe2>
   d5aea:	2c00      	cmp	r4, #0
   d5aec:	da28      	bge.n	d5b40 <_ZN10OSCMessage5parseEv+0xe0>
        {
            dataLocation = incomingBufferSize;
            int typesCount = typesLocation - addressLocation - 1;
   d5aee:	ebc8 0009 	rsb	r0, r8, r9
   d5af2:	1e44      	subs	r4, r0, #1
            int bitCount = 4*round((typesCount+1)/4)+3;
   d5af4:	2304      	movs	r3, #4
   d5af6:	fb90 f0f3 	sdiv	r0, r0, r3
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }

template <typename T>
static inline
T round (T x) { return ((x)>=0?(long)((x)+0.5):(long)((x)-0.5)); }
   d5afa:	2800      	cmp	r0, #0
   d5afc:	db06      	blt.n	d5b0c <_ZN10OSCMessage5parseEv+0xac>
   d5afe:	f003 f9e9 	bl	d8ed4 <__aeabi_i2d>
   d5b02:	2200      	movs	r2, #0
   d5b04:	4b13      	ldr	r3, [pc, #76]	; (d5b54 <_ZN10OSCMessage5parseEv+0xf4>)
   d5b06:	f003 f899 	bl	d8c3c <__adddf3>
   d5b0a:	e005      	b.n	d5b18 <_ZN10OSCMessage5parseEv+0xb8>
   d5b0c:	f003 f9e2 	bl	d8ed4 <__aeabi_i2d>
   d5b10:	2200      	movs	r2, #0
   d5b12:	4b10      	ldr	r3, [pc, #64]	; (d5b54 <_ZN10OSCMessage5parseEv+0xf4>)
   d5b14:	f003 f890 	bl	d8c38 <__aeabi_dsub>
   d5b18:	f003 fcf2 	bl	d9500 <__aeabi_d2iz>
            int zeroCount = bitCount-typesCount;
            //Serial.print("datas : ");
            int datasSize = incomingBufferSize-(typesLocation+zeroCount);
   d5b1c:	ebc4 0480 	rsb	r4, r4, r0, lsl #2
   d5b20:	3403      	adds	r4, #3
   d5b22:	444c      	add	r4, r9
            inputDatas = (char *) malloc ( datasSize );
   d5b24:	ebc4 020a 	rsb	r2, r4, sl
   d5b28:	4610      	mov	r0, r2
   d5b2a:	607a      	str	r2, [r7, #4]
   d5b2c:	f000 fb62 	bl	d61f4 <malloc>
            memcpy(inputDatas,&incomingBuffer[typesLocation+zeroCount], datasSize);
   d5b30:	6831      	ldr	r1, [r6, #0]
            int typesCount = typesLocation - addressLocation - 1;
            int bitCount = 4*round((typesCount+1)/4)+3;
            int zeroCount = bitCount-typesCount;
            //Serial.print("datas : ");
            int datasSize = incomingBufferSize-(typesLocation+zeroCount);
            inputDatas = (char *) malloc ( datasSize );
   d5b32:	62b0      	str	r0, [r6, #40]	; 0x28
            memcpy(inputDatas,&incomingBuffer[typesLocation+zeroCount], datasSize);
   d5b34:	4421      	add	r1, r4
   d5b36:	687a      	ldr	r2, [r7, #4]
   d5b38:	f003 fd38 	bl	d95ac <memcpy>
   d5b3c:	4654      	mov	r4, sl
   d5b3e:	e000      	b.n	d5b42 <_ZN10OSCMessage5parseEv+0xe2>
             Serial.println();
             }
             Serial.print (inputDatas[j],DEC);  Serial.print(" ");
             }*/
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation > 0 )
   d5b40:	d103      	bne.n	d5b4a <_ZN10OSCMessage5parseEv+0xea>
   d5b42:	462a      	mov	r2, r5
    /*for(int i = 0 ; i < incomingBufferSize ; i++)
     {
     Serial.print (incomingBuffer[i],DEC);  Serial.print(" ");
     }
     Serial.println();*/
    for(int i = 0 ; i < incomingBufferSize ; i++)
   d5b44:	e798      	b.n	d5a78 <_ZN10OSCMessage5parseEv+0x18>
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation > 0 )
        {
            return true;
        }
    }
    return false;
   d5b46:	2000      	movs	r0, #0
   d5b48:	e000      	b.n	d5b4c <_ZN10OSCMessage5parseEv+0xec>
             Serial.print (inputDatas[j],DEC);  Serial.print(" ");
             }*/
        }
        else if ( addressLocation > 0 && typesLocation > 0 && dataLocation > 0 )
        {
            return true;
   d5b4a:	2001      	movs	r0, #1
        }
    }
    return false;
}
   d5b4c:	370c      	adds	r7, #12
   d5b4e:	46bd      	mov	sp, r7
   d5b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5b54:	3fe00000 	.word	0x3fe00000

000d5b58 <_ZN10OSCMessage5routeEPKcPFvRS_E>:

void OSCMessage::route(const char * pattern, void (*callback)(OSCMessage &))
{
   d5b58:	b570      	push	{r4, r5, r6, lr}
   d5b5a:	4604      	mov	r4, r0
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d5b5c:	3008      	adds	r0, #8
   d5b5e:	4615      	mov	r5, r2
   d5b60:	f001 f85c 	bl	d6c1c <_ZNK6String6equalsEPKc>
    if( inputAddress == pattern)
   d5b64:	b120      	cbz	r0, d5b70 <_ZN10OSCMessage5routeEPKcPFvRS_E+0x18>
    {
        callback(*this);
   d5b66:	4620      	mov	r0, r4
   d5b68:	462b      	mov	r3, r5
    }
}
   d5b6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void OSCMessage::route(const char * pattern, void (*callback)(OSCMessage &))
{
    if( inputAddress == pattern)
    {
        callback(*this);
   d5b6e:	4718      	bx	r3
   d5b70:	bd70      	pop	{r4, r5, r6, pc}

000d5b72 <_ZN10OSCMessage6getIntEi>:
    }
}

int OSCMessage::getInt(int offset)
{
    return (inputDatas[4*offset] << 24) | (inputDatas[4*offset+1] << 16) | (inputDatas[4*offset+2] << 8) | inputDatas[4*offset+3];
   d5b72:	6a83      	ldr	r3, [r0, #40]	; 0x28
   d5b74:	f813 0021 	ldrb.w	r0, [r3, r1, lsl #2]
   d5b78:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   d5b7c:	78cb      	ldrb	r3, [r1, #3]
   d5b7e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
   d5b82:	7848      	ldrb	r0, [r1, #1]
   d5b84:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   d5b88:	7888      	ldrb	r0, [r1, #2]
}
   d5b8a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d5b8e:	4770      	bx	lr

000d5b90 <_ZN10OSCMessage8getFloatEi>:
{
    union {
        float f;
        char b[4];
    } u;
    u.b[3] = inputDatas[4*offset];
   d5b90:	6a82      	ldr	r2, [r0, #40]	; 0x28
   d5b92:	f812 0021 	ldrb.w	r0, [r2, r1, lsl #2]
    u.b[2] = inputDatas[4*offset+1];
   d5b96:	eb02 0181 	add.w	r1, r2, r1, lsl #2
{
    union {
        float f;
        char b[4];
    } u;
    u.b[3] = inputDatas[4*offset];
   d5b9a:	2300      	movs	r3, #0
    u.b[2] = inputDatas[4*offset+1];
   d5b9c:	784a      	ldrb	r2, [r1, #1]
{
    union {
        float f;
        char b[4];
    } u;
    u.b[3] = inputDatas[4*offset];
   d5b9e:	f360 631f 	bfi	r3, r0, #24, #8
    u.b[2] = inputDatas[4*offset+1];
   d5ba2:	f362 4317 	bfi	r3, r2, #16, #8
    u.b[1] = inputDatas[4*offset+2];
   d5ba6:	788a      	ldrb	r2, [r1, #2]
   d5ba8:	f362 230f 	bfi	r3, r2, #8, #8
    u.b[0] = inputDatas[4*offset+3];
   d5bac:	78ca      	ldrb	r2, [r1, #3]
   d5bae:	f362 0307 	bfi	r3, r2, #0, #8
    return u.f;
   d5bb2:	ee00 3a10 	vmov	s0, r3
}
   d5bb6:	4770      	bx	lr

000d5bb8 <_ZN10OSCMessage6addIntEi>:

///SENDING
void OSCMessage::addInt(int value)
{
   d5bb8:	b538      	push	{r3, r4, r5, lr}
   d5bba:	460d      	mov	r5, r1
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
   d5bbc:	6d01      	ldr	r1, [r0, #80]	; 0x50
    return u.f;
}

///SENDING
void OSCMessage::addInt(int value)
{
   d5bbe:	4604      	mov	r4, r0
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
   d5bc0:	3104      	adds	r1, #4
   d5bc2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   d5bc4:	f000 fb26 	bl	d6214 <realloc>
   d5bc8:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (outputDatas != NULL)
   d5bca:	b1d0      	cbz	r0, d5c02 <_ZN10OSCMessage6addIntEi+0x4a>
    {
        outputDatas[outputDatasSize] = (value >> 24) & 0xFF;
   d5bcc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5bce:	0e2a      	lsrs	r2, r5, #24
   d5bd0:	54c2      	strb	r2, [r0, r3]
        outputDatas[outputDatasSize+1] = (value >> 16) & 0xFF;
   d5bd2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   d5bd4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5bd6:	4413      	add	r3, r2
   d5bd8:	142a      	asrs	r2, r5, #16
   d5bda:	705a      	strb	r2, [r3, #1]
        outputDatas[outputDatasSize+2] = (value >> 8) & 0xFF;
   d5bdc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   d5bde:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5be0:	4413      	add	r3, r2
   d5be2:	122a      	asrs	r2, r5, #8
   d5be4:	709a      	strb	r2, [r3, #2]
        outputDatas[outputDatasSize+3] = value & 0xFF;
   d5be6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5be8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   d5bea:	4413      	add	r3, r2
        outputDatasSize += 4;
        outputTypes.concat('i');
   d5bec:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    if (outputDatas != NULL)
    {
        outputDatas[outputDatasSize] = (value >> 24) & 0xFF;
        outputDatas[outputDatasSize+1] = (value >> 16) & 0xFF;
        outputDatas[outputDatasSize+2] = (value >> 8) & 0xFF;
        outputDatas[outputDatasSize+3] = value & 0xFF;
   d5bf0:	70dd      	strb	r5, [r3, #3]
        outputDatasSize += 4;
   d5bf2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5bf4:	3304      	adds	r3, #4
   d5bf6:	6523      	str	r3, [r4, #80]	; 0x50
        outputTypes.concat('i');
   d5bf8:	2169      	movs	r1, #105	; 0x69
    }
}
   d5bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        outputDatas[outputDatasSize] = (value >> 24) & 0xFF;
        outputDatas[outputDatasSize+1] = (value >> 16) & 0xFF;
        outputDatas[outputDatasSize+2] = (value >> 8) & 0xFF;
        outputDatas[outputDatasSize+3] = value & 0xFF;
        outputDatasSize += 4;
        outputTypes.concat('i');
   d5bfe:	f001 b800 	b.w	d6c02 <_ZN6String6concatEc>
   d5c02:	bd38      	pop	{r3, r4, r5, pc}

000d5c04 <_ZN10OSCMessage8addFloatEf>:
    }
}

void OSCMessage::addFloat(float value)
{
   d5c04:	b538      	push	{r3, r4, r5, lr}
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
   d5c06:	6d01      	ldr	r1, [r0, #80]	; 0x50
        outputTypes.concat('i');
    }
}

void OSCMessage::addFloat(float value)
{
   d5c08:	4604      	mov	r4, r0
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
   d5c0a:	3104      	adds	r1, #4
   d5c0c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
        outputTypes.concat('i');
    }
}

void OSCMessage::addFloat(float value)
{
   d5c0e:	ee10 5a10 	vmov	r5, s0
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
   d5c12:	f000 faff 	bl	d6214 <realloc>
   d5c16:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (outputDatas != NULL)
   d5c18:	b1e8      	cbz	r0, d5c56 <_ZN10OSCMessage8addFloatEf+0x52>
        union {
            float f;
            char b[4];
        } u;
        u.f = value;
        outputDatas[outputDatasSize] = u.b[3];
   d5c1a:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5c1c:	f3c5 6107 	ubfx	r1, r5, #24, #8
   d5c20:	5481      	strb	r1, [r0, r2]
        outputDatas[outputDatasSize+1] = u.b[2];
   d5c22:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d5c24:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5c26:	440a      	add	r2, r1
   d5c28:	f3c5 4107 	ubfx	r1, r5, #16, #8
   d5c2c:	7051      	strb	r1, [r2, #1]
        outputDatas[outputDatasSize+2] = u.b[1];
   d5c2e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d5c30:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5c32:	440a      	add	r2, r1
   d5c34:	f3c5 2107 	ubfx	r1, r5, #8, #8
   d5c38:	7091      	strb	r1, [r2, #2]
        outputDatas[outputDatasSize+3] = u.b[0];
   d5c3a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d5c3c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5c3e:	440a      	add	r2, r1
        outputDatasSize += 4;
        outputTypes.concat('f');
   d5c40:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        } u;
        u.f = value;
        outputDatas[outputDatasSize] = u.b[3];
        outputDatas[outputDatasSize+1] = u.b[2];
        outputDatas[outputDatasSize+2] = u.b[1];
        outputDatas[outputDatasSize+3] = u.b[0];
   d5c44:	70d5      	strb	r5, [r2, #3]
        outputDatasSize += 4;
   d5c46:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5c48:	3304      	adds	r3, #4
   d5c4a:	6523      	str	r3, [r4, #80]	; 0x50
        outputTypes.concat('f');
   d5c4c:	2166      	movs	r1, #102	; 0x66
    }
}
   d5c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        outputDatas[outputDatasSize] = u.b[3];
        outputDatas[outputDatasSize+1] = u.b[2];
        outputDatas[outputDatasSize+2] = u.b[1];
        outputDatas[outputDatasSize+3] = u.b[0];
        outputDatasSize += 4;
        outputTypes.concat('f');
   d5c52:	f000 bfd6 	b.w	d6c02 <_ZN6String6concatEc>
   d5c56:	bd38      	pop	{r3, r4, r5, pc}

000d5c58 <_ZN10OSCMessage4sendER3UDP9IPAddressj>:
    Serial.println("\n----");
}


void OSCMessage::send(UDP &udp, IPAddress remoteIP, unsigned int outPort)
{
   d5c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c5c:	b08b      	sub	sp, #44	; 0x2c
   d5c5e:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
   d5c62:	af00      	add	r7, sp, #0
   d5c64:	4681      	mov	r9, r0
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
   d5c66:	4640      	mov	r0, r8
    Serial.println("\n----");
}


void OSCMessage::send(UDP &udp, IPAddress remoteIP, unsigned int outPort)
{
   d5c68:	460e      	mov	r6, r1
   d5c6a:	60fa      	str	r2, [r7, #12]
   d5c6c:	60bb      	str	r3, [r7, #8]
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
   d5c6e:	f003 fd25 	bl	d96bc <strlen>
   d5c72:	4605      	mov	r5, r0
   d5c74:	3003      	adds	r0, #3
   d5c76:	0880      	lsrs	r0, r0, #2
   d5c78:	f003 f91c 	bl	d8eb4 <__aeabi_ui2d>
   d5c7c:	2200      	movs	r2, #0
   d5c7e:	4b40      	ldr	r3, [pc, #256]	; (d5d80 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x128>)
   d5c80:	f002 ffdc 	bl	d8c3c <__adddf3>
   d5c84:	f003 fc3c 	bl	d9500 <__aeabi_d2iz>
   d5c88:	f8d9 a03c 	ldr.w	sl, [r9, #60]	; 0x3c
   d5c8c:	0084      	lsls	r4, r0, #2
    int addresszeroCount = addressBitCount-strlen(outputAddress);
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
   d5c8e:	4650      	mov	r0, sl
   d5c90:	f003 fd14 	bl	d96bc <strlen>
{
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
    int addresszeroCount = addressBitCount-strlen(outputAddress);
   d5c94:	1b65      	subs	r5, r4, r5
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
   d5c96:	3401      	adds	r4, #1
   d5c98:	4683      	mov	fp, r0
   d5c9a:	4404      	add	r4, r0
    int outputTypesBitsCount = 4*round((strlen(outputTypes)+1)/4)+3;
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
   d5c9c:	3001      	adds	r0, #1
   d5c9e:	0880      	lsrs	r0, r0, #2
   d5ca0:	f003 f908 	bl	d8eb4 <__aeabi_ui2d>
   d5ca4:	2200      	movs	r2, #0
   d5ca6:	4b36      	ldr	r3, [pc, #216]	; (d5d80 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x128>)
   d5ca8:	f002 ffc8 	bl	d8c3c <__adddf3>
   d5cac:	f003 fc28 	bl	d9500 <__aeabi_d2iz>
   d5cb0:	f1cb 0b03 	rsb	fp, fp, #3
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
    outputBufferSize += outputDatasSize;
   d5cb4:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
   d5cb8:	603b      	str	r3, [r7, #0]
    int addresszeroCount = addressBitCount-strlen(outputAddress);
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
    int outputTypesBitsCount = 4*round((strlen(outputTypes)+1)/4)+3;
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
   d5cba:	eb0b 0b80 	add.w	fp, fp, r0, lsl #2
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
   d5cbe:	445c      	add	r4, fp
    outputBufferSize += outputDatasSize;
   d5cc0:	441c      	add	r4, r3
    //Serial.print ("bufferSize : ");  Serial.println(outputBufferSize);
    uint8_t nullChar = '\0';
    
    char outputBuffer[outputBufferSize];
   d5cc2:	1de2      	adds	r2, r4, #7
   d5cc4:	f022 0207 	bic.w	r2, r2, #7
   d5cc8:	ebad 0d02 	sub.w	sp, sp, r2
    memset(outputBuffer,nullChar,outputBufferSize);
   d5ccc:	2100      	movs	r1, #0
   d5cce:	4622      	mov	r2, r4
   d5cd0:	4668      	mov	r0, sp
   d5cd2:	f003 fc76 	bl	d95c2 <memset>
    memcpy(&outputBuffer[0],outputAddress,strlen(outputAddress));
   d5cd6:	4640      	mov	r0, r8
   d5cd8:	f003 fcf0 	bl	d96bc <strlen>
   d5cdc:	4641      	mov	r1, r8
   d5cde:	4602      	mov	r2, r0
   d5ce0:	4668      	mov	r0, sp
   d5ce2:	f003 fc63 	bl	d95ac <memcpy>
    outputBuffer[strlen(outputAddress)+addresszeroCount] = ',';
   d5ce6:	4640      	mov	r0, r8
   d5ce8:	f003 fce8 	bl	d96bc <strlen>
   d5cec:	eb0d 0205 	add.w	r2, sp, r5
   d5cf0:	212c      	movs	r1, #44	; 0x2c
   d5cf2:	5411      	strb	r1, [r2, r0]
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1],outputTypes,strlen(outputTypes));
   d5cf4:	4640      	mov	r0, r8
   d5cf6:	f003 fce1 	bl	d96bc <strlen>
   d5cfa:	6078      	str	r0, [r7, #4]
   d5cfc:	4650      	mov	r0, sl
   d5cfe:	f003 fcdd 	bl	d96bc <strlen>
   d5d02:	687a      	ldr	r2, [r7, #4]
   d5d04:	f102 0e01 	add.w	lr, r2, #1
   d5d08:	44ae      	add	lr, r5
   d5d0a:	4602      	mov	r2, r0
   d5d0c:	4651      	mov	r1, sl
   d5d0e:	eb0d 000e 	add.w	r0, sp, lr
   d5d12:	f003 fc4b 	bl	d95ac <memcpy>
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1+strlen(outputTypes)+outputTypesZerosCount],outputDatas,outputDatasSize);
   d5d16:	4640      	mov	r0, r8
   d5d18:	f003 fcd0 	bl	d96bc <strlen>
   d5d1c:	4680      	mov	r8, r0
   d5d1e:	4650      	mov	r0, sl
   d5d20:	f003 fccc 	bl	d96bc <strlen>
   d5d24:	4440      	add	r0, r8
   d5d26:	3001      	adds	r0, #1
   d5d28:	683b      	ldr	r3, [r7, #0]
   d5d2a:	f8d9 104c 	ldr.w	r1, [r9, #76]	; 0x4c
   d5d2e:	4405      	add	r5, r0
   d5d30:	eb05 000b 	add.w	r0, r5, fp
   d5d34:	461a      	mov	r2, r3
   d5d36:	4468      	add	r0, sp
   d5d38:	f003 fc38 	bl	d95ac <memcpy>
    
    udp.beginPacket(remoteIP,outPort);
   d5d3c:	6833      	ldr	r3, [r6, #0]
   d5d3e:	68fd      	ldr	r5, [r7, #12]
   d5d40:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d5d44:	4b0f      	ldr	r3, [pc, #60]	; (d5d84 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x12c>)
   d5d46:	613b      	str	r3, [r7, #16]
   d5d48:	3504      	adds	r5, #4
   d5d4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d4c:	f107 0e14 	add.w	lr, r7, #20
   d5d50:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d5d54:	682b      	ldr	r3, [r5, #0]
   d5d56:	f88e 3000 	strb.w	r3, [lr]
   d5d5a:	893a      	ldrh	r2, [r7, #8]
   d5d5c:	f107 0110 	add.w	r1, r7, #16
   d5d60:	4630      	mov	r0, r6
   d5d62:	47c0      	blx	r8
    udp.write((uint8_t *)&outputBuffer,outputBufferSize);
   d5d64:	6833      	ldr	r3, [r6, #0]
   d5d66:	4622      	mov	r2, r4
   d5d68:	4669      	mov	r1, sp
   d5d6a:	68db      	ldr	r3, [r3, #12]
   d5d6c:	4630      	mov	r0, r6
   d5d6e:	4798      	blx	r3
    udp.endPacket();
   d5d70:	6833      	ldr	r3, [r6, #0]
   d5d72:	4630      	mov	r0, r6
   d5d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5d76:	4798      	blx	r3
}
   d5d78:	372c      	adds	r7, #44	; 0x2c
   d5d7a:	46bd      	mov	sp, r7
   d5d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5d80:	3fe00000 	.word	0x3fe00000
   d5d84:	000d9be0 	.word	0x000d9be0

000d5d88 <_GLOBAL__sub_I__ZN10OSCMessageC2Ev>:
   d5d88:	f000 b838 	b.w	d5dfc <HAL_Pin_Map>

000d5d8c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5d8c:	b508      	push	{r3, lr}
   d5d8e:	4b02      	ldr	r3, [pc, #8]	; (d5d98 <os_thread_is_current+0xc>)
   d5d90:	681b      	ldr	r3, [r3, #0]
   d5d92:	689b      	ldr	r3, [r3, #8]
   d5d94:	9301      	str	r3, [sp, #4]
   d5d96:	bd08      	pop	{r3, pc}
   d5d98:	00030248 	.word	0x00030248

000d5d9c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5d9c:	b508      	push	{r3, lr}
   d5d9e:	4b02      	ldr	r3, [pc, #8]	; (d5da8 <os_thread_join+0xc>)
   d5da0:	681b      	ldr	r3, [r3, #0]
   d5da2:	691b      	ldr	r3, [r3, #16]
   d5da4:	9301      	str	r3, [sp, #4]
   d5da6:	bd08      	pop	{r3, pc}
   d5da8:	00030248 	.word	0x00030248

000d5dac <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5dac:	b508      	push	{r3, lr}
   d5dae:	4b02      	ldr	r3, [pc, #8]	; (d5db8 <os_thread_cleanup+0xc>)
   d5db0:	681b      	ldr	r3, [r3, #0]
   d5db2:	695b      	ldr	r3, [r3, #20]
   d5db4:	9301      	str	r3, [sp, #4]
   d5db6:	bd08      	pop	{r3, pc}
   d5db8:	00030248 	.word	0x00030248

000d5dbc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5dbc:	b508      	push	{r3, lr}
   d5dbe:	4b02      	ldr	r3, [pc, #8]	; (d5dc8 <os_mutex_recursive_create+0xc>)
   d5dc0:	681b      	ldr	r3, [r3, #0]
   d5dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5dc4:	9301      	str	r3, [sp, #4]
   d5dc6:	bd08      	pop	{r3, pc}
   d5dc8:	00030248 	.word	0x00030248

000d5dcc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5dcc:	b508      	push	{r3, lr}
   d5dce:	4b02      	ldr	r3, [pc, #8]	; (d5dd8 <os_mutex_recursive_destroy+0xc>)
   d5dd0:	681b      	ldr	r3, [r3, #0]
   d5dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5dd4:	9301      	str	r3, [sp, #4]
   d5dd6:	bd08      	pop	{r3, pc}
   d5dd8:	00030248 	.word	0x00030248

000d5ddc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5ddc:	b508      	push	{r3, lr}
   d5dde:	4b02      	ldr	r3, [pc, #8]	; (d5de8 <HAL_RNG_GetRandomNumber+0xc>)
   d5de0:	681b      	ldr	r3, [r3, #0]
   d5de2:	685b      	ldr	r3, [r3, #4]
   d5de4:	9301      	str	r3, [sp, #4]
   d5de6:	bd08      	pop	{r3, pc}
   d5de8:	00030218 	.word	0x00030218

000d5dec <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5dec:	b508      	push	{r3, lr}
   d5dee:	4b02      	ldr	r3, [pc, #8]	; (d5df8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5df0:	681b      	ldr	r3, [r3, #0]
   d5df2:	695b      	ldr	r3, [r3, #20]
   d5df4:	9301      	str	r3, [sp, #4]
   d5df6:	bd08      	pop	{r3, pc}
   d5df8:	00030218 	.word	0x00030218

000d5dfc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5dfc:	b508      	push	{r3, lr}
   d5dfe:	4b02      	ldr	r3, [pc, #8]	; (d5e08 <HAL_Pin_Map+0xc>)
   d5e00:	681b      	ldr	r3, [r3, #0]
   d5e02:	681b      	ldr	r3, [r3, #0]
   d5e04:	9301      	str	r3, [sp, #4]
   d5e06:	bd08      	pop	{r3, pc}
   d5e08:	0003022c 	.word	0x0003022c

000d5e0c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5e0c:	b508      	push	{r3, lr}
   d5e0e:	4b02      	ldr	r3, [pc, #8]	; (d5e18 <HAL_Validate_Pin_Function+0xc>)
   d5e10:	681b      	ldr	r3, [r3, #0]
   d5e12:	685b      	ldr	r3, [r3, #4]
   d5e14:	9301      	str	r3, [sp, #4]
   d5e16:	bd08      	pop	{r3, pc}
   d5e18:	0003022c 	.word	0x0003022c

000d5e1c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5e1c:	b508      	push	{r3, lr}
   d5e1e:	4b02      	ldr	r3, [pc, #8]	; (d5e28 <HAL_Pin_Mode+0xc>)
   d5e20:	681b      	ldr	r3, [r3, #0]
   d5e22:	689b      	ldr	r3, [r3, #8]
   d5e24:	9301      	str	r3, [sp, #4]
   d5e26:	bd08      	pop	{r3, pc}
   d5e28:	0003022c 	.word	0x0003022c

000d5e2c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5e2c:	b508      	push	{r3, lr}
   d5e2e:	4b02      	ldr	r3, [pc, #8]	; (d5e38 <HAL_ADC_Read+0xc>)
   d5e30:	681b      	ldr	r3, [r3, #0]
   d5e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e34:	9301      	str	r3, [sp, #4]
   d5e36:	bd08      	pop	{r3, pc}
   d5e38:	0003022c 	.word	0x0003022c

000d5e3c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5e3c:	b508      	push	{r3, lr}
   d5e3e:	4b02      	ldr	r3, [pc, #8]	; (d5e48 <HAL_I2C_Begin+0xc>)
   d5e40:	681b      	ldr	r3, [r3, #0]
   d5e42:	68db      	ldr	r3, [r3, #12]
   d5e44:	9301      	str	r3, [sp, #4]
   d5e46:	bd08      	pop	{r3, pc}
   d5e48:	00030228 	.word	0x00030228

000d5e4c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5e4c:	b508      	push	{r3, lr}
   d5e4e:	4b02      	ldr	r3, [pc, #8]	; (d5e58 <HAL_I2C_Begin_Transmission+0xc>)
   d5e50:	681b      	ldr	r3, [r3, #0]
   d5e52:	699b      	ldr	r3, [r3, #24]
   d5e54:	9301      	str	r3, [sp, #4]
   d5e56:	bd08      	pop	{r3, pc}
   d5e58:	00030228 	.word	0x00030228

000d5e5c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5e5c:	b508      	push	{r3, lr}
   d5e5e:	4b02      	ldr	r3, [pc, #8]	; (d5e68 <HAL_I2C_End_Transmission+0xc>)
   d5e60:	681b      	ldr	r3, [r3, #0]
   d5e62:	69db      	ldr	r3, [r3, #28]
   d5e64:	9301      	str	r3, [sp, #4]
   d5e66:	bd08      	pop	{r3, pc}
   d5e68:	00030228 	.word	0x00030228

000d5e6c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5e6c:	b508      	push	{r3, lr}
   d5e6e:	4b02      	ldr	r3, [pc, #8]	; (d5e78 <HAL_I2C_Write_Data+0xc>)
   d5e70:	681b      	ldr	r3, [r3, #0]
   d5e72:	6a1b      	ldr	r3, [r3, #32]
   d5e74:	9301      	str	r3, [sp, #4]
   d5e76:	bd08      	pop	{r3, pc}
   d5e78:	00030228 	.word	0x00030228

000d5e7c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5e7c:	b508      	push	{r3, lr}
   d5e7e:	4b02      	ldr	r3, [pc, #8]	; (d5e88 <HAL_I2C_Available_Data+0xc>)
   d5e80:	681b      	ldr	r3, [r3, #0]
   d5e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5e84:	9301      	str	r3, [sp, #4]
   d5e86:	bd08      	pop	{r3, pc}
   d5e88:	00030228 	.word	0x00030228

000d5e8c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5e8c:	b508      	push	{r3, lr}
   d5e8e:	4b02      	ldr	r3, [pc, #8]	; (d5e98 <HAL_I2C_Read_Data+0xc>)
   d5e90:	681b      	ldr	r3, [r3, #0]
   d5e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e94:	9301      	str	r3, [sp, #4]
   d5e96:	bd08      	pop	{r3, pc}
   d5e98:	00030228 	.word	0x00030228

000d5e9c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5e9c:	b508      	push	{r3, lr}
   d5e9e:	4b02      	ldr	r3, [pc, #8]	; (d5ea8 <HAL_I2C_Peek_Data+0xc>)
   d5ea0:	681b      	ldr	r3, [r3, #0]
   d5ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5ea4:	9301      	str	r3, [sp, #4]
   d5ea6:	bd08      	pop	{r3, pc}
   d5ea8:	00030228 	.word	0x00030228

000d5eac <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5eac:	b508      	push	{r3, lr}
   d5eae:	4b02      	ldr	r3, [pc, #8]	; (d5eb8 <HAL_I2C_Flush_Data+0xc>)
   d5eb0:	681b      	ldr	r3, [r3, #0]
   d5eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5eb4:	9301      	str	r3, [sp, #4]
   d5eb6:	bd08      	pop	{r3, pc}
   d5eb8:	00030228 	.word	0x00030228

000d5ebc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5ebc:	b508      	push	{r3, lr}
   d5ebe:	4b02      	ldr	r3, [pc, #8]	; (d5ec8 <HAL_I2C_Is_Enabled+0xc>)
   d5ec0:	681b      	ldr	r3, [r3, #0]
   d5ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5ec4:	9301      	str	r3, [sp, #4]
   d5ec6:	bd08      	pop	{r3, pc}
   d5ec8:	00030228 	.word	0x00030228

000d5ecc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5ecc:	b508      	push	{r3, lr}
   d5ece:	4b02      	ldr	r3, [pc, #8]	; (d5ed8 <HAL_I2C_Init+0xc>)
   d5ed0:	681b      	ldr	r3, [r3, #0]
   d5ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5ed4:	9301      	str	r3, [sp, #4]
   d5ed6:	bd08      	pop	{r3, pc}
   d5ed8:	00030228 	.word	0x00030228

000d5edc <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d5edc:	b508      	push	{r3, lr}
   d5ede:	4b02      	ldr	r3, [pc, #8]	; (d5ee8 <HAL_I2C_Request_Data_Ex+0xc>)
   d5ee0:	681b      	ldr	r3, [r3, #0]
   d5ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5ee4:	9301      	str	r3, [sp, #4]
   d5ee6:	bd08      	pop	{r3, pc}
   d5ee8:	00030228 	.word	0x00030228

000d5eec <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5eec:	b508      	push	{r3, lr}
   d5eee:	4b02      	ldr	r3, [pc, #8]	; (d5ef8 <if_index_to_name+0xc>)
   d5ef0:	681b      	ldr	r3, [r3, #0]
   d5ef2:	695b      	ldr	r3, [r3, #20]
   d5ef4:	9301      	str	r3, [sp, #4]
   d5ef6:	bd08      	pop	{r3, pc}
   d5ef8:	0003026c 	.word	0x0003026c

000d5efc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5efc:	b508      	push	{r3, lr}
   d5efe:	4b02      	ldr	r3, [pc, #8]	; (d5f08 <inet_inet_ntop+0xc>)
   d5f00:	681b      	ldr	r3, [r3, #0]
   d5f02:	695b      	ldr	r3, [r3, #20]
   d5f04:	9301      	str	r3, [sp, #4]
   d5f06:	bd08      	pop	{r3, pc}
   d5f08:	00030264 	.word	0x00030264

000d5f0c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5f0c:	b508      	push	{r3, lr}
   d5f0e:	4b02      	ldr	r3, [pc, #8]	; (d5f18 <inet_htonl+0xc>)
   d5f10:	681b      	ldr	r3, [r3, #0]
   d5f12:	6a1b      	ldr	r3, [r3, #32]
   d5f14:	9301      	str	r3, [sp, #4]
   d5f16:	bd08      	pop	{r3, pc}
   d5f18:	00030264 	.word	0x00030264

000d5f1c <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d5f1c:	b508      	push	{r3, lr}
   d5f1e:	4b02      	ldr	r3, [pc, #8]	; (d5f28 <inet_ntohs+0xc>)
   d5f20:	681b      	ldr	r3, [r3, #0]
   d5f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5f24:	9301      	str	r3, [sp, #4]
   d5f26:	bd08      	pop	{r3, pc}
   d5f28:	00030264 	.word	0x00030264

000d5f2c <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5f2c:	b508      	push	{r3, lr}
   d5f2e:	4b02      	ldr	r3, [pc, #8]	; (d5f38 <inet_htons+0xc>)
   d5f30:	681b      	ldr	r3, [r3, #0]
   d5f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5f34:	9301      	str	r3, [sp, #4]
   d5f36:	bd08      	pop	{r3, pc}
   d5f38:	00030264 	.word	0x00030264

000d5f3c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5f3c:	b508      	push	{r3, lr}
   d5f3e:	4b02      	ldr	r3, [pc, #8]	; (d5f48 <netdb_freeaddrinfo+0xc>)
   d5f40:	681b      	ldr	r3, [r3, #0]
   d5f42:	689b      	ldr	r3, [r3, #8]
   d5f44:	9301      	str	r3, [sp, #4]
   d5f46:	bd08      	pop	{r3, pc}
   d5f48:	00030268 	.word	0x00030268

000d5f4c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5f4c:	b508      	push	{r3, lr}
   d5f4e:	4b02      	ldr	r3, [pc, #8]	; (d5f58 <netdb_getaddrinfo+0xc>)
   d5f50:	681b      	ldr	r3, [r3, #0]
   d5f52:	68db      	ldr	r3, [r3, #12]
   d5f54:	9301      	str	r3, [sp, #4]
   d5f56:	bd08      	pop	{r3, pc}
   d5f58:	00030268 	.word	0x00030268

000d5f5c <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d5f5c:	b508      	push	{r3, lr}
   d5f5e:	4b02      	ldr	r3, [pc, #8]	; (d5f68 <sock_bind+0xc>)
   d5f60:	681b      	ldr	r3, [r3, #0]
   d5f62:	685b      	ldr	r3, [r3, #4]
   d5f64:	9301      	str	r3, [sp, #4]
   d5f66:	bd08      	pop	{r3, pc}
   d5f68:	00030238 	.word	0x00030238

000d5f6c <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5f6c:	b508      	push	{r3, lr}
   d5f6e:	4b02      	ldr	r3, [pc, #8]	; (d5f78 <sock_setsockopt+0xc>)
   d5f70:	681b      	ldr	r3, [r3, #0]
   d5f72:	699b      	ldr	r3, [r3, #24]
   d5f74:	9301      	str	r3, [sp, #4]
   d5f76:	bd08      	pop	{r3, pc}
   d5f78:	00030238 	.word	0x00030238

000d5f7c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5f7c:	b508      	push	{r3, lr}
   d5f7e:	4b02      	ldr	r3, [pc, #8]	; (d5f88 <sock_close+0xc>)
   d5f80:	681b      	ldr	r3, [r3, #0]
   d5f82:	69db      	ldr	r3, [r3, #28]
   d5f84:	9301      	str	r3, [sp, #4]
   d5f86:	bd08      	pop	{r3, pc}
   d5f88:	00030238 	.word	0x00030238

000d5f8c <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d5f8c:	b508      	push	{r3, lr}
   d5f8e:	4b02      	ldr	r3, [pc, #8]	; (d5f98 <sock_recvfrom+0xc>)
   d5f90:	681b      	ldr	r3, [r3, #0]
   d5f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5f94:	9301      	str	r3, [sp, #4]
   d5f96:	bd08      	pop	{r3, pc}
   d5f98:	00030238 	.word	0x00030238

000d5f9c <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d5f9c:	b508      	push	{r3, lr}
   d5f9e:	4b02      	ldr	r3, [pc, #8]	; (d5fa8 <sock_sendto+0xc>)
   d5fa0:	681b      	ldr	r3, [r3, #0]
   d5fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5fa4:	9301      	str	r3, [sp, #4]
   d5fa6:	bd08      	pop	{r3, pc}
   d5fa8:	00030238 	.word	0x00030238

000d5fac <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5fac:	b508      	push	{r3, lr}
   d5fae:	4b02      	ldr	r3, [pc, #8]	; (d5fb8 <sock_socket+0xc>)
   d5fb0:	681b      	ldr	r3, [r3, #0]
   d5fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5fb4:	9301      	str	r3, [sp, #4]
   d5fb6:	bd08      	pop	{r3, pc}
   d5fb8:	00030238 	.word	0x00030238

000d5fbc <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5fbc:	b508      	push	{r3, lr}
   d5fbe:	4b02      	ldr	r3, [pc, #8]	; (d5fc8 <HAL_SPI_Init+0xc>)
   d5fc0:	681b      	ldr	r3, [r3, #0]
   d5fc2:	69db      	ldr	r3, [r3, #28]
   d5fc4:	9301      	str	r3, [sp, #4]
   d5fc6:	bd08      	pop	{r3, pc}
   d5fc8:	00030230 	.word	0x00030230

000d5fcc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5fcc:	b508      	push	{r3, lr}
   d5fce:	4b02      	ldr	r3, [pc, #8]	; (d5fd8 <HAL_SPI_Is_Enabled+0xc>)
   d5fd0:	681b      	ldr	r3, [r3, #0]
   d5fd2:	6a1b      	ldr	r3, [r3, #32]
   d5fd4:	9301      	str	r3, [sp, #4]
   d5fd6:	bd08      	pop	{r3, pc}
   d5fd8:	00030230 	.word	0x00030230

000d5fdc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5fdc:	b508      	push	{r3, lr}
   d5fde:	4b02      	ldr	r3, [pc, #8]	; (d5fe8 <HAL_USART_Init+0xc>)
   d5fe0:	681b      	ldr	r3, [r3, #0]
   d5fe2:	681b      	ldr	r3, [r3, #0]
   d5fe4:	9301      	str	r3, [sp, #4]
   d5fe6:	bd08      	pop	{r3, pc}
   d5fe8:	0003023c 	.word	0x0003023c

000d5fec <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5fec:	b508      	push	{r3, lr}
   d5fee:	4b02      	ldr	r3, [pc, #8]	; (d5ff8 <HAL_USART_Write_Data+0xc>)
   d5ff0:	681b      	ldr	r3, [r3, #0]
   d5ff2:	68db      	ldr	r3, [r3, #12]
   d5ff4:	9301      	str	r3, [sp, #4]
   d5ff6:	bd08      	pop	{r3, pc}
   d5ff8:	0003023c 	.word	0x0003023c

000d5ffc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5ffc:	b508      	push	{r3, lr}
   d5ffe:	4b02      	ldr	r3, [pc, #8]	; (d6008 <HAL_USART_Available_Data+0xc>)
   d6000:	681b      	ldr	r3, [r3, #0]
   d6002:	691b      	ldr	r3, [r3, #16]
   d6004:	9301      	str	r3, [sp, #4]
   d6006:	bd08      	pop	{r3, pc}
   d6008:	0003023c 	.word	0x0003023c

000d600c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d600c:	b508      	push	{r3, lr}
   d600e:	4b02      	ldr	r3, [pc, #8]	; (d6018 <HAL_USART_Read_Data+0xc>)
   d6010:	681b      	ldr	r3, [r3, #0]
   d6012:	695b      	ldr	r3, [r3, #20]
   d6014:	9301      	str	r3, [sp, #4]
   d6016:	bd08      	pop	{r3, pc}
   d6018:	0003023c 	.word	0x0003023c

000d601c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d601c:	b508      	push	{r3, lr}
   d601e:	4b02      	ldr	r3, [pc, #8]	; (d6028 <HAL_USART_Peek_Data+0xc>)
   d6020:	681b      	ldr	r3, [r3, #0]
   d6022:	699b      	ldr	r3, [r3, #24]
   d6024:	9301      	str	r3, [sp, #4]
   d6026:	bd08      	pop	{r3, pc}
   d6028:	0003023c 	.word	0x0003023c

000d602c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d602c:	b508      	push	{r3, lr}
   d602e:	4b02      	ldr	r3, [pc, #8]	; (d6038 <HAL_USART_Flush_Data+0xc>)
   d6030:	681b      	ldr	r3, [r3, #0]
   d6032:	69db      	ldr	r3, [r3, #28]
   d6034:	9301      	str	r3, [sp, #4]
   d6036:	bd08      	pop	{r3, pc}
   d6038:	0003023c 	.word	0x0003023c

000d603c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d603c:	b508      	push	{r3, lr}
   d603e:	4b02      	ldr	r3, [pc, #8]	; (d6048 <HAL_USART_Is_Enabled+0xc>)
   d6040:	681b      	ldr	r3, [r3, #0]
   d6042:	6a1b      	ldr	r3, [r3, #32]
   d6044:	9301      	str	r3, [sp, #4]
   d6046:	bd08      	pop	{r3, pc}
   d6048:	0003023c 	.word	0x0003023c

000d604c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d604c:	b508      	push	{r3, lr}
   d604e:	4b02      	ldr	r3, [pc, #8]	; (d6058 <HAL_USART_Available_Data_For_Write+0xc>)
   d6050:	681b      	ldr	r3, [r3, #0]
   d6052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6054:	9301      	str	r3, [sp, #4]
   d6056:	bd08      	pop	{r3, pc}
   d6058:	0003023c 	.word	0x0003023c

000d605c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d605c:	b508      	push	{r3, lr}
   d605e:	4b02      	ldr	r3, [pc, #8]	; (d6068 <HAL_USB_USART_Init+0xc>)
   d6060:	681b      	ldr	r3, [r3, #0]
   d6062:	681b      	ldr	r3, [r3, #0]
   d6064:	9301      	str	r3, [sp, #4]
   d6066:	bd08      	pop	{r3, pc}
   d6068:	0003024c 	.word	0x0003024c

000d606c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d606c:	b508      	push	{r3, lr}
   d606e:	4b02      	ldr	r3, [pc, #8]	; (d6078 <HAL_USB_USART_Begin+0xc>)
   d6070:	681b      	ldr	r3, [r3, #0]
   d6072:	685b      	ldr	r3, [r3, #4]
   d6074:	9301      	str	r3, [sp, #4]
   d6076:	bd08      	pop	{r3, pc}
   d6078:	0003024c 	.word	0x0003024c

000d607c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d607c:	b508      	push	{r3, lr}
   d607e:	4b02      	ldr	r3, [pc, #8]	; (d6088 <HAL_USB_USART_Available_Data+0xc>)
   d6080:	681b      	ldr	r3, [r3, #0]
   d6082:	691b      	ldr	r3, [r3, #16]
   d6084:	9301      	str	r3, [sp, #4]
   d6086:	bd08      	pop	{r3, pc}
   d6088:	0003024c 	.word	0x0003024c

000d608c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d608c:	b508      	push	{r3, lr}
   d608e:	4b02      	ldr	r3, [pc, #8]	; (d6098 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6090:	681b      	ldr	r3, [r3, #0]
   d6092:	695b      	ldr	r3, [r3, #20]
   d6094:	9301      	str	r3, [sp, #4]
   d6096:	bd08      	pop	{r3, pc}
   d6098:	0003024c 	.word	0x0003024c

000d609c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d609c:	b508      	push	{r3, lr}
   d609e:	4b02      	ldr	r3, [pc, #8]	; (d60a8 <HAL_USB_USART_Receive_Data+0xc>)
   d60a0:	681b      	ldr	r3, [r3, #0]
   d60a2:	699b      	ldr	r3, [r3, #24]
   d60a4:	9301      	str	r3, [sp, #4]
   d60a6:	bd08      	pop	{r3, pc}
   d60a8:	0003024c 	.word	0x0003024c

000d60ac <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d60ac:	b508      	push	{r3, lr}
   d60ae:	4b02      	ldr	r3, [pc, #8]	; (d60b8 <HAL_USB_USART_Send_Data+0xc>)
   d60b0:	681b      	ldr	r3, [r3, #0]
   d60b2:	69db      	ldr	r3, [r3, #28]
   d60b4:	9301      	str	r3, [sp, #4]
   d60b6:	bd08      	pop	{r3, pc}
   d60b8:	0003024c 	.word	0x0003024c

000d60bc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d60bc:	b508      	push	{r3, lr}
   d60be:	4b02      	ldr	r3, [pc, #8]	; (d60c8 <HAL_USB_USART_Flush_Data+0xc>)
   d60c0:	681b      	ldr	r3, [r3, #0]
   d60c2:	6a1b      	ldr	r3, [r3, #32]
   d60c4:	9301      	str	r3, [sp, #4]
   d60c6:	bd08      	pop	{r3, pc}
   d60c8:	0003024c 	.word	0x0003024c

000d60cc <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d60cc:	b508      	push	{r3, lr}
   d60ce:	4b02      	ldr	r3, [pc, #8]	; (d60d8 <HAL_USB_USART_Is_Enabled+0xc>)
   d60d0:	681b      	ldr	r3, [r3, #0]
   d60d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d60d4:	9301      	str	r3, [sp, #4]
   d60d6:	bd08      	pop	{r3, pc}
   d60d8:	0003024c 	.word	0x0003024c

000d60dc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d60dc:	b508      	push	{r3, lr}
   d60de:	4b02      	ldr	r3, [pc, #8]	; (d60e8 <set_system_mode+0xc>)
   d60e0:	681b      	ldr	r3, [r3, #0]
   d60e2:	685b      	ldr	r3, [r3, #4]
   d60e4:	9301      	str	r3, [sp, #4]
   d60e6:	bd08      	pop	{r3, pc}
   d60e8:	00030220 	.word	0x00030220

000d60ec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d60ec:	b508      	push	{r3, lr}
   d60ee:	4b02      	ldr	r3, [pc, #8]	; (d60f8 <system_delay_ms+0xc>)
   d60f0:	681b      	ldr	r3, [r3, #0]
   d60f2:	695b      	ldr	r3, [r3, #20]
   d60f4:	9301      	str	r3, [sp, #4]
   d60f6:	bd08      	pop	{r3, pc}
   d60f8:	00030220 	.word	0x00030220

000d60fc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d60fc:	b508      	push	{r3, lr}
   d60fe:	4b02      	ldr	r3, [pc, #8]	; (d6108 <system_thread_set_state+0xc>)
   d6100:	681b      	ldr	r3, [r3, #0]
   d6102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6104:	9301      	str	r3, [sp, #4]
   d6106:	bd08      	pop	{r3, pc}
   d6108:	00030220 	.word	0x00030220

000d610c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d610c:	b508      	push	{r3, lr}
   d610e:	4b03      	ldr	r3, [pc, #12]	; (d611c <system_ctrl_set_app_request_handler+0x10>)
   d6110:	681b      	ldr	r3, [r3, #0]
   d6112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6116:	9301      	str	r3, [sp, #4]
   d6118:	bd08      	pop	{r3, pc}
   d611a:	0000      	.short	0x0000
   d611c:	00030220 	.word	0x00030220

000d6120 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6120:	b508      	push	{r3, lr}
   d6122:	4b03      	ldr	r3, [pc, #12]	; (d6130 <system_ctrl_set_result+0x10>)
   d6124:	681b      	ldr	r3, [r3, #0]
   d6126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d612a:	9301      	str	r3, [sp, #4]
   d612c:	bd08      	pop	{r3, pc}
   d612e:	0000      	.short	0x0000
   d6130:	00030220 	.word	0x00030220

000d6134 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6134:	b508      	push	{r3, lr}
   d6136:	4b02      	ldr	r3, [pc, #8]	; (d6140 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6138:	681b      	ldr	r3, [r3, #0]
   d613a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d613c:	9301      	str	r3, [sp, #4]
   d613e:	bd08      	pop	{r3, pc}
   d6140:	00030244 	.word	0x00030244

000d6144 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   d6144:	b508      	push	{r3, lr}
   d6146:	4b02      	ldr	r3, [pc, #8]	; (d6150 <network_config+0xc>)
   d6148:	681b      	ldr	r3, [r3, #0]
   d614a:	681b      	ldr	r3, [r3, #0]
   d614c:	9301      	str	r3, [sp, #4]
   d614e:	bd08      	pop	{r3, pc}
   d6150:	00030240 	.word	0x00030240

000d6154 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6154:	b508      	push	{r3, lr}
   d6156:	4b02      	ldr	r3, [pc, #8]	; (d6160 <network_connect+0xc>)
   d6158:	681b      	ldr	r3, [r3, #0]
   d615a:	685b      	ldr	r3, [r3, #4]
   d615c:	9301      	str	r3, [sp, #4]
   d615e:	bd08      	pop	{r3, pc}
   d6160:	00030240 	.word	0x00030240

000d6164 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6164:	b508      	push	{r3, lr}
   d6166:	4b02      	ldr	r3, [pc, #8]	; (d6170 <network_connecting+0xc>)
   d6168:	681b      	ldr	r3, [r3, #0]
   d616a:	689b      	ldr	r3, [r3, #8]
   d616c:	9301      	str	r3, [sp, #4]
   d616e:	bd08      	pop	{r3, pc}
   d6170:	00030240 	.word	0x00030240

000d6174 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6174:	b508      	push	{r3, lr}
   d6176:	4b02      	ldr	r3, [pc, #8]	; (d6180 <network_disconnect+0xc>)
   d6178:	681b      	ldr	r3, [r3, #0]
   d617a:	68db      	ldr	r3, [r3, #12]
   d617c:	9301      	str	r3, [sp, #4]
   d617e:	bd08      	pop	{r3, pc}
   d6180:	00030240 	.word	0x00030240

000d6184 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6184:	b508      	push	{r3, lr}
   d6186:	4b02      	ldr	r3, [pc, #8]	; (d6190 <network_ready+0xc>)
   d6188:	681b      	ldr	r3, [r3, #0]
   d618a:	691b      	ldr	r3, [r3, #16]
   d618c:	9301      	str	r3, [sp, #4]
   d618e:	bd08      	pop	{r3, pc}
   d6190:	00030240 	.word	0x00030240

000d6194 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6194:	b508      	push	{r3, lr}
   d6196:	4b02      	ldr	r3, [pc, #8]	; (d61a0 <network_on+0xc>)
   d6198:	681b      	ldr	r3, [r3, #0]
   d619a:	695b      	ldr	r3, [r3, #20]
   d619c:	9301      	str	r3, [sp, #4]
   d619e:	bd08      	pop	{r3, pc}
   d61a0:	00030240 	.word	0x00030240

000d61a4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d61a4:	b508      	push	{r3, lr}
   d61a6:	4b02      	ldr	r3, [pc, #8]	; (d61b0 <network_off+0xc>)
   d61a8:	681b      	ldr	r3, [r3, #0]
   d61aa:	699b      	ldr	r3, [r3, #24]
   d61ac:	9301      	str	r3, [sp, #4]
   d61ae:	bd08      	pop	{r3, pc}
   d61b0:	00030240 	.word	0x00030240

000d61b4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d61b4:	b508      	push	{r3, lr}
   d61b6:	4b02      	ldr	r3, [pc, #8]	; (d61c0 <network_listen+0xc>)
   d61b8:	681b      	ldr	r3, [r3, #0]
   d61ba:	69db      	ldr	r3, [r3, #28]
   d61bc:	9301      	str	r3, [sp, #4]
   d61be:	bd08      	pop	{r3, pc}
   d61c0:	00030240 	.word	0x00030240

000d61c4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d61c4:	b508      	push	{r3, lr}
   d61c6:	4b02      	ldr	r3, [pc, #8]	; (d61d0 <network_listening+0xc>)
   d61c8:	681b      	ldr	r3, [r3, #0]
   d61ca:	6a1b      	ldr	r3, [r3, #32]
   d61cc:	9301      	str	r3, [sp, #4]
   d61ce:	bd08      	pop	{r3, pc}
   d61d0:	00030240 	.word	0x00030240

000d61d4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d61d4:	b508      	push	{r3, lr}
   d61d6:	4b02      	ldr	r3, [pc, #8]	; (d61e0 <network_set_listen_timeout+0xc>)
   d61d8:	681b      	ldr	r3, [r3, #0]
   d61da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d61dc:	9301      	str	r3, [sp, #4]
   d61de:	bd08      	pop	{r3, pc}
   d61e0:	00030240 	.word	0x00030240

000d61e4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d61e4:	b508      	push	{r3, lr}
   d61e6:	4b02      	ldr	r3, [pc, #8]	; (d61f0 <network_get_listen_timeout+0xc>)
   d61e8:	681b      	ldr	r3, [r3, #0]
   d61ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d61ec:	9301      	str	r3, [sp, #4]
   d61ee:	bd08      	pop	{r3, pc}
   d61f0:	00030240 	.word	0x00030240

000d61f4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d61f4:	b508      	push	{r3, lr}
   d61f6:	4b02      	ldr	r3, [pc, #8]	; (d6200 <malloc+0xc>)
   d61f8:	681b      	ldr	r3, [r3, #0]
   d61fa:	681b      	ldr	r3, [r3, #0]
   d61fc:	9301      	str	r3, [sp, #4]
   d61fe:	bd08      	pop	{r3, pc}
   d6200:	0003021c 	.word	0x0003021c

000d6204 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6204:	b508      	push	{r3, lr}
   d6206:	4b02      	ldr	r3, [pc, #8]	; (d6210 <free+0xc>)
   d6208:	681b      	ldr	r3, [r3, #0]
   d620a:	685b      	ldr	r3, [r3, #4]
   d620c:	9301      	str	r3, [sp, #4]
   d620e:	bd08      	pop	{r3, pc}
   d6210:	0003021c 	.word	0x0003021c

000d6214 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6214:	b508      	push	{r3, lr}
   d6216:	4b02      	ldr	r3, [pc, #8]	; (d6220 <realloc+0xc>)
   d6218:	681b      	ldr	r3, [r3, #0]
   d621a:	689b      	ldr	r3, [r3, #8]
   d621c:	9301      	str	r3, [sp, #4]
   d621e:	bd08      	pop	{r3, pc}
   d6220:	0003021c 	.word	0x0003021c

000d6224 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d6224:	b508      	push	{r3, lr}
   d6226:	4b02      	ldr	r3, [pc, #8]	; (d6230 <sprintf+0xc>)
   d6228:	681b      	ldr	r3, [r3, #0]
   d622a:	68db      	ldr	r3, [r3, #12]
   d622c:	9301      	str	r3, [sp, #4]
   d622e:	bd08      	pop	{r3, pc}
   d6230:	0003021c 	.word	0x0003021c

000d6234 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6234:	b508      	push	{r3, lr}
   d6236:	4b02      	ldr	r3, [pc, #8]	; (d6240 <__errno+0xc>)
   d6238:	681b      	ldr	r3, [r3, #0]
   d623a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d623c:	9301      	str	r3, [sp, #4]
   d623e:	bd08      	pop	{r3, pc}
   d6240:	0003021c 	.word	0x0003021c

000d6244 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6244:	2100      	movs	r1, #0
   d6246:	f7ff bf51 	b.w	d60ec <system_delay_ms>

000d624a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d624a:	b510      	push	{r4, lr}
   d624c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d624e:	6800      	ldr	r0, [r0, #0]
   d6250:	b108      	cbz	r0, d6256 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6252:	f7ff fdbb 	bl	d5dcc <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d6256:	4620      	mov	r0, r4
   d6258:	bd10      	pop	{r4, pc}
	...

000d625c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d625c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d625e:	4c06      	ldr	r4, [pc, #24]	; (d6278 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6260:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d6262:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6264:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6266:	f7ff fda9 	bl	d5dbc <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d626a:	4620      	mov	r0, r4
   d626c:	4a03      	ldr	r2, [pc, #12]	; (d627c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d626e:	4904      	ldr	r1, [pc, #16]	; (d6280 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6274:	f001 ba38 	b.w	d76e8 <__aeabi_atexit>
   d6278:	2003e3d4 	.word	0x2003e3d4
   d627c:	2003e2d8 	.word	0x2003e2d8
   d6280:	000d624b 	.word	0x000d624b

000d6284 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6284:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6286:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6288:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d628a:	b113      	cbz	r3, d6292 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d628c:	2203      	movs	r2, #3
   d628e:	4601      	mov	r1, r0
   d6290:	4798      	blx	r3
    }
   d6292:	4620      	mov	r0, r4
   d6294:	bd10      	pop	{r4, pc}

000d6296 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6296:	2200      	movs	r2, #0
   d6298:	4611      	mov	r1, r2
   d629a:	6840      	ldr	r0, [r0, #4]
   d629c:	f7ff bf92 	b.w	d61c4 <network_listening>

000d62a0 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d62a0:	2200      	movs	r2, #0
   d62a2:	4611      	mov	r1, r2
   d62a4:	6840      	ldr	r0, [r0, #4]
   d62a6:	f7ff bf9d 	b.w	d61e4 <network_get_listen_timeout>

000d62aa <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d62aa:	2200      	movs	r2, #0
   d62ac:	6840      	ldr	r0, [r0, #4]
   d62ae:	f7ff bf91 	b.w	d61d4 <network_set_listen_timeout>

000d62b2 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d62b2:	2200      	movs	r2, #0
   d62b4:	f081 0101 	eor.w	r1, r1, #1
   d62b8:	6840      	ldr	r0, [r0, #4]
   d62ba:	f7ff bf7b 	b.w	d61b4 <network_listen>

000d62be <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d62be:	2300      	movs	r3, #0
   d62c0:	461a      	mov	r2, r3
   d62c2:	4619      	mov	r1, r3
   d62c4:	6840      	ldr	r0, [r0, #4]
   d62c6:	f7ff bf6d 	b.w	d61a4 <network_off>

000d62ca <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d62ca:	2300      	movs	r3, #0
   d62cc:	461a      	mov	r2, r3
   d62ce:	4619      	mov	r1, r3
   d62d0:	6840      	ldr	r0, [r0, #4]
   d62d2:	f7ff bf5f 	b.w	d6194 <network_on>

000d62d6 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d62d6:	2200      	movs	r2, #0
   d62d8:	4611      	mov	r1, r2
   d62da:	6840      	ldr	r0, [r0, #4]
   d62dc:	f7ff bf52 	b.w	d6184 <network_ready>

000d62e0 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d62e0:	2200      	movs	r2, #0
   d62e2:	4611      	mov	r1, r2
   d62e4:	6840      	ldr	r0, [r0, #4]
   d62e6:	f7ff bf3d 	b.w	d6164 <network_connecting>

000d62ea <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d62ea:	2200      	movs	r2, #0
   d62ec:	2102      	movs	r1, #2
   d62ee:	6840      	ldr	r0, [r0, #4]
   d62f0:	f7ff bf40 	b.w	d6174 <network_disconnect>

000d62f4 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d62f4:	2300      	movs	r3, #0
   d62f6:	461a      	mov	r2, r3
   d62f8:	6840      	ldr	r0, [r0, #4]
   d62fa:	f7ff bf2b 	b.w	d6154 <network_connect>
	...

000d6300 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6300:	4b02      	ldr	r3, [pc, #8]	; (d630c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6302:	2203      	movs	r2, #3
   d6304:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6306:	4a02      	ldr	r2, [pc, #8]	; (d6310 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6308:	601a      	str	r2, [r3, #0]
   d630a:	4770      	bx	lr
   d630c:	2003e3d8 	.word	0x2003e3d8
   d6310:	000d9b84 	.word	0x000d9b84

000d6314 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6314:	4770      	bx	lr

000d6316 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6318:	4606      	mov	r6, r0
   d631a:	4615      	mov	r5, r2
   d631c:	460c      	mov	r4, r1
   d631e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6320:	42bc      	cmp	r4, r7
   d6322:	d006      	beq.n	d6332 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6324:	6833      	ldr	r3, [r6, #0]
   d6326:	f814 1b01 	ldrb.w	r1, [r4], #1
   d632a:	689b      	ldr	r3, [r3, #8]
   d632c:	4630      	mov	r0, r6
   d632e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6330:	e7f6      	b.n	d6320 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6332:	4628      	mov	r0, r5
   d6334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6336 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6336:	2200      	movs	r2, #0
   d6338:	7c00      	ldrb	r0, [r0, #16]
   d633a:	f7ff bd97 	b.w	d5e6c <HAL_I2C_Write_Data>

000d633e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d633e:	2100      	movs	r1, #0
   d6340:	7c00      	ldrb	r0, [r0, #16]
   d6342:	f7ff bd9b 	b.w	d5e7c <HAL_I2C_Available_Data>

000d6346 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6346:	2100      	movs	r1, #0
   d6348:	7c00      	ldrb	r0, [r0, #16]
   d634a:	f7ff bd9f 	b.w	d5e8c <HAL_I2C_Read_Data>

000d634e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d634e:	2100      	movs	r1, #0
   d6350:	7c00      	ldrb	r0, [r0, #16]
   d6352:	f7ff bda3 	b.w	d5e9c <HAL_I2C_Peek_Data>

000d6356 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6356:	2100      	movs	r1, #0
   d6358:	7c00      	ldrb	r0, [r0, #16]
   d635a:	f7ff bda7 	b.w	d5eac <HAL_I2C_Flush_Data>

000d635e <_ZN7TwoWireD0Ev>:
   d635e:	b510      	push	{r4, lr}
   d6360:	2114      	movs	r1, #20
   d6362:	4604      	mov	r4, r0
   d6364:	f001 f9c5 	bl	d76f2 <_ZdlPvj>
   d6368:	4620      	mov	r0, r4
   d636a:	bd10      	pop	{r4, pc}

000d636c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d636c:	b510      	push	{r4, lr}
   d636e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6370:	2300      	movs	r3, #0
   d6372:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6378:	60a3      	str	r3, [r4, #8]
   d637a:	4b04      	ldr	r3, [pc, #16]	; (d638c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d637c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d637e:	4608      	mov	r0, r1
   d6380:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6382:	4611      	mov	r1, r2
   d6384:	f7ff fda2 	bl	d5ecc <HAL_I2C_Init>
}
   d6388:	4620      	mov	r0, r4
   d638a:	bd10      	pop	{r4, pc}
   d638c:	000d9bb8 	.word	0x000d9bb8

000d6390 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6390:	2300      	movs	r3, #0
   d6392:	461a      	mov	r2, r3
   d6394:	4619      	mov	r1, r3
   d6396:	7c00      	ldrb	r0, [r0, #16]
   d6398:	f7ff bd50 	b.w	d5e3c <HAL_I2C_Begin>

000d639c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d639c:	b570      	push	{r4, r5, r6, lr}
   d639e:	460c      	mov	r4, r1
   d63a0:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d63a2:	2514      	movs	r5, #20
   d63a4:	4606      	mov	r6, r0
   d63a6:	462a      	mov	r2, r5
   d63a8:	2100      	movs	r1, #0
   d63aa:	a801      	add	r0, sp, #4
   d63ac:	f003 f909 	bl	d95c2 <memset>
   d63b0:	7823      	ldrb	r3, [r4, #0]
   d63b2:	f88d 3008 	strb.w	r3, [sp, #8]
   d63b6:	6863      	ldr	r3, [r4, #4]
   d63b8:	9303      	str	r3, [sp, #12]
   d63ba:	68e3      	ldr	r3, [r4, #12]
   d63bc:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d63be:	2200      	movs	r2, #0
   d63c0:	7a23      	ldrb	r3, [r4, #8]
   d63c2:	7c30      	ldrb	r0, [r6, #16]
   d63c4:	f8ad 5004 	strh.w	r5, [sp, #4]
   d63c8:	a901      	add	r1, sp, #4
   d63ca:	9305      	str	r3, [sp, #20]
   d63cc:	f7ff fd86 	bl	d5edc <HAL_I2C_Request_Data_Ex>
}
   d63d0:	b006      	add	sp, #24
   d63d2:	bd70      	pop	{r4, r5, r6, pc}

000d63d4 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d63d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d63d6:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d63d8:	f88d 1000 	strb.w	r1, [sp]
   d63dc:	f04f 0164 	mov.w	r1, #100	; 0x64
   d63e0:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d63e2:	bf18      	it	ne
   d63e4:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d63e6:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d63e8:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d63ea:	f88d 3008 	strb.w	r3, [sp, #8]
   d63ee:	f7ff ffd5 	bl	d639c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d63f2:	b005      	add	sp, #20
   d63f4:	f85d fb04 	ldr.w	pc, [sp], #4

000d63f8 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d63f8:	2301      	movs	r3, #1
   d63fa:	f7ff bfeb 	b.w	d63d4 <_ZN7TwoWire11requestFromEhjh>

000d63fe <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d63fe:	2200      	movs	r2, #0
   d6400:	7c00      	ldrb	r0, [r0, #16]
   d6402:	f7ff bd23 	b.w	d5e4c <HAL_I2C_Begin_Transmission>

000d6406 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d6406:	b2c9      	uxtb	r1, r1
   d6408:	f7ff bff9 	b.w	d63fe <_ZN7TwoWire17beginTransmissionEh>

000d640c <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d640c:	2200      	movs	r2, #0
   d640e:	7c00      	ldrb	r0, [r0, #16]
   d6410:	f7ff bd24 	b.w	d5e5c <HAL_I2C_End_Transmission>

000d6414 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6414:	2101      	movs	r1, #1
   d6416:	f7ff bff9 	b.w	d640c <_ZN7TwoWire15endTransmissionEh>

000d641a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d641a:	2100      	movs	r1, #0
   d641c:	7c00      	ldrb	r0, [r0, #16]
   d641e:	f7ff bd4d 	b.w	d5ebc <HAL_I2C_Is_Enabled>

000d6422 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6422:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6424:	7d03      	ldrb	r3, [r0, #20]
   d6426:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6428:	b08d      	sub	sp, #52	; 0x34
   d642a:	460e      	mov	r6, r1
   d642c:	f100 0704 	add.w	r7, r0, #4
   d6430:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6434:	d002      	beq.n	d643c <_ZNK9IPAddress7printToER5Print+0x1a>
   d6436:	f100 0508 	add.w	r5, r0, #8
   d643a:	e018      	b.n	d646e <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d643c:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d643e:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6440:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6444:	232f      	movs	r3, #47	; 0x2f
   d6446:	462a      	mov	r2, r5
   d6448:	200a      	movs	r0, #10
   d644a:	f7ff fd57 	bl	d5efc <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d644e:	4628      	mov	r0, r5
   d6450:	f003 f934 	bl	d96bc <strlen>
   d6454:	6833      	ldr	r3, [r6, #0]
   d6456:	4602      	mov	r2, r0
   d6458:	68db      	ldr	r3, [r3, #12]
   d645a:	4629      	mov	r1, r5
   d645c:	4630      	mov	r0, r6
   d645e:	4798      	blx	r3
   d6460:	e00f      	b.n	d6482 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6462:	b124      	cbz	r4, d646e <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6464:	212e      	movs	r1, #46	; 0x2e
   d6466:	4630      	mov	r0, r6
   d6468:	f000 f9fe 	bl	d6868 <_ZN5Print5printEc>
   d646c:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d646e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6472:	220a      	movs	r2, #10
   d6474:	4630      	mov	r0, r6
   d6476:	f000 fa10 	bl	d689a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d647a:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d647c:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d647e:	d1f0      	bne.n	d6462 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6480:	4620      	mov	r0, r4
    }
    return n;
}
   d6482:	b00d      	add	sp, #52	; 0x34
   d6484:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6488 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6488:	b510      	push	{r4, lr}
   d648a:	4b05      	ldr	r3, [pc, #20]	; (d64a0 <_ZN9IPAddressC1Ev+0x18>)
   d648c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d648e:	2211      	movs	r2, #17
   d6490:	f840 3b04 	str.w	r3, [r0], #4
   d6494:	2100      	movs	r1, #0
   d6496:	f003 f894 	bl	d95c2 <memset>
{
    clear();
}
   d649a:	4620      	mov	r0, r4
   d649c:	bd10      	pop	{r4, pc}
   d649e:	bf00      	nop
   d64a0:	000d9be0 	.word	0x000d9be0

000d64a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d64a4:	4603      	mov	r3, r0
   d64a6:	4a07      	ldr	r2, [pc, #28]	; (d64c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d64a8:	b510      	push	{r4, lr}
   d64aa:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d64ae:	f101 0210 	add.w	r2, r1, #16
   d64b2:	f851 4b04 	ldr.w	r4, [r1], #4
   d64b6:	f843 4b04 	str.w	r4, [r3], #4
   d64ba:	4291      	cmp	r1, r2
   d64bc:	d1f9      	bne.n	d64b2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d64be:	780a      	ldrb	r2, [r1, #0]
   d64c0:	701a      	strb	r2, [r3, #0]
}
   d64c2:	bd10      	pop	{r4, pc}
   d64c4:	000d9be0 	.word	0x000d9be0

000d64c8 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d64c8:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d64ca:	2b04      	cmp	r3, #4
   d64cc:	d101      	bne.n	d64d2 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d64ce:	6840      	ldr	r0, [r0, #4]
   d64d0:	e008      	b.n	d64e4 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d64d2:	2b06      	cmp	r3, #6
   d64d4:	d10a      	bne.n	d64ec <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d64d6:	6843      	ldr	r3, [r0, #4]
   d64d8:	b953      	cbnz	r3, d64f0 <_ZNK9IPAddresscvbEv+0x28>
   d64da:	6883      	ldr	r3, [r0, #8]
   d64dc:	b943      	cbnz	r3, d64f0 <_ZNK9IPAddresscvbEv+0x28>
   d64de:	68c3      	ldr	r3, [r0, #12]
   d64e0:	b933      	cbnz	r3, d64f0 <_ZNK9IPAddresscvbEv+0x28>
   d64e2:	6900      	ldr	r0, [r0, #16]
   d64e4:	3000      	adds	r0, #0
   d64e6:	bf18      	it	ne
   d64e8:	2001      	movne	r0, #1
   d64ea:	4770      	bx	lr
    } else {
        return false;
   d64ec:	2000      	movs	r0, #0
   d64ee:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d64f0:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d64f2:	4770      	bx	lr

000d64f4 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d64f4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d64f6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d64fa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d64fe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6502:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6506:	2304      	movs	r3, #4
   d6508:	6041      	str	r1, [r0, #4]
   d650a:	7503      	strb	r3, [r0, #20]
   d650c:	bd10      	pop	{r4, pc}
	...

000d6510 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d6510:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6512:	4d04      	ldr	r5, [pc, #16]	; (d6524 <_ZN9IPAddressC1Ehhhh+0x14>)
   d6514:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d6516:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d651a:	9500      	str	r5, [sp, #0]
   d651c:	f7ff ffea 	bl	d64f4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6520:	b003      	add	sp, #12
   d6522:	bd30      	pop	{r4, r5, pc}
   d6524:	000d9be0 	.word	0x000d9be0

000d6528 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6528:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d652a:	780d      	ldrb	r5, [r1, #0]
   d652c:	788b      	ldrb	r3, [r1, #2]
   d652e:	784a      	ldrb	r2, [r1, #1]
   d6530:	78c9      	ldrb	r1, [r1, #3]
   d6532:	9100      	str	r1, [sp, #0]
   d6534:	4629      	mov	r1, r5
   d6536:	f7ff ffdd 	bl	d64f4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d653a:	b003      	add	sp, #12
   d653c:	bd30      	pop	{r4, r5, pc}
	...

000d6540 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6540:	4b01      	ldr	r3, [pc, #4]	; (d6548 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6542:	4a02      	ldr	r2, [pc, #8]	; (d654c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6544:	601a      	str	r2, [r3, #0]
   d6546:	4770      	bx	lr
   d6548:	2003e3e0 	.word	0x2003e3e0
   d654c:	000d9c5f 	.word	0x000d9c5f

000d6550 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6550:	2200      	movs	r2, #0
   d6552:	4611      	mov	r1, r2
   d6554:	6840      	ldr	r0, [r0, #4]
   d6556:	f7ff be35 	b.w	d61c4 <network_listening>

000d655a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d655a:	2200      	movs	r2, #0
   d655c:	4611      	mov	r1, r2
   d655e:	6840      	ldr	r0, [r0, #4]
   d6560:	f7ff be40 	b.w	d61e4 <network_get_listen_timeout>

000d6564 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6564:	2200      	movs	r2, #0
   d6566:	6840      	ldr	r0, [r0, #4]
   d6568:	f7ff be34 	b.w	d61d4 <network_set_listen_timeout>

000d656c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d656c:	2200      	movs	r2, #0
   d656e:	f081 0101 	eor.w	r1, r1, #1
   d6572:	6840      	ldr	r0, [r0, #4]
   d6574:	f7ff be1e 	b.w	d61b4 <network_listen>

000d6578 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6578:	2300      	movs	r3, #0
   d657a:	461a      	mov	r2, r3
   d657c:	2101      	movs	r1, #1
   d657e:	6840      	ldr	r0, [r0, #4]
   d6580:	f7ff be10 	b.w	d61a4 <network_off>

000d6584 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6584:	2300      	movs	r3, #0
   d6586:	461a      	mov	r2, r3
   d6588:	4619      	mov	r1, r3
   d658a:	6840      	ldr	r0, [r0, #4]
   d658c:	f7ff be02 	b.w	d6194 <network_on>

000d6590 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6590:	2200      	movs	r2, #0
   d6592:	4611      	mov	r1, r2
   d6594:	6840      	ldr	r0, [r0, #4]
   d6596:	f7ff bdf5 	b.w	d6184 <network_ready>

000d659a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d659a:	2200      	movs	r2, #0
   d659c:	4611      	mov	r1, r2
   d659e:	6840      	ldr	r0, [r0, #4]
   d65a0:	f7ff bde0 	b.w	d6164 <network_connecting>

000d65a4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d65a4:	2200      	movs	r2, #0
   d65a6:	2102      	movs	r1, #2
   d65a8:	6840      	ldr	r0, [r0, #4]
   d65aa:	f7ff bde3 	b.w	d6174 <network_disconnect>

000d65ae <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d65ae:	2300      	movs	r3, #0
   d65b0:	461a      	mov	r2, r3
   d65b2:	6840      	ldr	r0, [r0, #4]
   d65b4:	f7ff bdce 	b.w	d6154 <network_connect>

000d65b8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d65b8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d65ba:	4605      	mov	r5, r0
   d65bc:	b188      	cbz	r0, d65e2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d65be:	6804      	ldr	r4, [r0, #0]
   d65c0:	b14c      	cbz	r4, d65d6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d65c2:	68a3      	ldr	r3, [r4, #8]
   d65c4:	b11b      	cbz	r3, d65ce <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d65c6:	2203      	movs	r2, #3
   d65c8:	4621      	mov	r1, r4
   d65ca:	4620      	mov	r0, r4
   d65cc:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d65ce:	2110      	movs	r1, #16
   d65d0:	4620      	mov	r0, r4
   d65d2:	f001 f88e 	bl	d76f2 <_ZdlPvj>
   d65d6:	4628      	mov	r0, r5
   d65d8:	2114      	movs	r1, #20
      }
   d65da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d65de:	f001 b888 	b.w	d76f2 <_ZdlPvj>
   d65e2:	bd38      	pop	{r3, r4, r5, pc}

000d65e4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d65e4:	b110      	cbz	r0, d65ec <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d65e6:	6803      	ldr	r3, [r0, #0]
   d65e8:	685b      	ldr	r3, [r3, #4]
   d65ea:	4718      	bx	r3
   d65ec:	4770      	bx	lr

000d65ee <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d65ee:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d65f0:	6803      	ldr	r3, [r0, #0]
   d65f2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d65f4:	b1bb      	cbz	r3, d6626 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d65f6:	6858      	ldr	r0, [r3, #4]
   d65f8:	f7ff fbc8 	bl	d5d8c <os_thread_is_current>
   d65fc:	b978      	cbnz	r0, d661e <_ZN6ThreadD1Ev+0x30>
   d65fe:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6600:	7c5a      	ldrb	r2, [r3, #17]
   d6602:	b912      	cbnz	r2, d660a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6604:	6858      	ldr	r0, [r3, #4]
   d6606:	f7ff fbc9 	bl	d5d9c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d660a:	6823      	ldr	r3, [r4, #0]
   d660c:	6858      	ldr	r0, [r3, #4]
   d660e:	f7ff fbcd 	bl	d5dac <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6612:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6614:	2300      	movs	r3, #0
   d6616:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6618:	b128      	cbz	r0, d6626 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d661a:	f7ff ffcd 	bl	d65b8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d661e:	6820      	ldr	r0, [r4, #0]
   d6620:	b108      	cbz	r0, d6626 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6622:	f7ff ffc9 	bl	d65b8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6626:	4620      	mov	r0, r4
   d6628:	bd10      	pop	{r4, pc}

000d662a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d662a:	b538      	push	{r3, r4, r5, lr}
   d662c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d662e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6632:	b108      	cbz	r0, d6638 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6634:	f7fd fd35 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6638:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d663c:	b108      	cbz	r0, d6642 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d663e:	f7ff fbc5 	bl	d5dcc <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6642:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6646:	b135      	cbz	r5, d6656 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6648:	4628      	mov	r0, r5
   d664a:	f7ff ffd0 	bl	d65ee <_ZN6ThreadD1Ev>
   d664e:	2104      	movs	r1, #4
   d6650:	4628      	mov	r0, r5
   d6652:	f001 f84e 	bl	d76f2 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6656:	6820      	ldr	r0, [r4, #0]
   d6658:	b108      	cbz	r0, d665e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d665a:	f7ff ffc3 	bl	d65e4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d665e:	4620      	mov	r0, r4
   d6660:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6664 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6664:	b510      	push	{r4, lr}
   d6666:	4b04      	ldr	r3, [pc, #16]	; (d6678 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6668:	4604      	mov	r4, r0
   d666a:	f840 3b08 	str.w	r3, [r0], #8
   d666e:	f7ff ffdc 	bl	d662a <_ZN5spark11MeshPublishD1Ev>
   d6672:	4620      	mov	r0, r4
   d6674:	bd10      	pop	{r4, pc}
   d6676:	bf00      	nop
   d6678:	000d9ccc 	.word	0x000d9ccc

000d667c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d667c:	b538      	push	{r3, r4, r5, lr}
   d667e:	4c0e      	ldr	r4, [pc, #56]	; (d66b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6680:	4b0e      	ldr	r3, [pc, #56]	; (d66bc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6682:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6684:	2500      	movs	r5, #0
   d6686:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6688:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d668c:	6063      	str	r3, [r4, #4]
   d668e:	60a5      	str	r5, [r4, #8]
   d6690:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6694:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6698:	f7ff fb90 	bl	d5dbc <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d669c:	4b08      	ldr	r3, [pc, #32]	; (d66c0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d669e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d66a2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d66a6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d66a8:	4620      	mov	r0, r4
   d66aa:	4a06      	ldr	r2, [pc, #24]	; (d66c4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d66ac:	4906      	ldr	r1, [pc, #24]	; (d66c8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d66ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d66b2:	f001 b819 	b.w	d76e8 <__aeabi_atexit>
   d66b6:	bf00      	nop
   d66b8:	2003e3e4 	.word	0x2003e3e4
   d66bc:	000d9d00 	.word	0x000d9d00
   d66c0:	000d9ccc 	.word	0x000d9ccc
   d66c4:	2003e2d8 	.word	0x2003e2d8
   d66c8:	000d6665 	.word	0x000d6665

000d66cc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d66cc:	2300      	movs	r3, #0
   d66ce:	461a      	mov	r2, r3
   d66d0:	6840      	ldr	r0, [r0, #4]
   d66d2:	f7ff bd3f 	b.w	d6154 <network_connect>

000d66d6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d66d6:	2200      	movs	r2, #0
   d66d8:	2102      	movs	r1, #2
   d66da:	6840      	ldr	r0, [r0, #4]
   d66dc:	f7ff bd4a 	b.w	d6174 <network_disconnect>

000d66e0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d66e0:	2200      	movs	r2, #0
   d66e2:	4611      	mov	r1, r2
   d66e4:	6840      	ldr	r0, [r0, #4]
   d66e6:	f7ff bd3d 	b.w	d6164 <network_connecting>

000d66ea <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d66ea:	2200      	movs	r2, #0
   d66ec:	4611      	mov	r1, r2
   d66ee:	6840      	ldr	r0, [r0, #4]
   d66f0:	f7ff bd48 	b.w	d6184 <network_ready>

000d66f4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d66f4:	2300      	movs	r3, #0
   d66f6:	461a      	mov	r2, r3
   d66f8:	4619      	mov	r1, r3
   d66fa:	6840      	ldr	r0, [r0, #4]
   d66fc:	f7ff bd4a 	b.w	d6194 <network_on>

000d6700 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6700:	2300      	movs	r3, #0
   d6702:	461a      	mov	r2, r3
   d6704:	4619      	mov	r1, r3
   d6706:	6840      	ldr	r0, [r0, #4]
   d6708:	f7ff bd4c 	b.w	d61a4 <network_off>

000d670c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d670c:	2200      	movs	r2, #0
   d670e:	f081 0101 	eor.w	r1, r1, #1
   d6712:	6840      	ldr	r0, [r0, #4]
   d6714:	f7ff bd4e 	b.w	d61b4 <network_listen>

000d6718 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6718:	2200      	movs	r2, #0
   d671a:	6840      	ldr	r0, [r0, #4]
   d671c:	f7ff bd5a 	b.w	d61d4 <network_set_listen_timeout>

000d6720 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6720:	2200      	movs	r2, #0
   d6722:	4611      	mov	r1, r2
   d6724:	6840      	ldr	r0, [r0, #4]
   d6726:	f7ff bd5d 	b.w	d61e4 <network_get_listen_timeout>

000d672a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d672a:	2200      	movs	r2, #0
   d672c:	4611      	mov	r1, r2
   d672e:	6840      	ldr	r0, [r0, #4]
   d6730:	f7ff bd48 	b.w	d61c4 <network_listening>

000d6734 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6738:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d673a:	b095      	sub	sp, #84	; 0x54
   d673c:	4616      	mov	r6, r2
   d673e:	460d      	mov	r5, r1
   d6740:	4607      	mov	r7, r0
    IPAddress addr;
   d6742:	f7ff fea1 	bl	d6488 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6746:	4621      	mov	r1, r4
   d6748:	2220      	movs	r2, #32
   d674a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d674c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d674e:	f002 ff38 	bl	d95c2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6752:	2340      	movs	r3, #64	; 0x40
   d6754:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6756:	4621      	mov	r1, r4
   d6758:	466b      	mov	r3, sp
   d675a:	aa0c      	add	r2, sp, #48	; 0x30
   d675c:	4630      	mov	r0, r6
   d675e:	f7ff fbf5 	bl	d5f4c <netdb_getaddrinfo>
    if (!r) {
   d6762:	4604      	mov	r4, r0
   d6764:	2800      	cmp	r0, #0
   d6766:	d144      	bne.n	d67f2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6768:	4602      	mov	r2, r0
   d676a:	2101      	movs	r1, #1
   d676c:	6868      	ldr	r0, [r5, #4]
   d676e:	f7ff fd09 	bl	d6184 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6772:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6774:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6776:	4622      	mov	r2, r4
   d6778:	6868      	ldr	r0, [r5, #4]
   d677a:	f7ff fd03 	bl	d6184 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d677e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6780:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6782:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6784:	2e00      	cmp	r6, #0
   d6786:	d034      	beq.n	d67f2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6788:	2900      	cmp	r1, #0
   d678a:	d132      	bne.n	d67f2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d678c:	6873      	ldr	r3, [r6, #4]
   d678e:	2b02      	cmp	r3, #2
   d6790:	d002      	beq.n	d6798 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6792:	2b0a      	cmp	r3, #10
   d6794:	d009      	beq.n	d67aa <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6796:	e02a      	b.n	d67ee <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6798:	f1b8 0f00 	cmp.w	r8, #0
   d679c:	d027      	beq.n	d67ee <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d679e:	6971      	ldr	r1, [r6, #20]
   d67a0:	4638      	mov	r0, r7
   d67a2:	3104      	adds	r1, #4
   d67a4:	f7ff fec0 	bl	d6528 <_ZN9IPAddressaSEPKh>
   d67a8:	e020      	b.n	d67ec <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d67aa:	f1b9 0f00 	cmp.w	r9, #0
   d67ae:	d01e      	beq.n	d67ee <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d67b0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d67b2:	2211      	movs	r2, #17
   d67b4:	a801      	add	r0, sp, #4
   d67b6:	f002 ff04 	bl	d95c2 <memset>
                    a.v = 6;
   d67ba:	2306      	movs	r3, #6
   d67bc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d67c0:	ad01      	add	r5, sp, #4
   d67c2:	f104 0308 	add.w	r3, r4, #8
   d67c6:	3418      	adds	r4, #24
   d67c8:	6818      	ldr	r0, [r3, #0]
   d67ca:	6859      	ldr	r1, [r3, #4]
   d67cc:	462a      	mov	r2, r5
   d67ce:	c203      	stmia	r2!, {r0, r1}
   d67d0:	3308      	adds	r3, #8
   d67d2:	42a3      	cmp	r3, r4
   d67d4:	4615      	mov	r5, r2
   d67d6:	d1f7      	bne.n	d67c8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d67d8:	a901      	add	r1, sp, #4
   d67da:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d67dc:	ad07      	add	r5, sp, #28
   d67de:	f7ff fe61 	bl	d64a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d67e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d67e4:	1d3c      	adds	r4, r7, #4
   d67e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d67e8:	682b      	ldr	r3, [r5, #0]
   d67ea:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d67ec:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d67ee:	69f6      	ldr	r6, [r6, #28]
   d67f0:	e7c8      	b.n	d6784 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d67f2:	9800      	ldr	r0, [sp, #0]
   d67f4:	f7ff fba2 	bl	d5f3c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d67f8:	4638      	mov	r0, r7
   d67fa:	b015      	add	sp, #84	; 0x54
   d67fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6800 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6800:	4b02      	ldr	r3, [pc, #8]	; (d680c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6802:	4a03      	ldr	r2, [pc, #12]	; (d6810 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6804:	601a      	str	r2, [r3, #0]
   d6806:	2200      	movs	r2, #0
   d6808:	605a      	str	r2, [r3, #4]
   d680a:	4770      	bx	lr
   d680c:	2003e5b8 	.word	0x2003e5b8
   d6810:	000d9d00 	.word	0x000d9d00

000d6814 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6816:	4606      	mov	r6, r0
   d6818:	460d      	mov	r5, r1
   d681a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d681c:	2400      	movs	r4, #0
  while (size--) {
   d681e:	42bd      	cmp	r5, r7
   d6820:	d00c      	beq.n	d683c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6822:	6833      	ldr	r3, [r6, #0]
   d6824:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6828:	689b      	ldr	r3, [r3, #8]
   d682a:	4630      	mov	r0, r6
   d682c:	4798      	blx	r3
     if (chunk>=0)
   d682e:	2800      	cmp	r0, #0
   d6830:	db01      	blt.n	d6836 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6832:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6834:	e7f3      	b.n	d681e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6836:	2c00      	cmp	r4, #0
   d6838:	bf08      	it	eq
   d683a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d683c:	4620      	mov	r0, r4
   d683e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6840 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6840:	b570      	push	{r4, r5, r6, lr}
   d6842:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6844:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6846:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6848:	b149      	cbz	r1, d685e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d684a:	f002 ff37 	bl	d96bc <strlen>
   d684e:	682b      	ldr	r3, [r5, #0]
   d6850:	4602      	mov	r2, r0
   d6852:	4621      	mov	r1, r4
   d6854:	4628      	mov	r0, r5
   d6856:	68db      	ldr	r3, [r3, #12]
    }
   d6858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d685c:	4718      	bx	r3
    }
   d685e:	bd70      	pop	{r4, r5, r6, pc}

000d6860 <_ZN5Print5printEPKc>:
   d6860:	b508      	push	{r3, lr}
   d6862:	f7ff ffed 	bl	d6840 <_ZN5Print5writeEPKc>
   d6866:	bd08      	pop	{r3, pc}

000d6868 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6868:	6803      	ldr	r3, [r0, #0]
   d686a:	689b      	ldr	r3, [r3, #8]
   d686c:	4718      	bx	r3

000d686e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d686e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6870:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6872:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6874:	f7ff fff8 	bl	d6868 <_ZN5Print5printEc>
  n += print('\n');
   d6878:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d687a:	4604      	mov	r4, r0
  n += print('\n');
   d687c:	4628      	mov	r0, r5
   d687e:	f7ff fff3 	bl	d6868 <_ZN5Print5printEc>
  return n;
}
   d6882:	4420      	add	r0, r4
   d6884:	bd38      	pop	{r3, r4, r5, pc}

000d6886 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6886:	b538      	push	{r3, r4, r5, lr}
   d6888:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d688a:	f7ff ffd9 	bl	d6840 <_ZN5Print5writeEPKc>
   d688e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6890:	4628      	mov	r0, r5
   d6892:	f7ff ffec 	bl	d686e <_ZN5Print7printlnEv>
  return n;
}
   d6896:	4420      	add	r0, r4
   d6898:	bd38      	pop	{r3, r4, r5, pc}

000d689a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d689a:	b530      	push	{r4, r5, lr}
   d689c:	b08b      	sub	sp, #44	; 0x2c
   d689e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d68a0:	2100      	movs	r1, #0
   d68a2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d68a6:	2a01      	cmp	r2, #1
   d68a8:	bf98      	it	ls
   d68aa:	220a      	movls	r2, #10
   d68ac:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d68b0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d68b4:	fb05 3312 	mls	r3, r5, r2, r3
   d68b8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d68bc:	2b09      	cmp	r3, #9
   d68be:	bf94      	ite	ls
   d68c0:	3330      	addls	r3, #48	; 0x30
   d68c2:	3337      	addhi	r3, #55	; 0x37
   d68c4:	b2db      	uxtb	r3, r3
   d68c6:	4621      	mov	r1, r4
   d68c8:	f804 3901 	strb.w	r3, [r4], #-1
   d68cc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d68ce:	2d00      	cmp	r5, #0
   d68d0:	d1ee      	bne.n	d68b0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d68d2:	f7ff ffb5 	bl	d6840 <_ZN5Print5writeEPKc>
}
   d68d6:	b00b      	add	sp, #44	; 0x2c
   d68d8:	bd30      	pop	{r4, r5, pc}
	...

000d68dc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d68dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d68e0:	ec57 6b10 	vmov	r6, r7, d0
   d68e4:	4682      	mov	sl, r0
   d68e6:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d68e8:	ee10 2a10 	vmov	r2, s0
   d68ec:	463b      	mov	r3, r7
   d68ee:	ee10 0a10 	vmov	r0, s0
   d68f2:	4639      	mov	r1, r7
   d68f4:	f002 fdee 	bl	d94d4 <__aeabi_dcmpun>
   d68f8:	b108      	cbz	r0, d68fe <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d68fa:	494e      	ldr	r1, [pc, #312]	; (d6a34 <_ZN5Print10printFloatEdh+0x158>)
   d68fc:	e012      	b.n	d6924 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d68fe:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d6902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6906:	4b4c      	ldr	r3, [pc, #304]	; (d6a38 <_ZN5Print10printFloatEdh+0x15c>)
   d6908:	4630      	mov	r0, r6
   d690a:	4649      	mov	r1, r9
   d690c:	f002 fde2 	bl	d94d4 <__aeabi_dcmpun>
   d6910:	b968      	cbnz	r0, d692e <_ZN5Print10printFloatEdh+0x52>
   d6912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6916:	4b48      	ldr	r3, [pc, #288]	; (d6a38 <_ZN5Print10printFloatEdh+0x15c>)
   d6918:	4630      	mov	r0, r6
   d691a:	4649      	mov	r1, r9
   d691c:	f002 fdbc 	bl	d9498 <__aeabi_dcmple>
   d6920:	b928      	cbnz	r0, d692e <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6922:	4946      	ldr	r1, [pc, #280]	; (d6a3c <_ZN5Print10printFloatEdh+0x160>)
   d6924:	4650      	mov	r0, sl
   d6926:	f7ff ff8b 	bl	d6840 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d692a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d692e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6932:	4b43      	ldr	r3, [pc, #268]	; (d6a40 <_ZN5Print10printFloatEdh+0x164>)
   d6934:	4630      	mov	r0, r6
   d6936:	4639      	mov	r1, r7
   d6938:	f002 fdc2 	bl	d94c0 <__aeabi_dcmpgt>
   d693c:	b108      	cbz	r0, d6942 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d693e:	4941      	ldr	r1, [pc, #260]	; (d6a44 <_ZN5Print10printFloatEdh+0x168>)
   d6940:	e7f0      	b.n	d6924 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d6942:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6946:	4b40      	ldr	r3, [pc, #256]	; (d6a48 <_ZN5Print10printFloatEdh+0x16c>)
   d6948:	4630      	mov	r0, r6
   d694a:	4639      	mov	r1, r7
   d694c:	f002 fd9a 	bl	d9484 <__aeabi_dcmplt>
   d6950:	2800      	cmp	r0, #0
   d6952:	d1f4      	bne.n	d693e <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d6954:	2200      	movs	r2, #0
   d6956:	2300      	movs	r3, #0
   d6958:	4630      	mov	r0, r6
   d695a:	4639      	mov	r1, r7
   d695c:	f002 fd92 	bl	d9484 <__aeabi_dcmplt>
   d6960:	b140      	cbz	r0, d6974 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d6962:	212d      	movs	r1, #45	; 0x2d
   d6964:	4650      	mov	r0, sl
   d6966:	f7ff ff7f 	bl	d6868 <_ZN5Print5printEc>
     number = -number;
   d696a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d696e:	4604      	mov	r4, r0
     number = -number;
   d6970:	461f      	mov	r7, r3
   d6972:	e000      	b.n	d6976 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6974:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d6976:	4935      	ldr	r1, [pc, #212]	; (d6a4c <_ZN5Print10printFloatEdh+0x170>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d6978:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d697c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d697e:	fa5f f388 	uxtb.w	r3, r8
   d6982:	429d      	cmp	r5, r3
   d6984:	d906      	bls.n	d6994 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d6986:	2200      	movs	r2, #0
   d6988:	4b31      	ldr	r3, [pc, #196]	; (d6a50 <_ZN5Print10printFloatEdh+0x174>)
   d698a:	f002 fc33 	bl	d91f4 <__aeabi_ddiv>
   d698e:	f108 0801 	add.w	r8, r8, #1
   d6992:	e7f4      	b.n	d697e <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d6994:	4632      	mov	r2, r6
   d6996:	463b      	mov	r3, r7
   d6998:	f002 f950 	bl	d8c3c <__adddf3>
   d699c:	460f      	mov	r7, r1
   d699e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d69a0:	f002 fdd6 	bl	d9550 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d69a4:	220a      	movs	r2, #10
   d69a6:	4601      	mov	r1, r0
   d69a8:	4680      	mov	r8, r0
   d69aa:	4650      	mov	r0, sl
   d69ac:	f7ff ff75 	bl	d689a <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
   d69b0:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d69b2:	b3e5      	cbz	r5, d6a2e <_ZN5Print10printFloatEdh+0x152>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d69b4:	4640      	mov	r0, r8
   d69b6:	f002 fa7d 	bl	d8eb4 <__aeabi_ui2d>
   d69ba:	4602      	mov	r2, r0
   d69bc:	460b      	mov	r3, r1
   d69be:	4630      	mov	r0, r6
   d69c0:	4639      	mov	r1, r7
   d69c2:	f002 f939 	bl	d8c38 <__aeabi_dsub>
   d69c6:	4606      	mov	r6, r0
   d69c8:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d69ca:	4650      	mov	r0, sl
   d69cc:	4921      	ldr	r1, [pc, #132]	; (d6a54 <_ZN5Print10printFloatEdh+0x178>)
   d69ce:	f7ff ff37 	bl	d6840 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d69d2:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d69d4:	2200      	movs	r2, #0
   d69d6:	4b1e      	ldr	r3, [pc, #120]	; (d6a50 <_ZN5Print10printFloatEdh+0x174>)
   d69d8:	4630      	mov	r0, r6
   d69da:	4639      	mov	r1, r7
   d69dc:	f002 fae0 	bl	d8fa0 <__aeabi_dmul>
   d69e0:	4606      	mov	r6, r0
   d69e2:	460f      	mov	r7, r1
    int toPrint = int(remainder);
   d69e4:	f002 fd8c 	bl	d9500 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d69e8:	f1b0 0900 	subs.w	r9, r0, #0
   d69ec:	da07      	bge.n	d69fe <_ZN5Print10printFloatEdh+0x122>
            t = print('-');
   d69ee:	212d      	movs	r1, #45	; 0x2d
   d69f0:	4650      	mov	r0, sl
   d69f2:	f7ff ff39 	bl	d6868 <_ZN5Print5printEc>
            val = -n;
   d69f6:	f1c9 0100 	rsb	r1, r9, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d69fa:	4680      	mov	r8, r0
   d69fc:	e002      	b.n	d6a04 <_ZN5Print10printFloatEdh+0x128>
            val = -n;
        } else {
            val = n;
   d69fe:	4649      	mov	r1, r9
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d6a00:	f04f 0800 	mov.w	r8, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6a04:	220a      	movs	r2, #10
   d6a06:	4650      	mov	r0, sl
   d6a08:	f7ff ff47 	bl	d689a <_ZN5Print11printNumberEmh>
    n += print(toPrint);
   d6a0c:	4440      	add	r0, r8
   d6a0e:	4404      	add	r4, r0
    remainder -= toPrint;
   d6a10:	4648      	mov	r0, r9
   d6a12:	f002 fa5f 	bl	d8ed4 <__aeabi_i2d>
   d6a16:	4602      	mov	r2, r0
   d6a18:	460b      	mov	r3, r1
   d6a1a:	4630      	mov	r0, r6
   d6a1c:	4639      	mov	r1, r7
   d6a1e:	f002 f90b 	bl	d8c38 <__aeabi_dsub>
   d6a22:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6a24:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d6a28:	4606      	mov	r6, r0
   d6a2a:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6a2c:	d1d2      	bne.n	d69d4 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6a2e:	4620      	mov	r0, r4
   d6a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6a34:	000d9d2c 	.word	0x000d9d2c
   d6a38:	7fefffff 	.word	0x7fefffff
   d6a3c:	000d9d36 	.word	0x000d9d36
   d6a40:	41efffff 	.word	0x41efffff
   d6a44:	000d9d30 	.word	0x000d9d30
   d6a48:	c1efffff 	.word	0xc1efffff
   d6a4c:	3fe00000 	.word	0x3fe00000
   d6a50:	40240000 	.word	0x40240000
   d6a54:	000d9d34 	.word	0x000d9d34

000d6a58 <_ZN5Print5printEdi>:
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d6a58:	b2c9      	uxtb	r1, r1
   d6a5a:	f7ff bf3f 	b.w	d68dc <_ZN5Print10printFloatEdh>

000d6a5e <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d6a5e:	b538      	push	{r3, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d6a60:	b2c9      	uxtb	r1, r1
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
   d6a62:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d6a64:	f7ff ff3a 	bl	d68dc <_ZN5Print10printFloatEdh>
   d6a68:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d6a6a:	4628      	mov	r0, r5
   d6a6c:	f7ff feff 	bl	d686e <_ZN5Print7printlnEv>
  return n;
}
   d6a70:	4420      	add	r0, r4
   d6a72:	bd38      	pop	{r3, r4, r5, pc}

000d6a74 <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d6a74:	b538      	push	{r3, r4, r5, lr}
   d6a76:	4604      	mov	r4, r0
    return println((double)num, digits);
   d6a78:	ee10 0a10 	vmov	r0, s0
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
   d6a7c:	460d      	mov	r5, r1
    return println((double)num, digits);
   d6a7e:	f002 fa3b 	bl	d8ef8 <__aeabi_f2d>
   d6a82:	ec41 0b10 	vmov	d0, r0, r1
   d6a86:	4629      	mov	r1, r5
   d6a88:	4620      	mov	r0, r4
}
   d6a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return n;
}

size_t Print::println(float num, int digits)
{
    return println((double)num, digits);
   d6a8e:	f7ff bfe6 	b.w	d6a5e <_ZN5Print7printlnEdi>

000d6a92 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d6a92:	b510      	push	{r4, lr}
  if (0 == max) {
   d6a94:	4604      	mov	r4, r0
   d6a96:	b130      	cbz	r0, d6aa6 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d6a98:	f002 fdc4 	bl	d9624 <rand>
   d6a9c:	fb90 f3f4 	sdiv	r3, r0, r4
   d6aa0:	fb03 0014 	mls	r0, r3, r4, r0
   d6aa4:	bd10      	pop	{r4, pc}
}
   d6aa6:	bd10      	pop	{r4, pc}

000d6aa8 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d6aa8:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
   d6aaa:	b510      	push	{r4, lr}
   d6aac:	4604      	mov	r4, r0
  if (min >= max) {
   d6aae:	da04      	bge.n	d6aba <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
   d6ab0:	1a08      	subs	r0, r1, r0
   d6ab2:	f7ff ffee 	bl	d6a92 <_Z6randomi>
   d6ab6:	4420      	add	r0, r4
   d6ab8:	bd10      	pop	{r4, pc}
}
   d6aba:	bd10      	pop	{r4, pc}

000d6abc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6abc:	b510      	push	{r4, lr}
   d6abe:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6ac0:	f7ff fbe0 	bl	d6284 <_ZNSt14_Function_baseD1Ev>
   d6ac4:	4620      	mov	r0, r4
   d6ac6:	bd10      	pop	{r4, pc}

000d6ac8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6ac8:	4803      	ldr	r0, [pc, #12]	; (d6ad8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6aca:	4a04      	ldr	r2, [pc, #16]	; (d6adc <_GLOBAL__sub_I_RGB+0x14>)
   d6acc:	4904      	ldr	r1, [pc, #16]	; (d6ae0 <_GLOBAL__sub_I_RGB+0x18>)
   d6ace:	2300      	movs	r3, #0
   d6ad0:	6083      	str	r3, [r0, #8]
   d6ad2:	f000 be09 	b.w	d76e8 <__aeabi_atexit>
   d6ad6:	bf00      	nop
   d6ad8:	2003e5c0 	.word	0x2003e5c0
   d6adc:	2003e2d8 	.word	0x2003e2d8
   d6ae0:	000d6abd 	.word	0x000d6abd

000d6ae4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6ae4:	b510      	push	{r4, lr}
   d6ae6:	4604      	mov	r4, r0
{
    _spi = spi;
   d6ae8:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d6aea:	4608      	mov	r0, r1
   d6aec:	f7ff fa66 	bl	d5fbc <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6af0:	2300      	movs	r3, #0
   d6af2:	6063      	str	r3, [r4, #4]
}
   d6af4:	4620      	mov	r0, r4
   d6af6:	bd10      	pop	{r4, pc}

000d6af8 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6af8:	7800      	ldrb	r0, [r0, #0]
   d6afa:	f7ff ba67 	b.w	d5fcc <HAL_SPI_Is_Enabled>

000d6afe <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6afe:	b510      	push	{r4, lr}
   d6b00:	4604      	mov	r4, r0
{
	free(buffer);
   d6b02:	6800      	ldr	r0, [r0, #0]
   d6b04:	f7ff fb7e 	bl	d6204 <free>
}
   d6b08:	4620      	mov	r0, r4
   d6b0a:	bd10      	pop	{r4, pc}

000d6b0c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6b0c:	b510      	push	{r4, lr}
   d6b0e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6b10:	6800      	ldr	r0, [r0, #0]
   d6b12:	b108      	cbz	r0, d6b18 <_ZN6String10invalidateEv+0xc>
   d6b14:	f7ff fb76 	bl	d6204 <free>
	buffer = NULL;
   d6b18:	2300      	movs	r3, #0
   d6b1a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6b1c:	60a3      	str	r3, [r4, #8]
   d6b1e:	6063      	str	r3, [r4, #4]
   d6b20:	bd10      	pop	{r4, pc}

000d6b22 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6b22:	b538      	push	{r3, r4, r5, lr}
   d6b24:	4604      	mov	r4, r0
   d6b26:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6b28:	6800      	ldr	r0, [r0, #0]
   d6b2a:	3101      	adds	r1, #1
   d6b2c:	f7ff fb72 	bl	d6214 <realloc>
	if (newbuffer) {
   d6b30:	b110      	cbz	r0, d6b38 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6b32:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6b36:	2001      	movs	r0, #1
	}
	return 0;
}
   d6b38:	bd38      	pop	{r3, r4, r5, pc}

000d6b3a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6b3a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6b3c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6b3e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6b40:	b113      	cbz	r3, d6b48 <_ZN6String7reserveEj+0xe>
   d6b42:	6843      	ldr	r3, [r0, #4]
   d6b44:	428b      	cmp	r3, r1
   d6b46:	d207      	bcs.n	d6b58 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6b48:	4620      	mov	r0, r4
   d6b4a:	f7ff ffea 	bl	d6b22 <_ZN6String12changeBufferEj>
   d6b4e:	b120      	cbz	r0, d6b5a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6b50:	68a3      	ldr	r3, [r4, #8]
   d6b52:	b90b      	cbnz	r3, d6b58 <_ZN6String7reserveEj+0x1e>
   d6b54:	6822      	ldr	r2, [r4, #0]
   d6b56:	7013      	strb	r3, [r2, #0]
   d6b58:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6b5a:	bd10      	pop	{r4, pc}

000d6b5c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6b5c:	b570      	push	{r4, r5, r6, lr}
   d6b5e:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6b60:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6b62:	4604      	mov	r4, r0
   d6b64:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6b66:	f7ff ffe8 	bl	d6b3a <_ZN6String7reserveEj>
   d6b6a:	b918      	cbnz	r0, d6b74 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6b6c:	4620      	mov	r0, r4
   d6b6e:	f7ff ffcd 	bl	d6b0c <_ZN6String10invalidateEv>
		return *this;
   d6b72:	e009      	b.n	d6b88 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6b74:	462a      	mov	r2, r5
   d6b76:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6b78:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6b7a:	6820      	ldr	r0, [r4, #0]
   d6b7c:	f002 fd16 	bl	d95ac <memcpy>
	buffer[len] = 0;
   d6b80:	6822      	ldr	r2, [r4, #0]
   d6b82:	68a3      	ldr	r3, [r4, #8]
   d6b84:	2100      	movs	r1, #0
   d6b86:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6b88:	4620      	mov	r0, r4
   d6b8a:	bd70      	pop	{r4, r5, r6, pc}

000d6b8c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6b8c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6b8e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6b90:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6b92:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6b94:	6043      	str	r3, [r0, #4]
	len = 0;
   d6b96:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6b98:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6b9a:	460d      	mov	r5, r1
   d6b9c:	b139      	cbz	r1, d6bae <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6b9e:	4608      	mov	r0, r1
   d6ba0:	f002 fd8c 	bl	d96bc <strlen>
   d6ba4:	4629      	mov	r1, r5
   d6ba6:	4602      	mov	r2, r0
   d6ba8:	4620      	mov	r0, r4
   d6baa:	f7ff ffd7 	bl	d6b5c <_ZN6String4copyEPKcj>
}
   d6bae:	4620      	mov	r0, r4
   d6bb0:	bd38      	pop	{r3, r4, r5, pc}

000d6bb2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6bb2:	b538      	push	{r3, r4, r5, lr}
   d6bb4:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6bb6:	460c      	mov	r4, r1
   d6bb8:	b141      	cbz	r1, d6bcc <_ZN6StringaSEPKc+0x1a>
   d6bba:	4608      	mov	r0, r1
   d6bbc:	f002 fd7e 	bl	d96bc <strlen>
   d6bc0:	4621      	mov	r1, r4
   d6bc2:	4602      	mov	r2, r0
   d6bc4:	4628      	mov	r0, r5
   d6bc6:	f7ff ffc9 	bl	d6b5c <_ZN6String4copyEPKcj>
   d6bca:	e001      	b.n	d6bd0 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d6bcc:	f7ff ff9e 	bl	d6b0c <_ZN6String10invalidateEv>

	return *this;
}
   d6bd0:	4628      	mov	r0, r5
   d6bd2:	bd38      	pop	{r3, r4, r5, pc}

000d6bd4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6bd4:	b570      	push	{r4, r5, r6, lr}
   d6bd6:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6bd8:	460e      	mov	r6, r1
   d6bda:	b909      	cbnz	r1, d6be0 <_ZN6String6concatEPKcj+0xc>
   d6bdc:	2000      	movs	r0, #0
   d6bde:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6be0:	b16a      	cbz	r2, d6bfe <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d6be2:	6883      	ldr	r3, [r0, #8]
   d6be4:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d6be6:	4629      	mov	r1, r5
   d6be8:	f7ff ffa7 	bl	d6b3a <_ZN6String7reserveEj>
   d6bec:	2800      	cmp	r0, #0
   d6bee:	d0f5      	beq.n	d6bdc <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6bf0:	6820      	ldr	r0, [r4, #0]
   d6bf2:	68a3      	ldr	r3, [r4, #8]
   d6bf4:	4631      	mov	r1, r6
   d6bf6:	4418      	add	r0, r3
   d6bf8:	f002 fd58 	bl	d96ac <strcpy>
	len = newlen;
   d6bfc:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d6bfe:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d6c00:	bd70      	pop	{r4, r5, r6, pc}

000d6c02 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d6c02:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d6c04:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d6c06:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d6c0a:	2201      	movs	r2, #1
   d6c0c:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d6c0e:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d6c12:	f7ff ffdf 	bl	d6bd4 <_ZN6String6concatEPKcj>
}
   d6c16:	b003      	add	sp, #12
   d6c18:	f85d fb04 	ldr.w	pc, [sp], #4

000d6c1c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6c1c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6c1e:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6c20:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6c22:	b912      	cbnz	r2, d6c2a <_ZNK6String6equalsEPKc+0xe>
   d6c24:	b919      	cbnz	r1, d6c2e <_ZNK6String6equalsEPKc+0x12>
   d6c26:	2001      	movs	r0, #1
   d6c28:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6c2a:	b911      	cbnz	r1, d6c32 <_ZNK6String6equalsEPKc+0x16>
   d6c2c:	6803      	ldr	r3, [r0, #0]
   d6c2e:	7818      	ldrb	r0, [r3, #0]
   d6c30:	e002      	b.n	d6c38 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d6c32:	6800      	ldr	r0, [r0, #0]
   d6c34:	f002 fd30 	bl	d9698 <strcmp>
   d6c38:	fab0 f080 	clz	r0, r0
   d6c3c:	0940      	lsrs	r0, r0, #5
}
   d6c3e:	bd08      	pop	{r3, pc}

000d6c40 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6c40:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6c42:	4c09      	ldr	r4, [pc, #36]	; (d6c68 <_GLOBAL__sub_I_System+0x28>)
   d6c44:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6c46:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6c4a:	6020      	str	r0, [r4, #0]
   d6c4c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6c4e:	71a0      	strb	r0, [r4, #6]
   d6c50:	8120      	strh	r0, [r4, #8]
   d6c52:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6c54:	f7ff fa42 	bl	d60dc <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6c58:	4620      	mov	r0, r4
   d6c5a:	4a04      	ldr	r2, [pc, #16]	; (d6c6c <_GLOBAL__sub_I_System+0x2c>)
   d6c5c:	4904      	ldr	r1, [pc, #16]	; (d6c70 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6c62:	f000 bd41 	b.w	d76e8 <__aeabi_atexit>
   d6c66:	bf00      	nop
   d6c68:	2003e5d0 	.word	0x2003e5d0
   d6c6c:	2003e2d8 	.word	0x2003e2d8
   d6c70:	000d40d9 	.word	0x000d40d9

000d6c74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6c74:	4b02      	ldr	r3, [pc, #8]	; (d6c80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6c76:	681a      	ldr	r2, [r3, #0]
   d6c78:	4b02      	ldr	r3, [pc, #8]	; (d6c84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6c7a:	601a      	str	r2, [r3, #0]
   d6c7c:	4770      	bx	lr
   d6c7e:	bf00      	nop
   d6c80:	2003e268 	.word	0x2003e268
   d6c84:	2003e5dc 	.word	0x2003e5dc

000d6c88 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d6c88:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d6c8a:	6804      	ldr	r4, [r0, #0]
   d6c8c:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d6c8e:	46a4      	mov	ip, r4
    }
   d6c90:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d6c94:	4760      	bx	ip

000d6c96 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d6c96:	6803      	ldr	r3, [r0, #0]
   d6c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6c9a:	4718      	bx	r3

000d6c9c <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d6c9c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d6c9e:	4770      	bx	lr

000d6ca0 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d6ca0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d6ca2:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d6ca4:	1a10      	subs	r0, r2, r0
   d6ca6:	4770      	bx	lr

000d6ca8 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d6ca8:	b513      	push	{r0, r1, r4, lr}
   d6caa:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d6cac:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d6cae:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d6cb2:	68d4      	ldr	r4, [r2, #12]
   d6cb4:	4619      	mov	r1, r3
   d6cb6:	2201      	movs	r2, #1
   d6cb8:	47a0      	blx	r4
}
   d6cba:	b002      	add	sp, #8
   d6cbc:	bd10      	pop	{r4, pc}

000d6cbe <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d6cbe:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d6cc0:	6803      	ldr	r3, [r0, #0]
   d6cc2:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d6cc4:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d6cc6:	4798      	blx	r3
   d6cc8:	b128      	cbz	r0, d6cd6 <_ZN3UDP4readEv+0x18>
   d6cca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6ccc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d6cce:	1c59      	adds	r1, r3, #1
   d6cd0:	86e1      	strh	r1, [r4, #54]	; 0x36
   d6cd2:	5cd0      	ldrb	r0, [r2, r3]
   d6cd4:	bd10      	pop	{r4, pc}
   d6cd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d6cda:	bd10      	pop	{r4, pc}

000d6cdc <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d6cdc:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d6cde:	6803      	ldr	r3, [r0, #0]
   d6ce0:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d6ce2:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d6ce4:	4798      	blx	r3
   d6ce6:	b118      	cbz	r0, d6cf0 <_ZN3UDP4peekEv+0x14>
   d6ce8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6cea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d6cec:	5cd0      	ldrb	r0, [r2, r3]
   d6cee:	bd10      	pop	{r4, pc}
   d6cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d6cf4:	bd10      	pop	{r4, pc}

000d6cf6 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d6cf6:	4770      	bx	lr

000d6cf8 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d6cf8:	b410      	push	{r4}
   d6cfa:	4603      	mov	r3, r0
   d6cfc:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d6cfe:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d6d00:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d6d02:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d6d04:	6803      	ldr	r3, [r0, #0]
   d6d06:	1a52      	subs	r2, r2, r1
   d6d08:	68db      	ldr	r3, [r3, #12]
   d6d0a:	4421      	add	r1, r4
}
   d6d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d6d10:	4718      	bx	r3

000d6d12 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d6d12:	f1a0 0010 	sub.w	r0, r0, #16
   d6d16:	f7ff bfef 	b.w	d6cf8 <_ZNK3UDP7printToER5Print>

000d6d1a <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d6d1a:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d6d1c:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d6d1e:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d6d20:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d6d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d6d24:	4604      	mov	r4, r0
   d6d26:	460f      	mov	r7, r1
   d6d28:	4615      	mov	r5, r2
    stop();
   d6d2a:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d6d2c:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d6d2e:	4632      	mov	r2, r6
   d6d30:	2100      	movs	r1, #0
   d6d32:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d6d34:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d6d36:	f002 fc44 	bl	d95c2 <memset>
    saddr.sin6_len = sizeof(saddr);
   d6d3a:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d6d3e:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d6d40:	260a      	movs	r6, #10
   d6d42:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d6d46:	f7ff f8f1 	bl	d5f2c <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d6d4a:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d6d4c:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d6d50:	2102      	movs	r1, #2
   d6d52:	4630      	mov	r0, r6
   d6d54:	f7ff f92a 	bl	d5fac <sock_socket>

    if (_sock < 0) {
   d6d58:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d6d5a:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d6d5c:	db24      	blt.n	d6da8 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d6d5e:	2204      	movs	r2, #4
   d6d60:	9200      	str	r2, [sp, #0]
   d6d62:	ab02      	add	r3, sp, #8
   d6d64:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6d68:	f7ff f900 	bl	d5f6c <sock_setsockopt>
   d6d6c:	b9e0      	cbnz	r0, d6da8 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d6d6e:	b195      	cbz	r5, d6d96 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d6d70:	9003      	str	r0, [sp, #12]
   d6d72:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d6d76:	a903      	add	r1, sp, #12
   d6d78:	b2e8      	uxtb	r0, r5
   d6d7a:	f7ff f8b7 	bl	d5eec <if_index_to_name>
   d6d7e:	b998      	cbnz	r0, d6da8 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d6d80:	2306      	movs	r3, #6
   d6d82:	9300      	str	r3, [sp, #0]
   d6d84:	f241 020b 	movw	r2, #4107	; 0x100b
   d6d88:	ab03      	add	r3, sp, #12
   d6d8a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6d8e:	6960      	ldr	r0, [r4, #20]
   d6d90:	f7ff f8ec 	bl	d5f6c <sock_setsockopt>
   d6d94:	b940      	cbnz	r0, d6da8 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d6d96:	221c      	movs	r2, #28
   d6d98:	a905      	add	r1, sp, #20
   d6d9a:	6960      	ldr	r0, [r4, #20]
   d6d9c:	f7ff f8de 	bl	d5f5c <sock_bind>
   d6da0:	b910      	cbnz	r0, d6da8 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d6da2:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d6da4:	2001      	movs	r0, #1
   d6da6:	e004      	b.n	d6db2 <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d6da8:	6823      	ldr	r3, [r4, #0]
   d6daa:	4620      	mov	r0, r4
   d6dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6dae:	4798      	blx	r3
   d6db0:	2000      	movs	r0, #0
    }
    return bound;
}
   d6db2:	b00d      	add	sp, #52	; 0x34
   d6db4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6db6 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d6db6:	b510      	push	{r4, lr}
   d6db8:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d6dba:	6940      	ldr	r0, [r0, #20]
   d6dbc:	2800      	cmp	r0, #0
   d6dbe:	db01      	blt.n	d6dc4 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d6dc0:	f7ff f8dc 	bl	d5f7c <sock_close>
    }

    _sock = -1;
   d6dc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6dc8:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6dca:	2300      	movs	r3, #0
   d6dcc:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d6dce:	8723      	strh	r3, [r4, #56]	; 0x38
   d6dd0:	bd10      	pop	{r4, pc}

000d6dd2 <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d6dd2:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d6dd4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d6dd6:	4605      	mov	r5, r0
   d6dd8:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d6dda:	b113      	cbz	r3, d6de2 <_ZN3UDP5writeEPKhj+0x10>
   d6ddc:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d6dde:	1a24      	subs	r4, r4, r0
   d6de0:	e000      	b.n	d6de4 <_ZN3UDP5writeEPKhj+0x12>
   d6de2:	461c      	mov	r4, r3
   d6de4:	4294      	cmp	r4, r2
   d6de6:	bf28      	it	cs
   d6de8:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d6dea:	4622      	mov	r2, r4
   d6dec:	4418      	add	r0, r3
   d6dee:	f002 fbdd 	bl	d95ac <memcpy>
    _offset += size;
   d6df2:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d6df4:	4423      	add	r3, r4
   d6df6:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d6df8:	4620      	mov	r0, r4
   d6dfa:	bd38      	pop	{r3, r4, r5, pc}

000d6dfc <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d6dfc:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d6dfe:	6803      	ldr	r3, [r0, #0]
   d6e00:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d6e02:	4604      	mov	r4, r0
   d6e04:	460e      	mov	r6, r1
   d6e06:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d6e08:	4798      	blx	r3
   d6e0a:	b188      	cbz	r0, d6e30 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d6e0c:	6823      	ldr	r3, [r4, #0]
   d6e0e:	4620      	mov	r0, r4
   d6e10:	691b      	ldr	r3, [r3, #16]
   d6e12:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d6e14:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6e16:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6e18:	4285      	cmp	r5, r0
   d6e1a:	bfa8      	it	ge
   d6e1c:	4605      	movge	r5, r0
   d6e1e:	4419      	add	r1, r3
   d6e20:	462a      	mov	r2, r5
   d6e22:	4630      	mov	r0, r6
   d6e24:	f002 fbc2 	bl	d95ac <memcpy>
        _offset += read;
   d6e28:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d6e2a:	442b      	add	r3, r5
   d6e2c:	86e3      	strh	r3, [r4, #54]	; 0x36
   d6e2e:	e001      	b.n	d6e34 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d6e30:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d6e34:	4628      	mov	r0, r5
   d6e36:	bd70      	pop	{r4, r5, r6, pc}

000d6e38 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d6e38:	b570      	push	{r4, r5, r6, lr}
   d6e3a:	4604      	mov	r4, r0
   d6e3c:	4b05      	ldr	r3, [pc, #20]	; (d6e54 <_ZN3UDP8remoteIPEv+0x1c>)
   d6e3e:	f844 3b04 	str.w	r3, [r4], #4
   d6e42:	f101 0520 	add.w	r5, r1, #32
   d6e46:	4606      	mov	r6, r0
   d6e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6e4c:	682b      	ldr	r3, [r5, #0]
   d6e4e:	7023      	strb	r3, [r4, #0]
   d6e50:	4630      	mov	r0, r6
   d6e52:	bd70      	pop	{r4, r5, r6, pc}
   d6e54:	000d9be0 	.word	0x000d9be0

000d6e58 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6e58:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6e5a:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6e5c:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6e5e:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6e60:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d6e62:	4a0a      	ldr	r2, [pc, #40]	; (d6e8c <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d6e64:	9202      	str	r2, [sp, #8]
   d6e66:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6e68:	468e      	mov	lr, r1
   d6e6a:	4606      	mov	r6, r0
   d6e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6e6e:	ac03      	add	r4, sp, #12
   d6e70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6e72:	682b      	ldr	r3, [r5, #0]
   d6e74:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6e76:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d6e7a:	9300      	str	r3, [sp, #0]
   d6e7c:	4662      	mov	r2, ip
   d6e7e:	ab02      	add	r3, sp, #8
   d6e80:	4671      	mov	r1, lr
   d6e82:	4630      	mov	r0, r6
   d6e84:	47b8      	blx	r7
    }
   d6e86:	b009      	add	sp, #36	; 0x24
   d6e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6e8a:	bf00      	nop
   d6e8c:	000d9be0 	.word	0x000d9be0

000d6e90 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d6e90:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6e92:	6803      	ldr	r3, [r0, #0]
   d6e94:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d6e98:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d6e9a:	4b0d      	ldr	r3, [pc, #52]	; (d6ed0 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d6e9c:	b089      	sub	sp, #36	; 0x24
   d6e9e:	f100 0620 	add.w	r6, r0, #32
   d6ea2:	4604      	mov	r4, r0
   d6ea4:	9302      	str	r3, [sp, #8]
   d6ea6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6ea8:	ad03      	add	r5, sp, #12
   d6eaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6eac:	6833      	ldr	r3, [r6, #0]
   d6eae:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6eb0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d6eb2:	9300      	str	r3, [sp, #0]
   d6eb4:	4672      	mov	r2, lr
   d6eb6:	ab02      	add	r3, sp, #8
   d6eb8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6eba:	4620      	mov	r0, r4
   d6ebc:	47b8      	blx	r7
    flush(); // wait for send to complete
   d6ebe:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6ec0:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d6ec2:	69db      	ldr	r3, [r3, #28]
   d6ec4:	4620      	mov	r0, r4
   d6ec6:	4798      	blx	r3
    return result;
}
   d6ec8:	4628      	mov	r0, r5
   d6eca:	b009      	add	sp, #36	; 0x24
   d6ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6ece:	bf00      	nop
   d6ed0:	000d9be0 	.word	0x000d9be0

000d6ed4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d6ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d6ed6:	7843      	ldrb	r3, [r0, #1]
   d6ed8:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d6eda:	b08d      	sub	sp, #52	; 0x34
   d6edc:	4605      	mov	r5, r0
   d6ede:	460c      	mov	r4, r1
   d6ee0:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d6ee2:	d101      	bne.n	d6ee8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6ee4:	1d01      	adds	r1, r0, #4
   d6ee6:	e033      	b.n	d6f50 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d6ee8:	2b0a      	cmp	r3, #10
   d6eea:	d135      	bne.n	d6f58 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d6eec:	2211      	movs	r2, #17
   d6eee:	2100      	movs	r1, #0
   d6ef0:	a801      	add	r0, sp, #4
   d6ef2:	f002 fb66 	bl	d95c2 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6ef6:	68ab      	ldr	r3, [r5, #8]
   d6ef8:	b943      	cbnz	r3, d6f0c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d6efa:	68eb      	ldr	r3, [r5, #12]
   d6efc:	b933      	cbnz	r3, d6f0c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d6efe:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6f02:	692e      	ldr	r6, [r5, #16]
   d6f04:	f7ff f802 	bl	d5f0c <inet_htonl>
   d6f08:	4286      	cmp	r6, r0
   d6f0a:	d01f      	beq.n	d6f4c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6f0c:	f105 0308 	add.w	r3, r5, #8
   d6f10:	ae01      	add	r6, sp, #4
   d6f12:	f105 0e18 	add.w	lr, r5, #24
   d6f16:	6818      	ldr	r0, [r3, #0]
   d6f18:	6859      	ldr	r1, [r3, #4]
   d6f1a:	4632      	mov	r2, r6
   d6f1c:	c203      	stmia	r2!, {r0, r1}
   d6f1e:	3308      	adds	r3, #8
   d6f20:	4573      	cmp	r3, lr
   d6f22:	4616      	mov	r6, r2
   d6f24:	d1f7      	bne.n	d6f16 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d6f26:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6f28:	a901      	add	r1, sp, #4
   d6f2a:	a806      	add	r0, sp, #24
   d6f2c:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d6f2e:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6f32:	f7ff fab7 	bl	d64a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6f36:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6f38:	3404      	adds	r4, #4
   d6f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6f3c:	6833      	ldr	r3, [r6, #0]
   d6f3e:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d6f40:	b157      	cbz	r7, d6f58 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d6f42:	8868      	ldrh	r0, [r5, #2]
   d6f44:	f7fe ffea 	bl	d5f1c <inet_ntohs>
   d6f48:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d6f4a:	e005      	b.n	d6f58 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6f4c:	f105 0114 	add.w	r1, r5, #20
   d6f50:	4620      	mov	r0, r4
   d6f52:	f7ff fae9 	bl	d6528 <_ZN9IPAddressaSEPKh>
   d6f56:	e7f3      	b.n	d6f40 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d6f58:	b00d      	add	sp, #52	; 0x34
   d6f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6f5c <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d6f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6f60:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d6f62:	ab0e      	add	r3, sp, #56	; 0x38
   d6f64:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d6f66:	4606      	mov	r6, r0
   d6f68:	4617      	mov	r7, r2
   d6f6a:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d6f6c:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d6f70:	462a      	mov	r2, r5
   d6f72:	4629      	mov	r1, r5
   d6f74:	f7fe ffea 	bl	d5f4c <netdb_getaddrinfo>
   d6f78:	2800      	cmp	r0, #0
   d6f7a:	db1f      	blt.n	d6fbc <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6f7c:	9b01      	ldr	r3, [sp, #4]
   d6f7e:	b1fb      	cbz	r3, d6fc0 <_ZN3UDP11beginPacketEPKct+0x64>
   d6f80:	695b      	ldr	r3, [r3, #20]
   d6f82:	b1eb      	cbz	r3, d6fc0 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d6f84:	a802      	add	r0, sp, #8
   d6f86:	f7ff fa7f 	bl	d6488 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6f8a:	9b01      	ldr	r3, [sp, #4]
   d6f8c:	462a      	mov	r2, r5
   d6f8e:	6958      	ldr	r0, [r3, #20]
   d6f90:	a902      	add	r1, sp, #8
   d6f92:	f7ff ff9f 	bl	d6ed4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6f96:	a802      	add	r0, sp, #8
   d6f98:	f7ff fa96 	bl	d64c8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6f9c:	b180      	cbz	r0, d6fc0 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d6f9e:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6fa0:	ad03      	add	r5, sp, #12
   d6fa2:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d6fa6:	4b0b      	ldr	r3, [pc, #44]	; (d6fd4 <_ZN3UDP11beginPacketEPKct+0x78>)
   d6fa8:	9308      	str	r3, [sp, #32]
   d6faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6fac:	ac09      	add	r4, sp, #36	; 0x24
   d6fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6fb0:	682b      	ldr	r3, [r5, #0]
   d6fb2:	7023      	strb	r3, [r4, #0]
   d6fb4:	463a      	mov	r2, r7
   d6fb6:	a908      	add	r1, sp, #32
   d6fb8:	4630      	mov	r0, r6
   d6fba:	47c0      	blx	r8
   d6fbc:	4604      	mov	r4, r0
   d6fbe:	e001      	b.n	d6fc4 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d6fc0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d6fc4:	9801      	ldr	r0, [sp, #4]
   d6fc6:	f7fe ffb9 	bl	d5f3c <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d6fca:	4620      	mov	r0, r4
   d6fcc:	b00e      	add	sp, #56	; 0x38
   d6fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6fd2:	bf00      	nop
   d6fd4:	000d9be0 	.word	0x000d9be0

000d6fd8 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d6fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d6fdc:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d6fe0:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d6fe4:	b08c      	sub	sp, #48	; 0x30
   d6fe6:	4605      	mov	r5, r0
   d6fe8:	460c      	mov	r4, r1
   d6fea:	4617      	mov	r7, r2
   d6fec:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d6fee:	db00      	blt.n	d6ff2 <_ZN3UDP13receivePacketEPhjm+0x1a>
   d6ff0:	b911      	cbnz	r1, d6ff8 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d6ff2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6ff6:	e035      	b.n	d7064 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d6ff8:	f04f 0a1c 	mov.w	sl, #28
   d6ffc:	ae05      	add	r6, sp, #20
   d6ffe:	4652      	mov	r2, sl
   d7000:	2100      	movs	r1, #0
   d7002:	4630      	mov	r0, r6
   d7004:	f002 fadd 	bl	d95c2 <memset>
        socklen_t slen = sizeof(saddr);
   d7008:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d700c:	f1b9 0f00 	cmp.w	r9, #0
   d7010:	d014      	beq.n	d703c <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d7012:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7016:	fbb9 f1f2 	udiv	r1, r9, r2
   d701a:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d701c:	fb02 9111 	mls	r1, r2, r1, r9
   d7020:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d7022:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d7024:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d7026:	9300      	str	r3, [sp, #0]
   d7028:	f241 0206 	movw	r2, #4102	; 0x1006
   d702c:	ab03      	add	r3, sp, #12
   d702e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7032:	4640      	mov	r0, r8
   d7034:	f7fe ff9a 	bl	d5f6c <sock_setsockopt>
            if (ret) {
   d7038:	b108      	cbz	r0, d703e <_ZN3UDP13receivePacketEPhjm+0x66>
   d703a:	e013      	b.n	d7064 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d703c:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d703e:	ab02      	add	r3, sp, #8
   d7040:	9301      	str	r3, [sp, #4]
   d7042:	4621      	mov	r1, r4
   d7044:	4603      	mov	r3, r0
   d7046:	9600      	str	r6, [sp, #0]
   d7048:	463a      	mov	r2, r7
   d704a:	6968      	ldr	r0, [r5, #20]
   d704c:	f7fe ff9e 	bl	d5f8c <sock_recvfrom>
        if (ret >= 0) {
   d7050:	1e04      	subs	r4, r0, #0
   d7052:	db06      	blt.n	d7062 <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d7054:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d7058:	f105 011c 	add.w	r1, r5, #28
   d705c:	4630      	mov	r0, r6
   d705e:	f7ff ff39 	bl	d6ed4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d7062:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d7064:	b00c      	add	sp, #48	; 0x30
   d7066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d706a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d706a:	b538      	push	{r3, r4, r5, lr}
   d706c:	4605      	mov	r5, r0
   d706e:	4614      	mov	r4, r2
   d7070:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d7072:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d7074:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d7076:	d111      	bne.n	d709c <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d7078:	231c      	movs	r3, #28
   d707a:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d707c:	230a      	movs	r3, #10
   d707e:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d7080:	f7fe ff54 	bl	d5f2c <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d7084:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d7086:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d708a:	1d2b      	adds	r3, r5, #4
   d708c:	3514      	adds	r5, #20
   d708e:	f853 2b04 	ldr.w	r2, [r3], #4
   d7092:	f844 2b04 	str.w	r2, [r4], #4
   d7096:	42ab      	cmp	r3, r5
   d7098:	d1f9      	bne.n	d708e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d709a:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d709c:	2b04      	cmp	r3, #4
   d709e:	d10a      	bne.n	d70b6 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d70a0:	2310      	movs	r3, #16
   d70a2:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d70a4:	2302      	movs	r3, #2
   d70a6:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d70a8:	f7fe ff40 	bl	d5f2c <inet_htons>
   d70ac:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d70ae:	6868      	ldr	r0, [r5, #4]
   d70b0:	f7fe ff2c 	bl	d5f0c <inet_htonl>
   d70b4:	6060      	str	r0, [r4, #4]
   d70b6:	bd38      	pop	{r3, r4, r5, pc}

000d70b8 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d70b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d70bc:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d70be:	ac03      	add	r4, sp, #12
   d70c0:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d70c2:	4699      	mov	r9, r3
   d70c4:	4606      	mov	r6, r0
   d70c6:	460f      	mov	r7, r1
   d70c8:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d70ca:	2100      	movs	r1, #0
   d70cc:	462a      	mov	r2, r5
   d70ce:	4620      	mov	r0, r4
   d70d0:	f002 fa77 	bl	d95c2 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d70d4:	4622      	mov	r2, r4
   d70d6:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d70da:	4648      	mov	r0, r9
   d70dc:	f7ff ffc5 	bl	d706a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d70e0:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d70e4:	b143      	cbz	r3, d70f8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d70e6:	e88d 0030 	stmia.w	sp, {r4, r5}
   d70ea:	2300      	movs	r3, #0
   d70ec:	4642      	mov	r2, r8
   d70ee:	4639      	mov	r1, r7
   d70f0:	6970      	ldr	r0, [r6, #20]
   d70f2:	f7fe ff53 	bl	d5f9c <sock_sendto>
   d70f6:	e001      	b.n	d70fc <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d70f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d70fc:	b00b      	add	sp, #44	; 0x2c
   d70fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7104 <_ZN3UDPC1Ev>:
    return -1;
}

} // anonymous

UDP::UDP()
   d7104:	b538      	push	{r3, r4, r5, lr}
   d7106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d710a:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d710c:	4b0b      	ldr	r3, [pc, #44]	; (d713c <_ZN3UDPC1Ev+0x38>)
   d710e:	f103 0208 	add.w	r2, r3, #8
   d7112:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7114:	2500      	movs	r5, #0
   d7116:	6103      	str	r3, [r0, #16]
   d7118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d711c:	4604      	mov	r4, r0
   d711e:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d7120:	6002      	str	r2, [r0, #0]
   d7122:	6143      	str	r3, [r0, #20]
   d7124:	301c      	adds	r0, #28
   d7126:	f7ff f9af 	bl	d6488 <_ZN9IPAddressC1Ev>
   d712a:	f44f 7300 	mov.w	r3, #512	; 0x200
   d712e:	86e5      	strh	r5, [r4, #54]	; 0x36
   d7130:	8725      	strh	r5, [r4, #56]	; 0x38
   d7132:	63e5      	str	r5, [r4, #60]	; 0x3c
   d7134:	6423      	str	r3, [r4, #64]	; 0x40
   d7136:	6465      	str	r5, [r4, #68]	; 0x44
}
   d7138:	4620      	mov	r0, r4
   d713a:	bd38      	pop	{r3, r4, r5, pc}
   d713c:	000d9d64 	.word	0x000d9d64

000d7140 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d7140:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d7142:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d7146:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d7148:	b123      	cbz	r3, d7154 <_ZN3UDP13releaseBufferEv+0x14>
   d714a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d714c:	b110      	cbz	r0, d7154 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d714e:	2101      	movs	r1, #1
   d7150:	f000 facf 	bl	d76f2 <_ZdlPvj>
    }
    _buffer = NULL;
   d7154:	2300      	movs	r3, #0
   d7156:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d7158:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d715c:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d715e:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d7160:	8723      	strh	r3, [r4, #56]	; 0x38
   d7162:	bd10      	pop	{r4, pc}

000d7164 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d7164:	b570      	push	{r4, r5, r6, lr}
   d7166:	4604      	mov	r4, r0
   d7168:	4616      	mov	r6, r2
   d716a:	460d      	mov	r5, r1
    releaseBuffer();
   d716c:	f7ff ffe8 	bl	d7140 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d7170:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d7172:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d7174:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d7176:	b93e      	cbnz	r6, d7188 <_ZN3UDP9setBufferEjPh+0x24>
   d7178:	b135      	cbz	r5, d7188 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d717a:	4628      	mov	r0, r5
   d717c:	f7fc ff8d 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d7180:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d7182:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d7184:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d7188:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d718a:	b103      	cbz	r3, d718e <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d718c:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d718e:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d7190:	3000      	adds	r0, #0
   d7192:	bf18      	it	ne
   d7194:	2001      	movne	r0, #1
   d7196:	bd70      	pop	{r4, r5, r6, pc}

000d7198 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d7198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d719a:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d719c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d719e:	4605      	mov	r5, r0
   d71a0:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d71a2:	b91a      	cbnz	r2, d71ac <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d71a4:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d71a6:	b109      	cbz	r1, d71ac <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d71a8:	f7ff ffdc 	bl	d7164 <_ZN3UDP9setBufferEjPh>
   d71ac:	3404      	adds	r4, #4
   d71ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d71b0:	f105 0620 	add.w	r6, r5, #32
   d71b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d71b6:	6823      	ldr	r3, [r4, #0]
   d71b8:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d71ba:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d71bc:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d71be:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d71c0:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d71c2:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d71c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d71c6 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d71c6:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d71c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d71ca:	4604      	mov	r4, r0
   d71cc:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d71ce:	b91a      	cbnz	r2, d71d8 <_ZN3UDP11parsePacketEm+0x12>
   d71d0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d71d2:	b109      	cbz	r1, d71d8 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d71d4:	f7ff ffc6 	bl	d7164 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d71d8:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d71da:	2200      	movs	r2, #0
   d71dc:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d71de:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d71e0:	b149      	cbz	r1, d71f6 <_ZN3UDP11parsePacketEm+0x30>
   d71e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d71e4:	b13a      	cbz	r2, d71f6 <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d71e6:	6823      	ldr	r3, [r4, #0]
   d71e8:	4620      	mov	r0, r4
   d71ea:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d71ec:	4633      	mov	r3, r6
   d71ee:	47a8      	blx	r5
        if (result > 0) {
   d71f0:	2800      	cmp	r0, #0
            _total = result;
   d71f2:	bfc8      	it	gt
   d71f4:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d71f6:	6823      	ldr	r3, [r4, #0]
   d71f8:	4620      	mov	r0, r4
   d71fa:	691b      	ldr	r3, [r3, #16]
}
   d71fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d7200:	4718      	bx	r3

000d7202 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7202:	4770      	bx	lr

000d7204 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7204:	7441      	strb	r1, [r0, #17]
   d7206:	4770      	bx	lr

000d7208 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7208:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d720a:	7c00      	ldrb	r0, [r0, #16]
   d720c:	f7fe ff1e 	bl	d604c <HAL_USART_Available_Data_For_Write>
}
   d7210:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7214:	bd08      	pop	{r3, pc}

000d7216 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7216:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7218:	7c00      	ldrb	r0, [r0, #16]
   d721a:	f7fe feef 	bl	d5ffc <HAL_USART_Available_Data>
}
   d721e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7222:	bd08      	pop	{r3, pc}

000d7224 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7224:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7226:	7c00      	ldrb	r0, [r0, #16]
   d7228:	f7fe fef8 	bl	d601c <HAL_USART_Peek_Data>
}
   d722c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7230:	bf28      	it	cs
   d7232:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7236:	bd08      	pop	{r3, pc}

000d7238 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7238:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d723a:	7c00      	ldrb	r0, [r0, #16]
   d723c:	f7fe fee6 	bl	d600c <HAL_USART_Read_Data>
}
   d7240:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7244:	bf28      	it	cs
   d7246:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d724a:	bd08      	pop	{r3, pc}

000d724c <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d724c:	7c00      	ldrb	r0, [r0, #16]
   d724e:	f7fe beed 	b.w	d602c <HAL_USART_Flush_Data>

000d7252 <_ZN11USARTSerialD0Ev>:
   d7252:	b510      	push	{r4, lr}
   d7254:	2114      	movs	r1, #20
   d7256:	4604      	mov	r4, r0
   d7258:	f000 fa4b 	bl	d76f2 <_ZdlPvj>
   d725c:	4620      	mov	r0, r4
   d725e:	bd10      	pop	{r4, pc}

000d7260 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7260:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7262:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7264:	4604      	mov	r4, r0
   d7266:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7268:	b925      	cbnz	r5, d7274 <_ZN11USARTSerial5writeEh+0x14>
   d726a:	7c00      	ldrb	r0, [r0, #16]
   d726c:	f7fe feee 	bl	d604c <HAL_USART_Available_Data_For_Write>
   d7270:	2800      	cmp	r0, #0
   d7272:	dd05      	ble.n	d7280 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7274:	4631      	mov	r1, r6
   d7276:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d727c:	f7fe beb6 	b.w	d5fec <HAL_USART_Write_Data>
  }
  return 0;
}
   d7280:	4628      	mov	r0, r5
   d7282:	bd70      	pop	{r4, r5, r6, pc}

000d7284 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7284:	b510      	push	{r4, lr}
   d7286:	4604      	mov	r4, r0
   d7288:	4608      	mov	r0, r1
   d728a:	4611      	mov	r1, r2
   d728c:	2200      	movs	r2, #0
   d728e:	6062      	str	r2, [r4, #4]
   d7290:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7294:	60a2      	str	r2, [r4, #8]
   d7296:	4a05      	ldr	r2, [pc, #20]	; (d72ac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7298:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d729a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d729c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d729e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d72a0:	461a      	mov	r2, r3
   d72a2:	f7fe fe9b 	bl	d5fdc <HAL_USART_Init>
}
   d72a6:	4620      	mov	r0, r4
   d72a8:	bd10      	pop	{r4, pc}
   d72aa:	bf00      	nop
   d72ac:	000d9ddc 	.word	0x000d9ddc

000d72b0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d72b0:	7c00      	ldrb	r0, [r0, #16]
   d72b2:	f7fe bec3 	b.w	d603c <HAL_USART_Is_Enabled>
	...

000d72b8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d72b8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d72ba:	4d0c      	ldr	r5, [pc, #48]	; (d72ec <_Z22__fetch_global_Serial1v+0x34>)
   d72bc:	6829      	ldr	r1, [r5, #0]
   d72be:	f011 0401 	ands.w	r4, r1, #1
   d72c2:	d111      	bne.n	d72e8 <_Z22__fetch_global_Serial1v+0x30>
   d72c4:	4628      	mov	r0, r5
   d72c6:	f7fc feee 	bl	d40a6 <__cxa_guard_acquire>
   d72ca:	b168      	cbz	r0, d72e8 <_Z22__fetch_global_Serial1v+0x30>
   d72cc:	4a08      	ldr	r2, [pc, #32]	; (d72f0 <_Z22__fetch_global_Serial1v+0x38>)
   d72ce:	4b09      	ldr	r3, [pc, #36]	; (d72f4 <_Z22__fetch_global_Serial1v+0x3c>)
   d72d0:	4809      	ldr	r0, [pc, #36]	; (d72f8 <_Z22__fetch_global_Serial1v+0x40>)
   d72d2:	4621      	mov	r1, r4
   d72d4:	f7ff ffd6 	bl	d7284 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d72d8:	4628      	mov	r0, r5
   d72da:	f7fc fee9 	bl	d40b0 <__cxa_guard_release>
   d72de:	4a07      	ldr	r2, [pc, #28]	; (d72fc <_Z22__fetch_global_Serial1v+0x44>)
   d72e0:	4907      	ldr	r1, [pc, #28]	; (d7300 <_Z22__fetch_global_Serial1v+0x48>)
   d72e2:	4805      	ldr	r0, [pc, #20]	; (d72f8 <_Z22__fetch_global_Serial1v+0x40>)
   d72e4:	f000 fa00 	bl	d76e8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d72e8:	4803      	ldr	r0, [pc, #12]	; (d72f8 <_Z22__fetch_global_Serial1v+0x40>)
   d72ea:	bd38      	pop	{r3, r4, r5, pc}
   d72ec:	2003e678 	.word	0x2003e678
   d72f0:	2003e67c 	.word	0x2003e67c
   d72f4:	2003e5f4 	.word	0x2003e5f4
   d72f8:	2003e5e0 	.word	0x2003e5e0
   d72fc:	2003e2d8 	.word	0x2003e2d8
   d7300:	000d7203 	.word	0x000d7203

000d7304 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7304:	7441      	strb	r1, [r0, #17]
   d7306:	4770      	bx	lr

000d7308 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7308:	4770      	bx	lr

000d730a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d730a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d730c:	2100      	movs	r1, #0
   d730e:	7c00      	ldrb	r0, [r0, #16]
   d7310:	f7fe fec4 	bl	d609c <HAL_USB_USART_Receive_Data>
}
   d7314:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7318:	bf28      	it	cs
   d731a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d731e:	bd08      	pop	{r3, pc}

000d7320 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7320:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7322:	2101      	movs	r1, #1
   d7324:	7c00      	ldrb	r0, [r0, #16]
   d7326:	f7fe feb9 	bl	d609c <HAL_USB_USART_Receive_Data>
}
   d732a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d732e:	bf28      	it	cs
   d7330:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7334:	bd08      	pop	{r3, pc}

000d7336 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7336:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7338:	7c00      	ldrb	r0, [r0, #16]
   d733a:	f7fe fea7 	bl	d608c <HAL_USB_USART_Available_Data_For_Write>
}
   d733e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7342:	bd08      	pop	{r3, pc}

000d7344 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7344:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7346:	7c00      	ldrb	r0, [r0, #16]
   d7348:	f7fe fe98 	bl	d607c <HAL_USB_USART_Available_Data>
}
   d734c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7350:	bd08      	pop	{r3, pc}

000d7352 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7352:	7c00      	ldrb	r0, [r0, #16]
   d7354:	f7fe beb2 	b.w	d60bc <HAL_USB_USART_Flush_Data>

000d7358 <_ZN9USBSerialD0Ev>:
   d7358:	b510      	push	{r4, lr}
   d735a:	2114      	movs	r1, #20
   d735c:	4604      	mov	r4, r0
   d735e:	f000 f9c8 	bl	d76f2 <_ZdlPvj>
   d7362:	4620      	mov	r0, r4
   d7364:	bd10      	pop	{r4, pc}

000d7366 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7366:	b538      	push	{r3, r4, r5, lr}
   d7368:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d736a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d736c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d736e:	f7fe fe8d 	bl	d608c <HAL_USB_USART_Available_Data_For_Write>
   d7372:	2800      	cmp	r0, #0
   d7374:	dc01      	bgt.n	d737a <_ZN9USBSerial5writeEh+0x14>
   d7376:	7c60      	ldrb	r0, [r4, #17]
   d7378:	b128      	cbz	r0, d7386 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d737a:	4629      	mov	r1, r5
   d737c:	7c20      	ldrb	r0, [r4, #16]
   d737e:	f7fe fe95 	bl	d60ac <HAL_USB_USART_Send_Data>
   d7382:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7386:	bd38      	pop	{r3, r4, r5, pc}

000d7388 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7388:	b510      	push	{r4, lr}
   d738a:	4604      	mov	r4, r0
   d738c:	2300      	movs	r3, #0
   d738e:	6063      	str	r3, [r4, #4]
   d7390:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7394:	60a3      	str	r3, [r4, #8]
   d7396:	4b05      	ldr	r3, [pc, #20]	; (d73ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7398:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d739a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d739c:	4608      	mov	r0, r1
{
  _serial = serial;
   d739e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d73a0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d73a2:	4611      	mov	r1, r2
   d73a4:	f7fe fe5a 	bl	d605c <HAL_USB_USART_Init>
}
   d73a8:	4620      	mov	r0, r4
   d73aa:	bd10      	pop	{r4, pc}
   d73ac:	000d9e0c 	.word	0x000d9e0c

000d73b0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d73b0:	2200      	movs	r2, #0
   d73b2:	7c00      	ldrb	r0, [r0, #16]
   d73b4:	f7fe be5a 	b.w	d606c <HAL_USB_USART_Begin>

000d73b8 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
   d73b8:	7c00      	ldrb	r0, [r0, #16]
   d73ba:	f7fe be87 	b.w	d60cc <HAL_USB_USART_Is_Enabled>

000d73be <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
   d73be:	f7ff bffb 	b.w	d73b8 <_ZN9USBSerial9isEnabledEv>

000d73c2 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d73c2:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d73c4:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d73c6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d73c8:	2100      	movs	r1, #0
   d73ca:	f002 f8fa 	bl	d95c2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d73ce:	4620      	mov	r0, r4
   d73d0:	bd10      	pop	{r4, pc}
	...

000d73d4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d73d4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d73d6:	4d0e      	ldr	r5, [pc, #56]	; (d7410 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d73d8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d73da:	a801      	add	r0, sp, #4
   d73dc:	f7ff fff1 	bl	d73c2 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d73e0:	6829      	ldr	r1, [r5, #0]
   d73e2:	f011 0401 	ands.w	r4, r1, #1
   d73e6:	d110      	bne.n	d740a <_Z16_fetch_usbserialv+0x36>
   d73e8:	4628      	mov	r0, r5
   d73ea:	f7fc fe5c 	bl	d40a6 <__cxa_guard_acquire>
   d73ee:	b160      	cbz	r0, d740a <_Z16_fetch_usbserialv+0x36>
   d73f0:	aa01      	add	r2, sp, #4
   d73f2:	4621      	mov	r1, r4
   d73f4:	4807      	ldr	r0, [pc, #28]	; (d7414 <_Z16_fetch_usbserialv+0x40>)
   d73f6:	f7ff ffc7 	bl	d7388 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d73fa:	4628      	mov	r0, r5
   d73fc:	f7fc fe58 	bl	d40b0 <__cxa_guard_release>
   d7400:	4a05      	ldr	r2, [pc, #20]	; (d7418 <_Z16_fetch_usbserialv+0x44>)
   d7402:	4906      	ldr	r1, [pc, #24]	; (d741c <_Z16_fetch_usbserialv+0x48>)
   d7404:	4803      	ldr	r0, [pc, #12]	; (d7414 <_Z16_fetch_usbserialv+0x40>)
   d7406:	f000 f96f 	bl	d76e8 <__aeabi_atexit>
	return _usbserial;
}
   d740a:	4802      	ldr	r0, [pc, #8]	; (d7414 <_Z16_fetch_usbserialv+0x40>)
   d740c:	b007      	add	sp, #28
   d740e:	bd30      	pop	{r4, r5, pc}
   d7410:	2003e700 	.word	0x2003e700
   d7414:	2003e704 	.word	0x2003e704
   d7418:	2003e2d8 	.word	0x2003e2d8
   d741c:	000d7309 	.word	0x000d7309

000d7420 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7420:	2200      	movs	r2, #0
   d7422:	4611      	mov	r1, r2
   d7424:	6840      	ldr	r0, [r0, #4]
   d7426:	f7fe bead 	b.w	d6184 <network_ready>

000d742a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d742a:	2200      	movs	r2, #0
   d742c:	4611      	mov	r1, r2
   d742e:	6840      	ldr	r0, [r0, #4]
   d7430:	f7fe bec8 	b.w	d61c4 <network_listening>

000d7434 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7434:	2200      	movs	r2, #0
   d7436:	4611      	mov	r1, r2
   d7438:	6840      	ldr	r0, [r0, #4]
   d743a:	f7fe bed3 	b.w	d61e4 <network_get_listen_timeout>

000d743e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d743e:	2200      	movs	r2, #0
   d7440:	6840      	ldr	r0, [r0, #4]
   d7442:	f7fe bec7 	b.w	d61d4 <network_set_listen_timeout>

000d7446 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7446:	2200      	movs	r2, #0
   d7448:	f081 0101 	eor.w	r1, r1, #1
   d744c:	6840      	ldr	r0, [r0, #4]
   d744e:	f7fe beb1 	b.w	d61b4 <network_listen>

000d7452 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7452:	2300      	movs	r3, #0
   d7454:	461a      	mov	r2, r3
   d7456:	4619      	mov	r1, r3
   d7458:	6840      	ldr	r0, [r0, #4]
   d745a:	f7fe bea3 	b.w	d61a4 <network_off>

000d745e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d745e:	2300      	movs	r3, #0
   d7460:	461a      	mov	r2, r3
   d7462:	4619      	mov	r1, r3
   d7464:	6840      	ldr	r0, [r0, #4]
   d7466:	f7fe be95 	b.w	d6194 <network_on>

000d746a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d746a:	2200      	movs	r2, #0
   d746c:	4611      	mov	r1, r2
   d746e:	6840      	ldr	r0, [r0, #4]
   d7470:	f7fe be78 	b.w	d6164 <network_connecting>

000d7474 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7474:	2200      	movs	r2, #0
   d7476:	2102      	movs	r1, #2
   d7478:	6840      	ldr	r0, [r0, #4]
   d747a:	f7fe be7b 	b.w	d6174 <network_disconnect>

000d747e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d747e:	2300      	movs	r3, #0
   d7480:	461a      	mov	r2, r3
   d7482:	6840      	ldr	r0, [r0, #4]
   d7484:	f7fe be66 	b.w	d6154 <network_connect>

000d7488 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7488:	4b02      	ldr	r3, [pc, #8]	; (d7494 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d748a:	2204      	movs	r2, #4
   d748c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d748e:	4a02      	ldr	r2, [pc, #8]	; (d7498 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7490:	601a      	str	r2, [r3, #0]
   d7492:	4770      	bx	lr
   d7494:	2003e718 	.word	0x2003e718
   d7498:	000d9e3c 	.word	0x000d9e3c

000d749c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d749c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d749e:	4b0c      	ldr	r3, [pc, #48]	; (d74d0 <serialEventRun+0x34>)
   d74a0:	b133      	cbz	r3, d74b0 <serialEventRun+0x14>
   d74a2:	f7ff ff97 	bl	d73d4 <_Z16_fetch_usbserialv>
   d74a6:	6803      	ldr	r3, [r0, #0]
   d74a8:	691b      	ldr	r3, [r3, #16]
   d74aa:	4798      	blx	r3
   d74ac:	2800      	cmp	r0, #0
   d74ae:	dc09      	bgt.n	d74c4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d74b0:	4b08      	ldr	r3, [pc, #32]	; (d74d4 <serialEventRun+0x38>)
   d74b2:	b163      	cbz	r3, d74ce <serialEventRun+0x32>
   d74b4:	f7ff ff00 	bl	d72b8 <_Z22__fetch_global_Serial1v>
   d74b8:	6803      	ldr	r3, [r0, #0]
   d74ba:	691b      	ldr	r3, [r3, #16]
   d74bc:	4798      	blx	r3
   d74be:	2800      	cmp	r0, #0
   d74c0:	dc03      	bgt.n	d74ca <serialEventRun+0x2e>
   d74c2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d74c4:	f3af 8000 	nop.w
   d74c8:	e7f2      	b.n	d74b0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d74ca:	f3af 8000 	nop.w
   d74ce:	bd08      	pop	{r3, pc}
	...

000d74d8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d74d8:	b508      	push	{r3, lr}
	serialEventRun();
   d74da:	f7ff ffdf 	bl	d749c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d74de:	f7fe fc85 	bl	d5dec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d74e2:	4b01      	ldr	r3, [pc, #4]	; (d74e8 <_post_loop+0x10>)
   d74e4:	6018      	str	r0, [r3, #0]
   d74e6:	bd08      	pop	{r3, pc}
   d74e8:	2003e734 	.word	0x2003e734

000d74ec <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d74ec:	4802      	ldr	r0, [pc, #8]	; (d74f8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d74ee:	4a03      	ldr	r2, [pc, #12]	; (d74fc <_Z33system_initialize_user_backup_ramv+0x10>)
   d74f0:	4903      	ldr	r1, [pc, #12]	; (d7500 <_Z33system_initialize_user_backup_ramv+0x14>)
   d74f2:	1a12      	subs	r2, r2, r0
   d74f4:	f002 b85a 	b.w	d95ac <memcpy>
   d74f8:	2003f400 	.word	0x2003f400
   d74fc:	2003f404 	.word	0x2003f404
   d7500:	000d9f30 	.word	0x000d9f30

000d7504 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7504:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7506:	2300      	movs	r3, #0
   d7508:	9300      	str	r3, [sp, #0]
   d750a:	461a      	mov	r2, r3
   d750c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7510:	f7fe fe06 	bl	d6120 <system_ctrl_set_result>
}
   d7514:	b003      	add	sp, #12
   d7516:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d751c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d751c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d751e:	8843      	ldrh	r3, [r0, #2]
   d7520:	2b0a      	cmp	r3, #10
   d7522:	d008      	beq.n	d7536 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7524:	2b50      	cmp	r3, #80	; 0x50
   d7526:	d109      	bne.n	d753c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7528:	4b09      	ldr	r3, [pc, #36]	; (d7550 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d752a:	681b      	ldr	r3, [r3, #0]
   d752c:	b13b      	cbz	r3, d753e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d752e:	b003      	add	sp, #12
   d7530:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7534:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7536:	f7ff ffe5 	bl	d7504 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d753a:	e006      	b.n	d754a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d753c:	2300      	movs	r3, #0
   d753e:	9300      	str	r3, [sp, #0]
   d7540:	461a      	mov	r2, r3
   d7542:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7546:	f7fe fdeb 	bl	d6120 <system_ctrl_set_result>
        break;
    }
}
   d754a:	b003      	add	sp, #12
   d754c:	f85d fb04 	ldr.w	pc, [sp], #4
   d7550:	2003e720 	.word	0x2003e720

000d7554 <module_user_init_hook>:

void module_user_init_hook()
{
   d7554:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7556:	4c10      	ldr	r4, [pc, #64]	; (d7598 <module_user_init_hook+0x44>)
   d7558:	4d10      	ldr	r5, [pc, #64]	; (d759c <module_user_init_hook+0x48>)
   d755a:	6823      	ldr	r3, [r4, #0]
   d755c:	42ab      	cmp	r3, r5
   d755e:	4b10      	ldr	r3, [pc, #64]	; (d75a0 <module_user_init_hook+0x4c>)
   d7560:	bf0c      	ite	eq
   d7562:	2201      	moveq	r2, #1
   d7564:	2200      	movne	r2, #0
   d7566:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7568:	d002      	beq.n	d7570 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d756a:	f7ff ffbf 	bl	d74ec <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d756e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7570:	f7fe fc34 	bl	d5ddc <HAL_RNG_GetRandomNumber>
   d7574:	4604      	mov	r4, r0
    srand(seed);
   d7576:	f002 f82d 	bl	d95d4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d757a:	4b0a      	ldr	r3, [pc, #40]	; (d75a4 <module_user_init_hook+0x50>)
   d757c:	b113      	cbz	r3, d7584 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d757e:	4620      	mov	r0, r4
   d7580:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7584:	2100      	movs	r1, #0
   d7586:	4807      	ldr	r0, [pc, #28]	; (d75a4 <module_user_init_hook+0x50>)
   d7588:	f7fe fdd4 	bl	d6134 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d758c:	2100      	movs	r1, #0
   d758e:	4806      	ldr	r0, [pc, #24]	; (d75a8 <module_user_init_hook+0x54>)
}
   d7590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7594:	f7fe bdba 	b.w	d610c <system_ctrl_set_app_request_handler>
   d7598:	2003f400 	.word	0x2003f400
   d759c:	9a271c1e 	.word	0x9a271c1e
   d75a0:	2003e724 	.word	0x2003e724
   d75a4:	00000000 	.word	0x00000000
   d75a8:	000d751d 	.word	0x000d751d

000d75ac <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d75ac:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d75ae:	4e18      	ldr	r6, [pc, #96]	; (d7610 <pinAvailable+0x64>)
   d75b0:	6831      	ldr	r1, [r6, #0]
   d75b2:	f011 0501 	ands.w	r5, r1, #1
   d75b6:	4604      	mov	r4, r0
   d75b8:	d10a      	bne.n	d75d0 <pinAvailable+0x24>
   d75ba:	4630      	mov	r0, r6
   d75bc:	f7fc fd73 	bl	d40a6 <__cxa_guard_acquire>
   d75c0:	b130      	cbz	r0, d75d0 <pinAvailable+0x24>
   d75c2:	4629      	mov	r1, r5
   d75c4:	4813      	ldr	r0, [pc, #76]	; (d7614 <pinAvailable+0x68>)
   d75c6:	f7ff fa8d 	bl	d6ae4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d75ca:	4630      	mov	r0, r6
   d75cc:	f7fc fd70 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d75d0:	4810      	ldr	r0, [pc, #64]	; (d7614 <pinAvailable+0x68>)
   d75d2:	f7ff fa91 	bl	d6af8 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d75d6:	b128      	cbz	r0, d75e4 <pinAvailable+0x38>
   d75d8:	f1a4 030b 	sub.w	r3, r4, #11
   d75dc:	2b02      	cmp	r3, #2
   d75de:	d801      	bhi.n	d75e4 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d75e0:	2000      	movs	r0, #0
   d75e2:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d75e4:	f000 f85a 	bl	d769c <_Z19__fetch_global_Wirev>
   d75e8:	f7fe ff17 	bl	d641a <_ZN7TwoWire9isEnabledEv>
   d75ec:	b108      	cbz	r0, d75f2 <pinAvailable+0x46>
   d75ee:	2c01      	cmp	r4, #1
   d75f0:	d9f6      	bls.n	d75e0 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d75f2:	f7ff fe61 	bl	d72b8 <_Z22__fetch_global_Serial1v>
   d75f6:	f7ff fe5b 	bl	d72b0 <_ZN11USARTSerial9isEnabledEv>
   d75fa:	b118      	cbz	r0, d7604 <pinAvailable+0x58>
   d75fc:	f1a4 0309 	sub.w	r3, r4, #9
   d7600:	2b01      	cmp	r3, #1
   d7602:	d9ed      	bls.n	d75e0 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7604:	2c23      	cmp	r4, #35	; 0x23
   d7606:	bf8c      	ite	hi
   d7608:	2000      	movhi	r0, #0
   d760a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d760c:	bd70      	pop	{r4, r5, r6, pc}
   d760e:	bf00      	nop
   d7610:	2003e728 	.word	0x2003e728
   d7614:	2003e72c 	.word	0x2003e72c

000d7618 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7618:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d761a:	b538      	push	{r3, r4, r5, lr}
   d761c:	4604      	mov	r4, r0
   d761e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7620:	d80a      	bhi.n	d7638 <pinMode+0x20>
   d7622:	29ff      	cmp	r1, #255	; 0xff
   d7624:	d008      	beq.n	d7638 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7626:	f7ff ffc1 	bl	d75ac <pinAvailable>
   d762a:	b128      	cbz	r0, d7638 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d762c:	4629      	mov	r1, r5
   d762e:	4620      	mov	r0, r4
}
   d7630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7634:	f7fe bbf2 	b.w	d5e1c <HAL_Pin_Mode>
   d7638:	bd38      	pop	{r3, r4, r5, pc}

000d763a <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d763a:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d763c:	b510      	push	{r4, lr}
   d763e:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7640:	bf9c      	itt	ls
   d7642:	340e      	addls	r4, #14
   d7644:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7646:	4620      	mov	r0, r4
   d7648:	f7ff ffb0 	bl	d75ac <pinAvailable>
   d764c:	b150      	cbz	r0, d7664 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d764e:	2103      	movs	r1, #3
   d7650:	4620      	mov	r0, r4
   d7652:	f7fe fbdb 	bl	d5e0c <HAL_Validate_Pin_Function>
   d7656:	2803      	cmp	r0, #3
   d7658:	d104      	bne.n	d7664 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d765a:	4620      	mov	r0, r4
}
   d765c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7660:	f7fe bbe4 	b.w	d5e2c <HAL_ADC_Read>
}
   d7664:	2000      	movs	r0, #0
   d7666:	bd10      	pop	{r4, pc}

000d7668 <_Z17acquireWireBufferv>:
   d7668:	b570      	push	{r4, r5, r6, lr}
   d766a:	4604      	mov	r4, r0
   d766c:	2514      	movs	r5, #20
   d766e:	462a      	mov	r2, r5
   d7670:	4e09      	ldr	r6, [pc, #36]	; (d7698 <_Z17acquireWireBufferv+0x30>)
   d7672:	2100      	movs	r1, #0
   d7674:	f001 ffa5 	bl	d95c2 <memset>
   d7678:	8025      	strh	r5, [r4, #0]
   d767a:	2520      	movs	r5, #32
   d767c:	4631      	mov	r1, r6
   d767e:	60a5      	str	r5, [r4, #8]
   d7680:	6125      	str	r5, [r4, #16]
   d7682:	4628      	mov	r0, r5
   d7684:	f000 f84f 	bl	d7726 <_ZnajRKSt9nothrow_t>
   d7688:	4631      	mov	r1, r6
   d768a:	6060      	str	r0, [r4, #4]
   d768c:	4628      	mov	r0, r5
   d768e:	f000 f84a 	bl	d7726 <_ZnajRKSt9nothrow_t>
   d7692:	60e0      	str	r0, [r4, #12]
   d7694:	4620      	mov	r0, r4
   d7696:	bd70      	pop	{r4, r5, r6, pc}
   d7698:	000d9e68 	.word	0x000d9e68

000d769c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d769c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d769e:	4d0e      	ldr	r5, [pc, #56]	; (d76d8 <_Z19__fetch_global_Wirev+0x3c>)
   d76a0:	6829      	ldr	r1, [r5, #0]
   d76a2:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d76a6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d76a8:	d113      	bne.n	d76d2 <_Z19__fetch_global_Wirev+0x36>
   d76aa:	4628      	mov	r0, r5
   d76ac:	f7fc fcfb 	bl	d40a6 <__cxa_guard_acquire>
   d76b0:	b178      	cbz	r0, d76d2 <_Z19__fetch_global_Wirev+0x36>
   d76b2:	a801      	add	r0, sp, #4
   d76b4:	f7ff ffd8 	bl	d7668 <_Z17acquireWireBufferv>
   d76b8:	aa01      	add	r2, sp, #4
   d76ba:	4621      	mov	r1, r4
   d76bc:	4807      	ldr	r0, [pc, #28]	; (d76dc <_Z19__fetch_global_Wirev+0x40>)
   d76be:	f7fe fe55 	bl	d636c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d76c2:	4628      	mov	r0, r5
   d76c4:	f7fc fcf4 	bl	d40b0 <__cxa_guard_release>
   d76c8:	4a05      	ldr	r2, [pc, #20]	; (d76e0 <_Z19__fetch_global_Wirev+0x44>)
   d76ca:	4906      	ldr	r1, [pc, #24]	; (d76e4 <_Z19__fetch_global_Wirev+0x48>)
   d76cc:	4803      	ldr	r0, [pc, #12]	; (d76dc <_Z19__fetch_global_Wirev+0x40>)
   d76ce:	f000 f80b 	bl	d76e8 <__aeabi_atexit>
	return wire;
}
   d76d2:	4802      	ldr	r0, [pc, #8]	; (d76dc <_Z19__fetch_global_Wirev+0x40>)
   d76d4:	b007      	add	sp, #28
   d76d6:	bd30      	pop	{r4, r5, pc}
   d76d8:	2003e738 	.word	0x2003e738
   d76dc:	2003e73c 	.word	0x2003e73c
   d76e0:	2003e2d8 	.word	0x2003e2d8
   d76e4:	000d6315 	.word	0x000d6315

000d76e8 <__aeabi_atexit>:
   d76e8:	460b      	mov	r3, r1
   d76ea:	4601      	mov	r1, r0
   d76ec:	4618      	mov	r0, r3
   d76ee:	f001 bf4f 	b.w	d9590 <__cxa_atexit>

000d76f2 <_ZdlPvj>:
   d76f2:	f7fc bcd4 	b.w	d409e <_ZdlPv>
	...

000d76f8 <_ZSt15get_new_handlerv>:
   d76f8:	4b02      	ldr	r3, [pc, #8]	; (d7704 <_ZSt15get_new_handlerv+0xc>)
   d76fa:	6818      	ldr	r0, [r3, #0]
   d76fc:	f3bf 8f5f 	dmb	sy
   d7700:	4770      	bx	lr
   d7702:	bf00      	nop
   d7704:	2003e750 	.word	0x2003e750

000d7708 <_ZnwjRKSt9nothrow_t>:
   d7708:	b510      	push	{r4, lr}
   d770a:	2800      	cmp	r0, #0
   d770c:	bf14      	ite	ne
   d770e:	4604      	movne	r4, r0
   d7710:	2401      	moveq	r4, #1
   d7712:	4620      	mov	r0, r4
   d7714:	f7fe fd6e 	bl	d61f4 <malloc>
   d7718:	b920      	cbnz	r0, d7724 <_ZnwjRKSt9nothrow_t+0x1c>
   d771a:	f7ff ffed 	bl	d76f8 <_ZSt15get_new_handlerv>
   d771e:	b108      	cbz	r0, d7724 <_ZnwjRKSt9nothrow_t+0x1c>
   d7720:	4780      	blx	r0
   d7722:	e7f6      	b.n	d7712 <_ZnwjRKSt9nothrow_t+0xa>
   d7724:	bd10      	pop	{r4, pc}

000d7726 <_ZnajRKSt9nothrow_t>:
   d7726:	f7ff bfef 	b.w	d7708 <_ZnwjRKSt9nothrow_t>
	...

000d772c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d772c:	4b24      	ldr	r3, [pc, #144]	; (d77c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d772e:	681a      	ldr	r2, [r3, #0]
   d7730:	07d0      	lsls	r0, r2, #31
   d7732:	bf5c      	itt	pl
   d7734:	2201      	movpl	r2, #1
   d7736:	601a      	strpl	r2, [r3, #0]
   d7738:	4b22      	ldr	r3, [pc, #136]	; (d77c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d773a:	681a      	ldr	r2, [r3, #0]
   d773c:	07d1      	lsls	r1, r2, #31
   d773e:	bf5c      	itt	pl
   d7740:	2201      	movpl	r2, #1
   d7742:	601a      	strpl	r2, [r3, #0]
   d7744:	4b20      	ldr	r3, [pc, #128]	; (d77c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7746:	681a      	ldr	r2, [r3, #0]
   d7748:	07d2      	lsls	r2, r2, #31
   d774a:	bf5c      	itt	pl
   d774c:	2201      	movpl	r2, #1
   d774e:	601a      	strpl	r2, [r3, #0]
   d7750:	4b1e      	ldr	r3, [pc, #120]	; (d77cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7752:	681a      	ldr	r2, [r3, #0]
   d7754:	07d0      	lsls	r0, r2, #31
   d7756:	bf5c      	itt	pl
   d7758:	2201      	movpl	r2, #1
   d775a:	601a      	strpl	r2, [r3, #0]
   d775c:	4b1c      	ldr	r3, [pc, #112]	; (d77d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d775e:	681a      	ldr	r2, [r3, #0]
   d7760:	07d1      	lsls	r1, r2, #31
   d7762:	bf5c      	itt	pl
   d7764:	2201      	movpl	r2, #1
   d7766:	601a      	strpl	r2, [r3, #0]
   d7768:	4b1a      	ldr	r3, [pc, #104]	; (d77d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d776a:	681a      	ldr	r2, [r3, #0]
   d776c:	07d2      	lsls	r2, r2, #31
   d776e:	bf5c      	itt	pl
   d7770:	2201      	movpl	r2, #1
   d7772:	601a      	strpl	r2, [r3, #0]
   d7774:	4b18      	ldr	r3, [pc, #96]	; (d77d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7776:	681a      	ldr	r2, [r3, #0]
   d7778:	07d0      	lsls	r0, r2, #31
   d777a:	bf5c      	itt	pl
   d777c:	2201      	movpl	r2, #1
   d777e:	601a      	strpl	r2, [r3, #0]
   d7780:	4b16      	ldr	r3, [pc, #88]	; (d77dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7782:	681a      	ldr	r2, [r3, #0]
   d7784:	07d1      	lsls	r1, r2, #31
   d7786:	bf5c      	itt	pl
   d7788:	2201      	movpl	r2, #1
   d778a:	601a      	strpl	r2, [r3, #0]
   d778c:	4b14      	ldr	r3, [pc, #80]	; (d77e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d778e:	681a      	ldr	r2, [r3, #0]
   d7790:	07d2      	lsls	r2, r2, #31
   d7792:	bf5c      	itt	pl
   d7794:	2201      	movpl	r2, #1
   d7796:	601a      	strpl	r2, [r3, #0]
   d7798:	4b12      	ldr	r3, [pc, #72]	; (d77e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d779a:	681a      	ldr	r2, [r3, #0]
   d779c:	07d0      	lsls	r0, r2, #31
   d779e:	bf5c      	itt	pl
   d77a0:	2201      	movpl	r2, #1
   d77a2:	601a      	strpl	r2, [r3, #0]
   d77a4:	4b10      	ldr	r3, [pc, #64]	; (d77e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d77a6:	681a      	ldr	r2, [r3, #0]
   d77a8:	07d1      	lsls	r1, r2, #31
   d77aa:	bf5c      	itt	pl
   d77ac:	2201      	movpl	r2, #1
   d77ae:	601a      	strpl	r2, [r3, #0]
   d77b0:	4b0e      	ldr	r3, [pc, #56]	; (d77ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d77b2:	681a      	ldr	r2, [r3, #0]
   d77b4:	07d2      	lsls	r2, r2, #31
   d77b6:	bf5c      	itt	pl
   d77b8:	2201      	movpl	r2, #1
   d77ba:	601a      	strpl	r2, [r3, #0]
   d77bc:	4770      	bx	lr
   d77be:	bf00      	nop
   d77c0:	2003e780 	.word	0x2003e780
   d77c4:	2003e77c 	.word	0x2003e77c
   d77c8:	2003e778 	.word	0x2003e778
   d77cc:	2003e774 	.word	0x2003e774
   d77d0:	2003e770 	.word	0x2003e770
   d77d4:	2003e76c 	.word	0x2003e76c
   d77d8:	2003e768 	.word	0x2003e768
   d77dc:	2003e764 	.word	0x2003e764
   d77e0:	2003e760 	.word	0x2003e760
   d77e4:	2003e75c 	.word	0x2003e75c
   d77e8:	2003e758 	.word	0x2003e758
   d77ec:	2003e754 	.word	0x2003e754

000d77f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d77f0:	4b18      	ldr	r3, [pc, #96]	; (d7854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d77f2:	681a      	ldr	r2, [r3, #0]
   d77f4:	07d1      	lsls	r1, r2, #31
   d77f6:	bf5c      	itt	pl
   d77f8:	2201      	movpl	r2, #1
   d77fa:	601a      	strpl	r2, [r3, #0]
   d77fc:	4b16      	ldr	r3, [pc, #88]	; (d7858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d77fe:	681a      	ldr	r2, [r3, #0]
   d7800:	07d2      	lsls	r2, r2, #31
   d7802:	bf5c      	itt	pl
   d7804:	2201      	movpl	r2, #1
   d7806:	601a      	strpl	r2, [r3, #0]
   d7808:	4b14      	ldr	r3, [pc, #80]	; (d785c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d780a:	681a      	ldr	r2, [r3, #0]
   d780c:	07d0      	lsls	r0, r2, #31
   d780e:	bf5c      	itt	pl
   d7810:	2201      	movpl	r2, #1
   d7812:	601a      	strpl	r2, [r3, #0]
   d7814:	4b12      	ldr	r3, [pc, #72]	; (d7860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7816:	681a      	ldr	r2, [r3, #0]
   d7818:	07d1      	lsls	r1, r2, #31
   d781a:	bf5c      	itt	pl
   d781c:	2201      	movpl	r2, #1
   d781e:	601a      	strpl	r2, [r3, #0]
   d7820:	4b10      	ldr	r3, [pc, #64]	; (d7864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7822:	681a      	ldr	r2, [r3, #0]
   d7824:	07d2      	lsls	r2, r2, #31
   d7826:	bf5c      	itt	pl
   d7828:	2201      	movpl	r2, #1
   d782a:	601a      	strpl	r2, [r3, #0]
   d782c:	4b0e      	ldr	r3, [pc, #56]	; (d7868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d782e:	681a      	ldr	r2, [r3, #0]
   d7830:	07d0      	lsls	r0, r2, #31
   d7832:	bf5c      	itt	pl
   d7834:	2201      	movpl	r2, #1
   d7836:	601a      	strpl	r2, [r3, #0]
   d7838:	4b0c      	ldr	r3, [pc, #48]	; (d786c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d783a:	681a      	ldr	r2, [r3, #0]
   d783c:	07d1      	lsls	r1, r2, #31
   d783e:	bf5c      	itt	pl
   d7840:	2201      	movpl	r2, #1
   d7842:	601a      	strpl	r2, [r3, #0]
   d7844:	4b0a      	ldr	r3, [pc, #40]	; (d7870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7846:	681a      	ldr	r2, [r3, #0]
   d7848:	07d2      	lsls	r2, r2, #31
   d784a:	bf5c      	itt	pl
   d784c:	2201      	movpl	r2, #1
   d784e:	601a      	strpl	r2, [r3, #0]
   d7850:	4770      	bx	lr
   d7852:	bf00      	nop
   d7854:	2003e7a0 	.word	0x2003e7a0
   d7858:	2003e79c 	.word	0x2003e79c
   d785c:	2003e798 	.word	0x2003e798
   d7860:	2003e794 	.word	0x2003e794
   d7864:	2003e790 	.word	0x2003e790
   d7868:	2003e78c 	.word	0x2003e78c
   d786c:	2003e788 	.word	0x2003e788
   d7870:	2003e784 	.word	0x2003e784

000d7874 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7874:	4b18      	ldr	r3, [pc, #96]	; (d78d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7876:	681a      	ldr	r2, [r3, #0]
   d7878:	07d1      	lsls	r1, r2, #31
   d787a:	bf5c      	itt	pl
   d787c:	2201      	movpl	r2, #1
   d787e:	601a      	strpl	r2, [r3, #0]
   d7880:	4b16      	ldr	r3, [pc, #88]	; (d78dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7882:	681a      	ldr	r2, [r3, #0]
   d7884:	07d2      	lsls	r2, r2, #31
   d7886:	bf5c      	itt	pl
   d7888:	2201      	movpl	r2, #1
   d788a:	601a      	strpl	r2, [r3, #0]
   d788c:	4b14      	ldr	r3, [pc, #80]	; (d78e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d788e:	681a      	ldr	r2, [r3, #0]
   d7890:	07d0      	lsls	r0, r2, #31
   d7892:	bf5c      	itt	pl
   d7894:	2201      	movpl	r2, #1
   d7896:	601a      	strpl	r2, [r3, #0]
   d7898:	4b12      	ldr	r3, [pc, #72]	; (d78e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d789a:	681a      	ldr	r2, [r3, #0]
   d789c:	07d1      	lsls	r1, r2, #31
   d789e:	bf5c      	itt	pl
   d78a0:	2201      	movpl	r2, #1
   d78a2:	601a      	strpl	r2, [r3, #0]
   d78a4:	4b10      	ldr	r3, [pc, #64]	; (d78e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d78a6:	681a      	ldr	r2, [r3, #0]
   d78a8:	07d2      	lsls	r2, r2, #31
   d78aa:	bf5c      	itt	pl
   d78ac:	2201      	movpl	r2, #1
   d78ae:	601a      	strpl	r2, [r3, #0]
   d78b0:	4b0e      	ldr	r3, [pc, #56]	; (d78ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d78b2:	681a      	ldr	r2, [r3, #0]
   d78b4:	07d0      	lsls	r0, r2, #31
   d78b6:	bf5c      	itt	pl
   d78b8:	2201      	movpl	r2, #1
   d78ba:	601a      	strpl	r2, [r3, #0]
   d78bc:	4b0c      	ldr	r3, [pc, #48]	; (d78f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d78be:	681a      	ldr	r2, [r3, #0]
   d78c0:	07d1      	lsls	r1, r2, #31
   d78c2:	bf5c      	itt	pl
   d78c4:	2201      	movpl	r2, #1
   d78c6:	601a      	strpl	r2, [r3, #0]
   d78c8:	4b0a      	ldr	r3, [pc, #40]	; (d78f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d78ca:	681a      	ldr	r2, [r3, #0]
   d78cc:	07d2      	lsls	r2, r2, #31
   d78ce:	bf5c      	itt	pl
   d78d0:	2201      	movpl	r2, #1
   d78d2:	601a      	strpl	r2, [r3, #0]
   d78d4:	4770      	bx	lr
   d78d6:	bf00      	nop
   d78d8:	2003e7c0 	.word	0x2003e7c0
   d78dc:	2003e7bc 	.word	0x2003e7bc
   d78e0:	2003e7b8 	.word	0x2003e7b8
   d78e4:	2003e7b4 	.word	0x2003e7b4
   d78e8:	2003e7b0 	.word	0x2003e7b0
   d78ec:	2003e7ac 	.word	0x2003e7ac
   d78f0:	2003e7a8 	.word	0x2003e7a8
   d78f4:	2003e7a4 	.word	0x2003e7a4

000d78f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d78f8:	4b24      	ldr	r3, [pc, #144]	; (d798c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d78fa:	681a      	ldr	r2, [r3, #0]
   d78fc:	07d0      	lsls	r0, r2, #31
   d78fe:	bf5c      	itt	pl
   d7900:	2201      	movpl	r2, #1
   d7902:	601a      	strpl	r2, [r3, #0]
   d7904:	4b22      	ldr	r3, [pc, #136]	; (d7990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7906:	681a      	ldr	r2, [r3, #0]
   d7908:	07d1      	lsls	r1, r2, #31
   d790a:	bf5c      	itt	pl
   d790c:	2201      	movpl	r2, #1
   d790e:	601a      	strpl	r2, [r3, #0]
   d7910:	4b20      	ldr	r3, [pc, #128]	; (d7994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7912:	681a      	ldr	r2, [r3, #0]
   d7914:	07d2      	lsls	r2, r2, #31
   d7916:	bf5c      	itt	pl
   d7918:	2201      	movpl	r2, #1
   d791a:	601a      	strpl	r2, [r3, #0]
   d791c:	4b1e      	ldr	r3, [pc, #120]	; (d7998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d791e:	681a      	ldr	r2, [r3, #0]
   d7920:	07d0      	lsls	r0, r2, #31
   d7922:	bf5c      	itt	pl
   d7924:	2201      	movpl	r2, #1
   d7926:	601a      	strpl	r2, [r3, #0]
   d7928:	4b1c      	ldr	r3, [pc, #112]	; (d799c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d792a:	681a      	ldr	r2, [r3, #0]
   d792c:	07d1      	lsls	r1, r2, #31
   d792e:	bf5c      	itt	pl
   d7930:	2201      	movpl	r2, #1
   d7932:	601a      	strpl	r2, [r3, #0]
   d7934:	4b1a      	ldr	r3, [pc, #104]	; (d79a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7936:	681a      	ldr	r2, [r3, #0]
   d7938:	07d2      	lsls	r2, r2, #31
   d793a:	bf5c      	itt	pl
   d793c:	2201      	movpl	r2, #1
   d793e:	601a      	strpl	r2, [r3, #0]
   d7940:	4b18      	ldr	r3, [pc, #96]	; (d79a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7942:	681a      	ldr	r2, [r3, #0]
   d7944:	07d0      	lsls	r0, r2, #31
   d7946:	bf5c      	itt	pl
   d7948:	2201      	movpl	r2, #1
   d794a:	601a      	strpl	r2, [r3, #0]
   d794c:	4b16      	ldr	r3, [pc, #88]	; (d79a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d794e:	681a      	ldr	r2, [r3, #0]
   d7950:	07d1      	lsls	r1, r2, #31
   d7952:	bf5c      	itt	pl
   d7954:	2201      	movpl	r2, #1
   d7956:	601a      	strpl	r2, [r3, #0]
   d7958:	4b14      	ldr	r3, [pc, #80]	; (d79ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d795a:	681a      	ldr	r2, [r3, #0]
   d795c:	07d2      	lsls	r2, r2, #31
   d795e:	bf5c      	itt	pl
   d7960:	2201      	movpl	r2, #1
   d7962:	601a      	strpl	r2, [r3, #0]
   d7964:	4b12      	ldr	r3, [pc, #72]	; (d79b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7966:	681a      	ldr	r2, [r3, #0]
   d7968:	07d0      	lsls	r0, r2, #31
   d796a:	bf5c      	itt	pl
   d796c:	2201      	movpl	r2, #1
   d796e:	601a      	strpl	r2, [r3, #0]
   d7970:	4b10      	ldr	r3, [pc, #64]	; (d79b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7972:	681a      	ldr	r2, [r3, #0]
   d7974:	07d1      	lsls	r1, r2, #31
   d7976:	bf5c      	itt	pl
   d7978:	2201      	movpl	r2, #1
   d797a:	601a      	strpl	r2, [r3, #0]
   d797c:	4b0e      	ldr	r3, [pc, #56]	; (d79b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d797e:	681a      	ldr	r2, [r3, #0]
   d7980:	07d2      	lsls	r2, r2, #31
   d7982:	bf5c      	itt	pl
   d7984:	2201      	movpl	r2, #1
   d7986:	601a      	strpl	r2, [r3, #0]
   d7988:	4770      	bx	lr
   d798a:	bf00      	nop
   d798c:	2003e7f0 	.word	0x2003e7f0
   d7990:	2003e7ec 	.word	0x2003e7ec
   d7994:	2003e7e8 	.word	0x2003e7e8
   d7998:	2003e7e4 	.word	0x2003e7e4
   d799c:	2003e7e0 	.word	0x2003e7e0
   d79a0:	2003e7dc 	.word	0x2003e7dc
   d79a4:	2003e7d8 	.word	0x2003e7d8
   d79a8:	2003e7d4 	.word	0x2003e7d4
   d79ac:	2003e7d0 	.word	0x2003e7d0
   d79b0:	2003e7cc 	.word	0x2003e7cc
   d79b4:	2003e7c8 	.word	0x2003e7c8
   d79b8:	2003e7c4 	.word	0x2003e7c4
   d79bc:	00000000 	.word	0x00000000

000d79c0 <pow>:
   d79c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d79c4:	ed2d 8b02 	vpush	{d8}
   d79c8:	f8df a324 	ldr.w	sl, [pc, #804]	; d7cf0 <pow+0x330>
   d79cc:	b08b      	sub	sp, #44	; 0x2c
   d79ce:	ec57 6b10 	vmov	r6, r7, d0
   d79d2:	ec55 4b11 	vmov	r4, r5, d1
   d79d6:	f000 f98f 	bl	d7cf8 <__ieee754_pow>
   d79da:	f99a 8000 	ldrsb.w	r8, [sl]
   d79de:	eeb0 8a40 	vmov.f32	s16, s0
   d79e2:	eef0 8a60 	vmov.f32	s17, s1
   d79e6:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   d79ea:	d048      	beq.n	d7a7e <pow+0xbe>
   d79ec:	4622      	mov	r2, r4
   d79ee:	462b      	mov	r3, r5
   d79f0:	4620      	mov	r0, r4
   d79f2:	4629      	mov	r1, r5
   d79f4:	f001 fd6e 	bl	d94d4 <__aeabi_dcmpun>
   d79f8:	4683      	mov	fp, r0
   d79fa:	2800      	cmp	r0, #0
   d79fc:	d13f      	bne.n	d7a7e <pow+0xbe>
   d79fe:	4632      	mov	r2, r6
   d7a00:	463b      	mov	r3, r7
   d7a02:	4630      	mov	r0, r6
   d7a04:	4639      	mov	r1, r7
   d7a06:	f001 fd65 	bl	d94d4 <__aeabi_dcmpun>
   d7a0a:	4681      	mov	r9, r0
   d7a0c:	2800      	cmp	r0, #0
   d7a0e:	f040 8090 	bne.w	d7b32 <pow+0x172>
   d7a12:	4630      	mov	r0, r6
   d7a14:	4639      	mov	r1, r7
   d7a16:	2200      	movs	r2, #0
   d7a18:	2300      	movs	r3, #0
   d7a1a:	f001 fd29 	bl	d9470 <__aeabi_dcmpeq>
   d7a1e:	2800      	cmp	r0, #0
   d7a20:	d036      	beq.n	d7a90 <pow+0xd0>
   d7a22:	2200      	movs	r2, #0
   d7a24:	2300      	movs	r3, #0
   d7a26:	4620      	mov	r0, r4
   d7a28:	4629      	mov	r1, r5
   d7a2a:	f001 fd21 	bl	d9470 <__aeabi_dcmpeq>
   d7a2e:	4683      	mov	fp, r0
   d7a30:	b1b8      	cbz	r0, d7a62 <pow+0xa2>
   d7a32:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d7cc8 <pow+0x308>
   d7a36:	2201      	movs	r2, #1
   d7a38:	4ba9      	ldr	r3, [pc, #676]	; (d7ce0 <pow+0x320>)
   d7a3a:	f8cd 9020 	str.w	r9, [sp, #32]
   d7a3e:	9200      	str	r2, [sp, #0]
   d7a40:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7a44:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7a48:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7a4c:	9301      	str	r3, [sp, #4]
   d7a4e:	f1b8 0f00 	cmp.w	r8, #0
   d7a52:	d05b      	beq.n	d7b0c <pow+0x14c>
   d7a54:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d7cd0 <pow+0x310>
   d7a58:	b00b      	add	sp, #44	; 0x2c
   d7a5a:	ecbd 8b02 	vpop	{d8}
   d7a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7a62:	ec45 4b10 	vmov	d0, r4, r5
   d7a66:	f000 ffa7 	bl	d89b8 <finite>
   d7a6a:	b140      	cbz	r0, d7a7e <pow+0xbe>
   d7a6c:	2200      	movs	r2, #0
   d7a6e:	2300      	movs	r3, #0
   d7a70:	4620      	mov	r0, r4
   d7a72:	4629      	mov	r1, r5
   d7a74:	f001 fd06 	bl	d9484 <__aeabi_dcmplt>
   d7a78:	2800      	cmp	r0, #0
   d7a7a:	f040 80c5 	bne.w	d7c08 <pow+0x248>
   d7a7e:	eeb0 0a48 	vmov.f32	s0, s16
   d7a82:	eef0 0a68 	vmov.f32	s1, s17
   d7a86:	b00b      	add	sp, #44	; 0x2c
   d7a88:	ecbd 8b02 	vpop	{d8}
   d7a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7a90:	eeb0 0a48 	vmov.f32	s0, s16
   d7a94:	eef0 0a68 	vmov.f32	s1, s17
   d7a98:	f000 ff8e 	bl	d89b8 <finite>
   d7a9c:	4680      	mov	r8, r0
   d7a9e:	2800      	cmp	r0, #0
   d7aa0:	d061      	beq.n	d7b66 <pow+0x1a6>
   d7aa2:	f04f 0800 	mov.w	r8, #0
   d7aa6:	f04f 0900 	mov.w	r9, #0
   d7aaa:	ec51 0b18 	vmov	r0, r1, d8
   d7aae:	4642      	mov	r2, r8
   d7ab0:	464b      	mov	r3, r9
   d7ab2:	f001 fcdd 	bl	d9470 <__aeabi_dcmpeq>
   d7ab6:	2800      	cmp	r0, #0
   d7ab8:	d0e1      	beq.n	d7a7e <pow+0xbe>
   d7aba:	ec47 6b10 	vmov	d0, r6, r7
   d7abe:	f000 ff7b 	bl	d89b8 <finite>
   d7ac2:	2800      	cmp	r0, #0
   d7ac4:	d0db      	beq.n	d7a7e <pow+0xbe>
   d7ac6:	ec45 4b10 	vmov	d0, r4, r5
   d7aca:	f000 ff75 	bl	d89b8 <finite>
   d7ace:	2800      	cmp	r0, #0
   d7ad0:	d0d5      	beq.n	d7a7e <pow+0xbe>
   d7ad2:	f99a 3000 	ldrsb.w	r3, [sl]
   d7ad6:	4a82      	ldr	r2, [pc, #520]	; (d7ce0 <pow+0x320>)
   d7ad8:	9201      	str	r2, [sp, #4]
   d7ada:	2104      	movs	r1, #4
   d7adc:	2200      	movs	r2, #0
   d7ade:	2b02      	cmp	r3, #2
   d7ae0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7ae4:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7ae8:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d7aec:	9100      	str	r1, [sp, #0]
   d7aee:	9208      	str	r2, [sp, #32]
   d7af0:	d003      	beq.n	d7afa <pow+0x13a>
   d7af2:	4668      	mov	r0, sp
   d7af4:	f000 ff68 	bl	d89c8 <matherr>
   d7af8:	b970      	cbnz	r0, d7b18 <pow+0x158>
   d7afa:	f7fe fb9b 	bl	d6234 <__errno>
   d7afe:	2322      	movs	r3, #34	; 0x22
   d7b00:	6003      	str	r3, [r0, #0]
   d7b02:	e009      	b.n	d7b18 <pow+0x158>
   d7b04:	ed9f 7b70 	vldr	d7, [pc, #448]	; d7cc8 <pow+0x308>
   d7b08:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7b0c:	4668      	mov	r0, sp
   d7b0e:	f000 ff5b 	bl	d89c8 <matherr>
   d7b12:	2800      	cmp	r0, #0
   d7b14:	f000 808e 	beq.w	d7c34 <pow+0x274>
   d7b18:	9b08      	ldr	r3, [sp, #32]
   d7b1a:	b11b      	cbz	r3, d7b24 <pow+0x164>
   d7b1c:	f7fe fb8a 	bl	d6234 <__errno>
   d7b20:	9b08      	ldr	r3, [sp, #32]
   d7b22:	6003      	str	r3, [r0, #0]
   d7b24:	ed9d 0b06 	vldr	d0, [sp, #24]
   d7b28:	b00b      	add	sp, #44	; 0x2c
   d7b2a:	ecbd 8b02 	vpop	{d8}
   d7b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7b32:	2200      	movs	r2, #0
   d7b34:	2300      	movs	r3, #0
   d7b36:	4620      	mov	r0, r4
   d7b38:	4629      	mov	r1, r5
   d7b3a:	f001 fc99 	bl	d9470 <__aeabi_dcmpeq>
   d7b3e:	2800      	cmp	r0, #0
   d7b40:	d09d      	beq.n	d7a7e <pow+0xbe>
   d7b42:	ed9f 0b63 	vldr	d0, [pc, #396]	; d7cd0 <pow+0x310>
   d7b46:	4b66      	ldr	r3, [pc, #408]	; (d7ce0 <pow+0x320>)
   d7b48:	f8cd b020 	str.w	fp, [sp, #32]
   d7b4c:	2201      	movs	r2, #1
   d7b4e:	f1b8 0f02 	cmp.w	r8, #2
   d7b52:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7b56:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7b5a:	ed8d 0b06 	vstr	d0, [sp, #24]
   d7b5e:	e88d 000c 	stmia.w	sp, {r2, r3}
   d7b62:	d1d3      	bne.n	d7b0c <pow+0x14c>
   d7b64:	e78f      	b.n	d7a86 <pow+0xc6>
   d7b66:	ec47 6b10 	vmov	d0, r6, r7
   d7b6a:	f000 ff25 	bl	d89b8 <finite>
   d7b6e:	2800      	cmp	r0, #0
   d7b70:	d097      	beq.n	d7aa2 <pow+0xe2>
   d7b72:	ec45 4b10 	vmov	d0, r4, r5
   d7b76:	f000 ff1f 	bl	d89b8 <finite>
   d7b7a:	2800      	cmp	r0, #0
   d7b7c:	d091      	beq.n	d7aa2 <pow+0xe2>
   d7b7e:	ec53 2b18 	vmov	r2, r3, d8
   d7b82:	ee18 0a10 	vmov	r0, s16
   d7b86:	4619      	mov	r1, r3
   d7b88:	f001 fca4 	bl	d94d4 <__aeabi_dcmpun>
   d7b8c:	2800      	cmp	r0, #0
   d7b8e:	d17c      	bne.n	d7c8a <pow+0x2ca>
   d7b90:	2303      	movs	r3, #3
   d7b92:	f99a 8000 	ldrsb.w	r8, [sl]
   d7b96:	9300      	str	r3, [sp, #0]
   d7b98:	4b51      	ldr	r3, [pc, #324]	; (d7ce0 <pow+0x320>)
   d7b9a:	9008      	str	r0, [sp, #32]
   d7b9c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7ba0:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7ba4:	9301      	str	r3, [sp, #4]
   d7ba6:	f1b8 0f00 	cmp.w	r8, #0
   d7baa:	d148      	bne.n	d7c3e <pow+0x27e>
   d7bac:	f8df 9144 	ldr.w	r9, [pc, #324]	; d7cf4 <pow+0x334>
   d7bb0:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d7bb4:	2200      	movs	r2, #0
   d7bb6:	2300      	movs	r3, #0
   d7bb8:	4630      	mov	r0, r6
   d7bba:	4639      	mov	r1, r7
   d7bbc:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d7bc0:	f001 fc60 	bl	d9484 <__aeabi_dcmplt>
   d7bc4:	2800      	cmp	r0, #0
   d7bc6:	d094      	beq.n	d7af2 <pow+0x132>
   d7bc8:	2200      	movs	r2, #0
   d7bca:	4b46      	ldr	r3, [pc, #280]	; (d7ce4 <pow+0x324>)
   d7bcc:	4620      	mov	r0, r4
   d7bce:	4629      	mov	r1, r5
   d7bd0:	f001 f9e6 	bl	d8fa0 <__aeabi_dmul>
   d7bd4:	4604      	mov	r4, r0
   d7bd6:	460d      	mov	r5, r1
   d7bd8:	ec45 4b10 	vmov	d0, r4, r5
   d7bdc:	f000 ff00 	bl	d89e0 <rint>
   d7be0:	4620      	mov	r0, r4
   d7be2:	ec53 2b10 	vmov	r2, r3, d0
   d7be6:	4629      	mov	r1, r5
   d7be8:	f001 fc42 	bl	d9470 <__aeabi_dcmpeq>
   d7bec:	2800      	cmp	r0, #0
   d7bee:	d149      	bne.n	d7c84 <pow+0x2c4>
   d7bf0:	4b3d      	ldr	r3, [pc, #244]	; (d7ce8 <pow+0x328>)
   d7bf2:	f99a 8000 	ldrsb.w	r8, [sl]
   d7bf6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7bfa:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d7bfe:	f1b8 0f02 	cmp.w	r8, #2
   d7c02:	f47f af76 	bne.w	d7af2 <pow+0x132>
   d7c06:	e778      	b.n	d7afa <pow+0x13a>
   d7c08:	4a35      	ldr	r2, [pc, #212]	; (d7ce0 <pow+0x320>)
   d7c0a:	f99a 3000 	ldrsb.w	r3, [sl]
   d7c0e:	f8cd b020 	str.w	fp, [sp, #32]
   d7c12:	2101      	movs	r1, #1
   d7c14:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7c18:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7c1c:	e88d 0006 	stmia.w	sp, {r1, r2}
   d7c20:	2b00      	cmp	r3, #0
   d7c22:	f43f af6f 	beq.w	d7b04 <pow+0x144>
   d7c26:	4931      	ldr	r1, [pc, #196]	; (d7cec <pow+0x32c>)
   d7c28:	2000      	movs	r0, #0
   d7c2a:	2b02      	cmp	r3, #2
   d7c2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d7c30:	f47f af6c 	bne.w	d7b0c <pow+0x14c>
   d7c34:	f7fe fafe 	bl	d6234 <__errno>
   d7c38:	2321      	movs	r3, #33	; 0x21
   d7c3a:	6003      	str	r3, [r0, #0]
   d7c3c:	e76c      	b.n	d7b18 <pow+0x158>
   d7c3e:	ed9f 7b26 	vldr	d7, [pc, #152]	; d7cd8 <pow+0x318>
   d7c42:	2200      	movs	r2, #0
   d7c44:	2300      	movs	r3, #0
   d7c46:	4630      	mov	r0, r6
   d7c48:	4639      	mov	r1, r7
   d7c4a:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7c4e:	f001 fc19 	bl	d9484 <__aeabi_dcmplt>
   d7c52:	2800      	cmp	r0, #0
   d7c54:	d0d3      	beq.n	d7bfe <pow+0x23e>
   d7c56:	2200      	movs	r2, #0
   d7c58:	4b22      	ldr	r3, [pc, #136]	; (d7ce4 <pow+0x324>)
   d7c5a:	4620      	mov	r0, r4
   d7c5c:	4629      	mov	r1, r5
   d7c5e:	f001 f99f 	bl	d8fa0 <__aeabi_dmul>
   d7c62:	4604      	mov	r4, r0
   d7c64:	460d      	mov	r5, r1
   d7c66:	ec45 4b10 	vmov	d0, r4, r5
   d7c6a:	f000 feb9 	bl	d89e0 <rint>
   d7c6e:	4620      	mov	r0, r4
   d7c70:	ec53 2b10 	vmov	r2, r3, d0
   d7c74:	4629      	mov	r1, r5
   d7c76:	f001 fbfb 	bl	d9470 <__aeabi_dcmpeq>
   d7c7a:	b918      	cbnz	r0, d7c84 <pow+0x2c4>
   d7c7c:	4b1b      	ldr	r3, [pc, #108]	; (d7cec <pow+0x32c>)
   d7c7e:	2200      	movs	r2, #0
   d7c80:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d7c84:	f99a 8000 	ldrsb.w	r8, [sl]
   d7c88:	e7b9      	b.n	d7bfe <pow+0x23e>
   d7c8a:	4b15      	ldr	r3, [pc, #84]	; (d7ce0 <pow+0x320>)
   d7c8c:	f99a 9000 	ldrsb.w	r9, [sl]
   d7c90:	f8cd 8020 	str.w	r8, [sp, #32]
   d7c94:	2201      	movs	r2, #1
   d7c96:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7c9a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7c9e:	e88d 000c 	stmia.w	sp, {r2, r3}
   d7ca2:	f1b9 0f00 	cmp.w	r9, #0
   d7ca6:	f43f af2d 	beq.w	d7b04 <pow+0x144>
   d7caa:	2200      	movs	r2, #0
   d7cac:	2300      	movs	r3, #0
   d7cae:	4610      	mov	r0, r2
   d7cb0:	4619      	mov	r1, r3
   d7cb2:	f001 fa9f 	bl	d91f4 <__aeabi_ddiv>
   d7cb6:	f1b9 0f02 	cmp.w	r9, #2
   d7cba:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d7cbe:	d0b9      	beq.n	d7c34 <pow+0x274>
   d7cc0:	e724      	b.n	d7b0c <pow+0x14c>
   d7cc2:	bf00      	nop
   d7cc4:	f3af 8000 	nop.w
	...
   d7cd4:	3ff00000 	.word	0x3ff00000
   d7cd8:	00000000 	.word	0x00000000
   d7cdc:	7ff00000 	.word	0x7ff00000
   d7ce0:	000d9e6c 	.word	0x000d9e6c
   d7ce4:	3fe00000 	.word	0x3fe00000
   d7ce8:	c7efffff 	.word	0xc7efffff
   d7cec:	fff00000 	.word	0xfff00000
   d7cf0:	2003e26c 	.word	0x2003e26c
   d7cf4:	47efffff 	.word	0x47efffff

000d7cf8 <__ieee754_pow>:
   d7cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7cfc:	ec51 0b11 	vmov	r0, r1, d1
   d7d00:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d7d04:	ea58 0400 	orrs.w	r4, r8, r0
   d7d08:	b093      	sub	sp, #76	; 0x4c
   d7d0a:	d03c      	beq.n	d7d86 <__ieee754_pow+0x8e>
   d7d0c:	ec53 2b10 	vmov	r2, r3, d0
   d7d10:	4e6d      	ldr	r6, [pc, #436]	; (d7ec8 <__ieee754_pow+0x1d0>)
   d7d12:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d7d16:	42b4      	cmp	r4, r6
   d7d18:	ee10 aa10 	vmov	sl, s0
   d7d1c:	461d      	mov	r5, r3
   d7d1e:	dc2b      	bgt.n	d7d78 <__ieee754_pow+0x80>
   d7d20:	4689      	mov	r9, r1
   d7d22:	ee11 ea10 	vmov	lr, s2
   d7d26:	d026      	beq.n	d7d76 <__ieee754_pow+0x7e>
   d7d28:	45b0      	cmp	r8, r6
   d7d2a:	dc25      	bgt.n	d7d78 <__ieee754_pow+0x80>
   d7d2c:	4e66      	ldr	r6, [pc, #408]	; (d7ec8 <__ieee754_pow+0x1d0>)
   d7d2e:	45b0      	cmp	r8, r6
   d7d30:	d077      	beq.n	d7e22 <__ieee754_pow+0x12a>
   d7d32:	2d00      	cmp	r5, #0
   d7d34:	4616      	mov	r6, r2
   d7d36:	461f      	mov	r7, r3
   d7d38:	e9cd 0100 	strd	r0, r1, [sp]
   d7d3c:	db75      	blt.n	d7e2a <__ieee754_pow+0x132>
   d7d3e:	f04f 0b00 	mov.w	fp, #0
   d7d42:	f1be 0f00 	cmp.w	lr, #0
   d7d46:	d12d      	bne.n	d7da4 <__ieee754_pow+0xac>
   d7d48:	4b5f      	ldr	r3, [pc, #380]	; (d7ec8 <__ieee754_pow+0x1d0>)
   d7d4a:	4598      	cmp	r8, r3
   d7d4c:	f000 8089 	beq.w	d7e62 <__ieee754_pow+0x16a>
   d7d50:	4b5e      	ldr	r3, [pc, #376]	; (d7ecc <__ieee754_pow+0x1d4>)
   d7d52:	4598      	cmp	r8, r3
   d7d54:	d05e      	beq.n	d7e14 <__ieee754_pow+0x11c>
   d7d56:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d7d5a:	f000 83de 	beq.w	d851a <__ieee754_pow+0x822>
   d7d5e:	4b5c      	ldr	r3, [pc, #368]	; (d7ed0 <__ieee754_pow+0x1d8>)
   d7d60:	4599      	cmp	r9, r3
   d7d62:	d11f      	bne.n	d7da4 <__ieee754_pow+0xac>
   d7d64:	2d00      	cmp	r5, #0
   d7d66:	db1d      	blt.n	d7da4 <__ieee754_pow+0xac>
   d7d68:	ec47 6b10 	vmov	d0, r6, r7
   d7d6c:	b013      	add	sp, #76	; 0x4c
   d7d6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7d72:	f000 bd49 	b.w	d8808 <__ieee754_sqrt>
   d7d76:	b15a      	cbz	r2, d7d90 <__ieee754_pow+0x98>
   d7d78:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d7d7c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d7d80:	ea54 030a 	orrs.w	r3, r4, sl
   d7d84:	d106      	bne.n	d7d94 <__ieee754_pow+0x9c>
   d7d86:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d7eb0 <__ieee754_pow+0x1b8>
   d7d8a:	b013      	add	sp, #76	; 0x4c
   d7d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7d90:	45a0      	cmp	r8, r4
   d7d92:	ddcb      	ble.n	d7d2c <__ieee754_pow+0x34>
   d7d94:	484f      	ldr	r0, [pc, #316]	; (d7ed4 <__ieee754_pow+0x1dc>)
   d7d96:	b013      	add	sp, #76	; 0x4c
   d7d98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7d9c:	f000 be18 	b.w	d89d0 <nan>
   d7da0:	f04f 0b00 	mov.w	fp, #0
   d7da4:	ec47 6b10 	vmov	d0, r6, r7
   d7da8:	f000 fdfe 	bl	d89a8 <fabs>
   d7dac:	ec51 0b10 	vmov	r0, r1, d0
   d7db0:	f1ba 0f00 	cmp.w	sl, #0
   d7db4:	d01e      	beq.n	d7df4 <__ieee754_pow+0xfc>
   d7db6:	0fed      	lsrs	r5, r5, #31
   d7db8:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   d7dbc:	ea5b 030a 	orrs.w	r3, fp, sl
   d7dc0:	d063      	beq.n	d7e8a <__ieee754_pow+0x192>
   d7dc2:	4b45      	ldr	r3, [pc, #276]	; (d7ed8 <__ieee754_pow+0x1e0>)
   d7dc4:	4598      	cmp	r8, r3
   d7dc6:	f340 808d 	ble.w	d7ee4 <__ieee754_pow+0x1ec>
   d7dca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d7dce:	4598      	cmp	r8, r3
   d7dd0:	f340 8438 	ble.w	d8644 <__ieee754_pow+0x94c>
   d7dd4:	4b41      	ldr	r3, [pc, #260]	; (d7edc <__ieee754_pow+0x1e4>)
   d7dd6:	429c      	cmp	r4, r3
   d7dd8:	dd62      	ble.n	d7ea0 <__ieee754_pow+0x1a8>
   d7dda:	f1b9 0f00 	cmp.w	r9, #0
   d7dde:	dd62      	ble.n	d7ea6 <__ieee754_pow+0x1ae>
   d7de0:	a335      	add	r3, pc, #212	; (adr r3, d7eb8 <__ieee754_pow+0x1c0>)
   d7de2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7de6:	4610      	mov	r0, r2
   d7de8:	4619      	mov	r1, r3
   d7dea:	f001 f8d9 	bl	d8fa0 <__aeabi_dmul>
   d7dee:	ec41 0b10 	vmov	d0, r0, r1
   d7df2:	e7ca      	b.n	d7d8a <__ieee754_pow+0x92>
   d7df4:	b124      	cbz	r4, d7e00 <__ieee754_pow+0x108>
   d7df6:	4b35      	ldr	r3, [pc, #212]	; (d7ecc <__ieee754_pow+0x1d4>)
   d7df8:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d7dfc:	429a      	cmp	r2, r3
   d7dfe:	d1da      	bne.n	d7db6 <__ieee754_pow+0xbe>
   d7e00:	f1b9 0f00 	cmp.w	r9, #0
   d7e04:	f2c0 83cb 	blt.w	d859e <__ieee754_pow+0x8a6>
   d7e08:	2d00      	cmp	r5, #0
   d7e0a:	f2c0 8374 	blt.w	d84f6 <__ieee754_pow+0x7fe>
   d7e0e:	ec41 0b10 	vmov	d0, r0, r1
   d7e12:	e7ba      	b.n	d7d8a <__ieee754_pow+0x92>
   d7e14:	f1b9 0f00 	cmp.w	r9, #0
   d7e18:	f2c0 847a 	blt.w	d8710 <__ieee754_pow+0xa18>
   d7e1c:	ec47 6b10 	vmov	d0, r6, r7
   d7e20:	e7b3      	b.n	d7d8a <__ieee754_pow+0x92>
   d7e22:	f1be 0f00 	cmp.w	lr, #0
   d7e26:	d084      	beq.n	d7d32 <__ieee754_pow+0x3a>
   d7e28:	e7a6      	b.n	d7d78 <__ieee754_pow+0x80>
   d7e2a:	4b2d      	ldr	r3, [pc, #180]	; (d7ee0 <__ieee754_pow+0x1e8>)
   d7e2c:	4598      	cmp	r8, r3
   d7e2e:	dc29      	bgt.n	d7e84 <__ieee754_pow+0x18c>
   d7e30:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d7e34:	4598      	cmp	r8, r3
   d7e36:	dd82      	ble.n	d7d3e <__ieee754_pow+0x46>
   d7e38:	ea4f 5328 	mov.w	r3, r8, asr #20
   d7e3c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d7e40:	2b14      	cmp	r3, #20
   d7e42:	f340 847f 	ble.w	d8744 <__ieee754_pow+0xa4c>
   d7e46:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d7e4a:	fa2e f203 	lsr.w	r2, lr, r3
   d7e4e:	fa02 f303 	lsl.w	r3, r2, r3
   d7e52:	459e      	cmp	lr, r3
   d7e54:	f47f af73 	bne.w	d7d3e <__ieee754_pow+0x46>
   d7e58:	f002 0201 	and.w	r2, r2, #1
   d7e5c:	f1c2 0b02 	rsb	fp, r2, #2
   d7e60:	e76f      	b.n	d7d42 <__ieee754_pow+0x4a>
   d7e62:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d7e66:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d7e6a:	ea53 030a 	orrs.w	r3, r3, sl
   d7e6e:	d08a      	beq.n	d7d86 <__ieee754_pow+0x8e>
   d7e70:	4b1a      	ldr	r3, [pc, #104]	; (d7edc <__ieee754_pow+0x1e4>)
   d7e72:	429c      	cmp	r4, r3
   d7e74:	f340 8385 	ble.w	d8582 <__ieee754_pow+0x88a>
   d7e78:	f1b9 0f00 	cmp.w	r9, #0
   d7e7c:	db13      	blt.n	d7ea6 <__ieee754_pow+0x1ae>
   d7e7e:	ed9d 0b00 	vldr	d0, [sp]
   d7e82:	e782      	b.n	d7d8a <__ieee754_pow+0x92>
   d7e84:	f04f 0b02 	mov.w	fp, #2
   d7e88:	e75b      	b.n	d7d42 <__ieee754_pow+0x4a>
   d7e8a:	4632      	mov	r2, r6
   d7e8c:	463b      	mov	r3, r7
   d7e8e:	4610      	mov	r0, r2
   d7e90:	4619      	mov	r1, r3
   d7e92:	f000 fed1 	bl	d8c38 <__aeabi_dsub>
   d7e96:	4602      	mov	r2, r0
   d7e98:	460b      	mov	r3, r1
   d7e9a:	f001 f9ab 	bl	d91f4 <__aeabi_ddiv>
   d7e9e:	e7b6      	b.n	d7e0e <__ieee754_pow+0x116>
   d7ea0:	f1b9 0f00 	cmp.w	r9, #0
   d7ea4:	db9c      	blt.n	d7de0 <__ieee754_pow+0xe8>
   d7ea6:	ed9f 0b06 	vldr	d0, [pc, #24]	; d7ec0 <__ieee754_pow+0x1c8>
   d7eaa:	e76e      	b.n	d7d8a <__ieee754_pow+0x92>
   d7eac:	f3af 8000 	nop.w
   d7eb0:	00000000 	.word	0x00000000
   d7eb4:	3ff00000 	.word	0x3ff00000
   d7eb8:	8800759c 	.word	0x8800759c
   d7ebc:	7e37e43c 	.word	0x7e37e43c
	...
   d7ec8:	7ff00000 	.word	0x7ff00000
   d7ecc:	3ff00000 	.word	0x3ff00000
   d7ed0:	3fe00000 	.word	0x3fe00000
   d7ed4:	000d9e70 	.word	0x000d9e70
   d7ed8:	41e00000 	.word	0x41e00000
   d7edc:	3fefffff 	.word	0x3fefffff
   d7ee0:	433fffff 	.word	0x433fffff
   d7ee4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d7ee8:	f04f 0200 	mov.w	r2, #0
   d7eec:	da05      	bge.n	d7efa <__ieee754_pow+0x202>
   d7eee:	4bd6      	ldr	r3, [pc, #856]	; (d8248 <__ieee754_pow+0x550>)
   d7ef0:	f001 f856 	bl	d8fa0 <__aeabi_dmul>
   d7ef4:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d7ef8:	460c      	mov	r4, r1
   d7efa:	1523      	asrs	r3, r4, #20
   d7efc:	4ed3      	ldr	r6, [pc, #844]	; (d824c <__ieee754_pow+0x554>)
   d7efe:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d7f02:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d7f06:	4413      	add	r3, r2
   d7f08:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d7f0c:	42b4      	cmp	r4, r6
   d7f0e:	461a      	mov	r2, r3
   d7f10:	930d      	str	r3, [sp, #52]	; 0x34
   d7f12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d7f16:	f340 8349 	ble.w	d85ac <__ieee754_pow+0x8b4>
   d7f1a:	4bcd      	ldr	r3, [pc, #820]	; (d8250 <__ieee754_pow+0x558>)
   d7f1c:	429c      	cmp	r4, r3
   d7f1e:	f340 842d 	ble.w	d877c <__ieee754_pow+0xa84>
   d7f22:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d81f0 <__ieee754_pow+0x4f8>
   d7f26:	ed8d 7b08 	vstr	d7, [sp, #32]
   d7f2a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d7f2e:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d81f8 <__ieee754_pow+0x500>
   d7f32:	4613      	mov	r3, r2
   d7f34:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7f38:	3301      	adds	r3, #1
   d7f3a:	930d      	str	r3, [sp, #52]	; 0x34
   d7f3c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d7f40:	f04f 0800 	mov.w	r8, #0
   d7f44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7f48:	4629      	mov	r1, r5
   d7f4a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d7f4e:	f000 fe73 	bl	d8c38 <__aeabi_dsub>
   d7f52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7f56:	4606      	mov	r6, r0
   d7f58:	460f      	mov	r7, r1
   d7f5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d7f5e:	f000 fe6d 	bl	d8c3c <__adddf3>
   d7f62:	4602      	mov	r2, r0
   d7f64:	460b      	mov	r3, r1
   d7f66:	2000      	movs	r0, #0
   d7f68:	49ba      	ldr	r1, [pc, #744]	; (d8254 <__ieee754_pow+0x55c>)
   d7f6a:	f001 f943 	bl	d91f4 <__aeabi_ddiv>
   d7f6e:	4603      	mov	r3, r0
   d7f70:	460c      	mov	r4, r1
   d7f72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d7f76:	4602      	mov	r2, r0
   d7f78:	460b      	mov	r3, r1
   d7f7a:	4630      	mov	r0, r6
   d7f7c:	4639      	mov	r1, r7
   d7f7e:	f001 f80f 	bl	d8fa0 <__aeabi_dmul>
   d7f82:	106b      	asrs	r3, r5, #1
   d7f84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d7f88:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d7f8c:	eb03 0508 	add.w	r5, r3, r8
   d7f90:	460a      	mov	r2, r1
   d7f92:	2300      	movs	r3, #0
   d7f94:	4601      	mov	r1, r0
   d7f96:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d7f9a:	9302      	str	r3, [sp, #8]
   d7f9c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d7fa0:	2400      	movs	r4, #0
   d7fa2:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d7fa6:	462b      	mov	r3, r5
   d7fa8:	4622      	mov	r2, r4
   d7faa:	4640      	mov	r0, r8
   d7fac:	4649      	mov	r1, r9
   d7fae:	f000 fff7 	bl	d8fa0 <__aeabi_dmul>
   d7fb2:	4602      	mov	r2, r0
   d7fb4:	460b      	mov	r3, r1
   d7fb6:	4630      	mov	r0, r6
   d7fb8:	4639      	mov	r1, r7
   d7fba:	f000 fe3d 	bl	d8c38 <__aeabi_dsub>
   d7fbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7fc2:	4606      	mov	r6, r0
   d7fc4:	460f      	mov	r7, r1
   d7fc6:	4620      	mov	r0, r4
   d7fc8:	4629      	mov	r1, r5
   d7fca:	f000 fe35 	bl	d8c38 <__aeabi_dsub>
   d7fce:	4602      	mov	r2, r0
   d7fd0:	460b      	mov	r3, r1
   d7fd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d7fd6:	f000 fe2f 	bl	d8c38 <__aeabi_dsub>
   d7fda:	4642      	mov	r2, r8
   d7fdc:	464b      	mov	r3, r9
   d7fde:	f000 ffdf 	bl	d8fa0 <__aeabi_dmul>
   d7fe2:	4602      	mov	r2, r0
   d7fe4:	460b      	mov	r3, r1
   d7fe6:	4630      	mov	r0, r6
   d7fe8:	4639      	mov	r1, r7
   d7fea:	f000 fe25 	bl	d8c38 <__aeabi_dsub>
   d7fee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d7ff2:	f000 ffd5 	bl	d8fa0 <__aeabi_dmul>
   d7ff6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d7ffa:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d7ffe:	4622      	mov	r2, r4
   d8000:	462b      	mov	r3, r5
   d8002:	4620      	mov	r0, r4
   d8004:	4629      	mov	r1, r5
   d8006:	f000 ffcb 	bl	d8fa0 <__aeabi_dmul>
   d800a:	a37d      	add	r3, pc, #500	; (adr r3, d8200 <__ieee754_pow+0x508>)
   d800c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8010:	4604      	mov	r4, r0
   d8012:	460d      	mov	r5, r1
   d8014:	f000 ffc4 	bl	d8fa0 <__aeabi_dmul>
   d8018:	a37b      	add	r3, pc, #492	; (adr r3, d8208 <__ieee754_pow+0x510>)
   d801a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d801e:	f000 fe0d 	bl	d8c3c <__adddf3>
   d8022:	4622      	mov	r2, r4
   d8024:	462b      	mov	r3, r5
   d8026:	f000 ffbb 	bl	d8fa0 <__aeabi_dmul>
   d802a:	a379      	add	r3, pc, #484	; (adr r3, d8210 <__ieee754_pow+0x518>)
   d802c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8030:	f000 fe04 	bl	d8c3c <__adddf3>
   d8034:	4622      	mov	r2, r4
   d8036:	462b      	mov	r3, r5
   d8038:	f000 ffb2 	bl	d8fa0 <__aeabi_dmul>
   d803c:	a376      	add	r3, pc, #472	; (adr r3, d8218 <__ieee754_pow+0x520>)
   d803e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8042:	f000 fdfb 	bl	d8c3c <__adddf3>
   d8046:	4622      	mov	r2, r4
   d8048:	462b      	mov	r3, r5
   d804a:	f000 ffa9 	bl	d8fa0 <__aeabi_dmul>
   d804e:	a374      	add	r3, pc, #464	; (adr r3, d8220 <__ieee754_pow+0x528>)
   d8050:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8054:	f000 fdf2 	bl	d8c3c <__adddf3>
   d8058:	4622      	mov	r2, r4
   d805a:	462b      	mov	r3, r5
   d805c:	f000 ffa0 	bl	d8fa0 <__aeabi_dmul>
   d8060:	a371      	add	r3, pc, #452	; (adr r3, d8228 <__ieee754_pow+0x530>)
   d8062:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8066:	f000 fde9 	bl	d8c3c <__adddf3>
   d806a:	4622      	mov	r2, r4
   d806c:	4606      	mov	r6, r0
   d806e:	460f      	mov	r7, r1
   d8070:	462b      	mov	r3, r5
   d8072:	4620      	mov	r0, r4
   d8074:	4629      	mov	r1, r5
   d8076:	f000 ff93 	bl	d8fa0 <__aeabi_dmul>
   d807a:	4602      	mov	r2, r0
   d807c:	460b      	mov	r3, r1
   d807e:	4630      	mov	r0, r6
   d8080:	4639      	mov	r1, r7
   d8082:	f000 ff8d 	bl	d8fa0 <__aeabi_dmul>
   d8086:	4642      	mov	r2, r8
   d8088:	4604      	mov	r4, r0
   d808a:	460d      	mov	r5, r1
   d808c:	464b      	mov	r3, r9
   d808e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8092:	f000 fdd3 	bl	d8c3c <__adddf3>
   d8096:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d809a:	f000 ff81 	bl	d8fa0 <__aeabi_dmul>
   d809e:	4622      	mov	r2, r4
   d80a0:	462b      	mov	r3, r5
   d80a2:	f000 fdcb 	bl	d8c3c <__adddf3>
   d80a6:	4642      	mov	r2, r8
   d80a8:	4606      	mov	r6, r0
   d80aa:	460f      	mov	r7, r1
   d80ac:	464b      	mov	r3, r9
   d80ae:	4640      	mov	r0, r8
   d80b0:	4649      	mov	r1, r9
   d80b2:	f000 ff75 	bl	d8fa0 <__aeabi_dmul>
   d80b6:	2200      	movs	r2, #0
   d80b8:	4b67      	ldr	r3, [pc, #412]	; (d8258 <__ieee754_pow+0x560>)
   d80ba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d80be:	f000 fdbd 	bl	d8c3c <__adddf3>
   d80c2:	4632      	mov	r2, r6
   d80c4:	463b      	mov	r3, r7
   d80c6:	f000 fdb9 	bl	d8c3c <__adddf3>
   d80ca:	9802      	ldr	r0, [sp, #8]
   d80cc:	460d      	mov	r5, r1
   d80ce:	4604      	mov	r4, r0
   d80d0:	4622      	mov	r2, r4
   d80d2:	462b      	mov	r3, r5
   d80d4:	4640      	mov	r0, r8
   d80d6:	4649      	mov	r1, r9
   d80d8:	f000 ff62 	bl	d8fa0 <__aeabi_dmul>
   d80dc:	2200      	movs	r2, #0
   d80de:	4680      	mov	r8, r0
   d80e0:	4689      	mov	r9, r1
   d80e2:	4b5d      	ldr	r3, [pc, #372]	; (d8258 <__ieee754_pow+0x560>)
   d80e4:	4620      	mov	r0, r4
   d80e6:	4629      	mov	r1, r5
   d80e8:	f000 fda6 	bl	d8c38 <__aeabi_dsub>
   d80ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d80f0:	f000 fda2 	bl	d8c38 <__aeabi_dsub>
   d80f4:	4602      	mov	r2, r0
   d80f6:	460b      	mov	r3, r1
   d80f8:	4630      	mov	r0, r6
   d80fa:	4639      	mov	r1, r7
   d80fc:	f000 fd9c 	bl	d8c38 <__aeabi_dsub>
   d8100:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d8104:	f000 ff4c 	bl	d8fa0 <__aeabi_dmul>
   d8108:	4622      	mov	r2, r4
   d810a:	4606      	mov	r6, r0
   d810c:	460f      	mov	r7, r1
   d810e:	462b      	mov	r3, r5
   d8110:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d8114:	f000 ff44 	bl	d8fa0 <__aeabi_dmul>
   d8118:	4602      	mov	r2, r0
   d811a:	460b      	mov	r3, r1
   d811c:	4630      	mov	r0, r6
   d811e:	4639      	mov	r1, r7
   d8120:	f000 fd8c 	bl	d8c3c <__adddf3>
   d8124:	4606      	mov	r6, r0
   d8126:	460f      	mov	r7, r1
   d8128:	4602      	mov	r2, r0
   d812a:	460b      	mov	r3, r1
   d812c:	4640      	mov	r0, r8
   d812e:	4649      	mov	r1, r9
   d8130:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d8134:	f000 fd82 	bl	d8c3c <__adddf3>
   d8138:	9802      	ldr	r0, [sp, #8]
   d813a:	a33d      	add	r3, pc, #244	; (adr r3, d8230 <__ieee754_pow+0x538>)
   d813c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8140:	4604      	mov	r4, r0
   d8142:	460d      	mov	r5, r1
   d8144:	f000 ff2c 	bl	d8fa0 <__aeabi_dmul>
   d8148:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d814c:	4680      	mov	r8, r0
   d814e:	4689      	mov	r9, r1
   d8150:	4620      	mov	r0, r4
   d8152:	4629      	mov	r1, r5
   d8154:	f000 fd70 	bl	d8c38 <__aeabi_dsub>
   d8158:	4602      	mov	r2, r0
   d815a:	460b      	mov	r3, r1
   d815c:	4630      	mov	r0, r6
   d815e:	4639      	mov	r1, r7
   d8160:	f000 fd6a 	bl	d8c38 <__aeabi_dsub>
   d8164:	a334      	add	r3, pc, #208	; (adr r3, d8238 <__ieee754_pow+0x540>)
   d8166:	e9d3 2300 	ldrd	r2, r3, [r3]
   d816a:	f000 ff19 	bl	d8fa0 <__aeabi_dmul>
   d816e:	a334      	add	r3, pc, #208	; (adr r3, d8240 <__ieee754_pow+0x548>)
   d8170:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8174:	4606      	mov	r6, r0
   d8176:	460f      	mov	r7, r1
   d8178:	4620      	mov	r0, r4
   d817a:	4629      	mov	r1, r5
   d817c:	f000 ff10 	bl	d8fa0 <__aeabi_dmul>
   d8180:	4602      	mov	r2, r0
   d8182:	460b      	mov	r3, r1
   d8184:	4630      	mov	r0, r6
   d8186:	4639      	mov	r1, r7
   d8188:	f000 fd58 	bl	d8c3c <__adddf3>
   d818c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d8190:	f000 fd54 	bl	d8c3c <__adddf3>
   d8194:	4606      	mov	r6, r0
   d8196:	980d      	ldr	r0, [sp, #52]	; 0x34
   d8198:	460f      	mov	r7, r1
   d819a:	f000 fe9b 	bl	d8ed4 <__aeabi_i2d>
   d819e:	4632      	mov	r2, r6
   d81a0:	4604      	mov	r4, r0
   d81a2:	460d      	mov	r5, r1
   d81a4:	463b      	mov	r3, r7
   d81a6:	4640      	mov	r0, r8
   d81a8:	4649      	mov	r1, r9
   d81aa:	f000 fd47 	bl	d8c3c <__adddf3>
   d81ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d81b2:	f000 fd43 	bl	d8c3c <__adddf3>
   d81b6:	4622      	mov	r2, r4
   d81b8:	462b      	mov	r3, r5
   d81ba:	f000 fd3f 	bl	d8c3c <__adddf3>
   d81be:	9802      	ldr	r0, [sp, #8]
   d81c0:	4622      	mov	r2, r4
   d81c2:	462b      	mov	r3, r5
   d81c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d81c8:	f000 fd36 	bl	d8c38 <__aeabi_dsub>
   d81cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d81d0:	f000 fd32 	bl	d8c38 <__aeabi_dsub>
   d81d4:	4642      	mov	r2, r8
   d81d6:	464b      	mov	r3, r9
   d81d8:	f000 fd2e 	bl	d8c38 <__aeabi_dsub>
   d81dc:	4602      	mov	r2, r0
   d81de:	460b      	mov	r3, r1
   d81e0:	4630      	mov	r0, r6
   d81e2:	4639      	mov	r1, r7
   d81e4:	f000 fd28 	bl	d8c38 <__aeabi_dsub>
   d81e8:	4680      	mov	r8, r0
   d81ea:	4689      	mov	r9, r1
   d81ec:	e036      	b.n	d825c <__ieee754_pow+0x564>
   d81ee:	bf00      	nop
	...
   d81fc:	3ff00000 	.word	0x3ff00000
   d8200:	4a454eef 	.word	0x4a454eef
   d8204:	3fca7e28 	.word	0x3fca7e28
   d8208:	93c9db65 	.word	0x93c9db65
   d820c:	3fcd864a 	.word	0x3fcd864a
   d8210:	a91d4101 	.word	0xa91d4101
   d8214:	3fd17460 	.word	0x3fd17460
   d8218:	518f264d 	.word	0x518f264d
   d821c:	3fd55555 	.word	0x3fd55555
   d8220:	db6fabff 	.word	0xdb6fabff
   d8224:	3fdb6db6 	.word	0x3fdb6db6
   d8228:	33333303 	.word	0x33333303
   d822c:	3fe33333 	.word	0x3fe33333
   d8230:	e0000000 	.word	0xe0000000
   d8234:	3feec709 	.word	0x3feec709
   d8238:	dc3a03fd 	.word	0xdc3a03fd
   d823c:	3feec709 	.word	0x3feec709
   d8240:	145b01f5 	.word	0x145b01f5
   d8244:	be3e2fe0 	.word	0xbe3e2fe0
   d8248:	43400000 	.word	0x43400000
   d824c:	0003988e 	.word	0x0003988e
   d8250:	000bb679 	.word	0x000bb679
   d8254:	3ff00000 	.word	0x3ff00000
   d8258:	40080000 	.word	0x40080000
   d825c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   d8260:	ea53 030a 	orrs.w	r3, r3, sl
   d8264:	f000 8188 	beq.w	d8578 <__ieee754_pow+0x880>
   d8268:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d85c8 <__ieee754_pow+0x8d0>
   d826c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8270:	e9dd ab00 	ldrd	sl, fp, [sp]
   d8274:	4653      	mov	r3, sl
   d8276:	465c      	mov	r4, fp
   d8278:	e9cd 3400 	strd	r3, r4, [sp]
   d827c:	2300      	movs	r3, #0
   d827e:	9300      	str	r3, [sp, #0]
   d8280:	e9dd 4500 	ldrd	r4, r5, [sp]
   d8284:	4650      	mov	r0, sl
   d8286:	4622      	mov	r2, r4
   d8288:	462b      	mov	r3, r5
   d828a:	4659      	mov	r1, fp
   d828c:	f000 fcd4 	bl	d8c38 <__aeabi_dsub>
   d8290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d8294:	f000 fe84 	bl	d8fa0 <__aeabi_dmul>
   d8298:	4652      	mov	r2, sl
   d829a:	4606      	mov	r6, r0
   d829c:	460f      	mov	r7, r1
   d829e:	465b      	mov	r3, fp
   d82a0:	4640      	mov	r0, r8
   d82a2:	4649      	mov	r1, r9
   d82a4:	f000 fe7c 	bl	d8fa0 <__aeabi_dmul>
   d82a8:	4602      	mov	r2, r0
   d82aa:	460b      	mov	r3, r1
   d82ac:	4630      	mov	r0, r6
   d82ae:	4639      	mov	r1, r7
   d82b0:	f000 fcc4 	bl	d8c3c <__adddf3>
   d82b4:	4622      	mov	r2, r4
   d82b6:	4680      	mov	r8, r0
   d82b8:	4689      	mov	r9, r1
   d82ba:	462b      	mov	r3, r5
   d82bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d82c0:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d82c4:	f000 fe6c 	bl	d8fa0 <__aeabi_dmul>
   d82c8:	460b      	mov	r3, r1
   d82ca:	4602      	mov	r2, r0
   d82cc:	4606      	mov	r6, r0
   d82ce:	460f      	mov	r7, r1
   d82d0:	4640      	mov	r0, r8
   d82d2:	4649      	mov	r1, r9
   d82d4:	f000 fcb2 	bl	d8c3c <__adddf3>
   d82d8:	4bd5      	ldr	r3, [pc, #852]	; (d8630 <__ieee754_pow+0x938>)
   d82da:	4299      	cmp	r1, r3
   d82dc:	4604      	mov	r4, r0
   d82de:	460d      	mov	r5, r1
   d82e0:	468a      	mov	sl, r1
   d82e2:	f340 8123 	ble.w	d852c <__ieee754_pow+0x834>
   d82e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d82ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d82ee:	4303      	orrs	r3, r0
   d82f0:	f040 8218 	bne.w	d8724 <__ieee754_pow+0xa2c>
   d82f4:	a3b6      	add	r3, pc, #728	; (adr r3, d85d0 <__ieee754_pow+0x8d8>)
   d82f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d82fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d82fe:	f000 fc9d 	bl	d8c3c <__adddf3>
   d8302:	4632      	mov	r2, r6
   d8304:	4680      	mov	r8, r0
   d8306:	4689      	mov	r9, r1
   d8308:	463b      	mov	r3, r7
   d830a:	4620      	mov	r0, r4
   d830c:	4629      	mov	r1, r5
   d830e:	f000 fc93 	bl	d8c38 <__aeabi_dsub>
   d8312:	4602      	mov	r2, r0
   d8314:	460b      	mov	r3, r1
   d8316:	4640      	mov	r0, r8
   d8318:	4649      	mov	r1, r9
   d831a:	f001 f8d1 	bl	d94c0 <__aeabi_dcmpgt>
   d831e:	2800      	cmp	r0, #0
   d8320:	f040 8200 	bne.w	d8724 <__ieee754_pow+0xa2c>
   d8324:	46a8      	mov	r8, r5
   d8326:	ea4f 5328 	mov.w	r3, r8, asr #20
   d832a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d832e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d8332:	fa42 f303 	asr.w	r3, r2, r3
   d8336:	4453      	add	r3, sl
   d8338:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d833c:	4dbd      	ldr	r5, [pc, #756]	; (d8634 <__ieee754_pow+0x93c>)
   d833e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d8342:	4115      	asrs	r5, r2
   d8344:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d8348:	2000      	movs	r0, #0
   d834a:	f1c2 0414 	rsb	r4, r2, #20
   d834e:	ea23 0105 	bic.w	r1, r3, r5
   d8352:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d8356:	f1ba 0f00 	cmp.w	sl, #0
   d835a:	4602      	mov	r2, r0
   d835c:	460b      	mov	r3, r1
   d835e:	fa4b fb04 	asr.w	fp, fp, r4
   d8362:	4630      	mov	r0, r6
   d8364:	4639      	mov	r1, r7
   d8366:	bfb8      	it	lt
   d8368:	f1cb 0b00 	rsblt	fp, fp, #0
   d836c:	f000 fc64 	bl	d8c38 <__aeabi_dsub>
   d8370:	4602      	mov	r2, r0
   d8372:	460b      	mov	r3, r1
   d8374:	4606      	mov	r6, r0
   d8376:	460f      	mov	r7, r1
   d8378:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d837c:	f000 fc5e 	bl	d8c3c <__adddf3>
   d8380:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d8384:	2400      	movs	r4, #0
   d8386:	a394      	add	r3, pc, #592	; (adr r3, d85d8 <__ieee754_pow+0x8e0>)
   d8388:	e9d3 2300 	ldrd	r2, r3, [r3]
   d838c:	4620      	mov	r0, r4
   d838e:	460d      	mov	r5, r1
   d8390:	f000 fe06 	bl	d8fa0 <__aeabi_dmul>
   d8394:	4632      	mov	r2, r6
   d8396:	4680      	mov	r8, r0
   d8398:	4689      	mov	r9, r1
   d839a:	463b      	mov	r3, r7
   d839c:	4620      	mov	r0, r4
   d839e:	4629      	mov	r1, r5
   d83a0:	f000 fc4a 	bl	d8c38 <__aeabi_dsub>
   d83a4:	4602      	mov	r2, r0
   d83a6:	460b      	mov	r3, r1
   d83a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d83ac:	f000 fc44 	bl	d8c38 <__aeabi_dsub>
   d83b0:	a38b      	add	r3, pc, #556	; (adr r3, d85e0 <__ieee754_pow+0x8e8>)
   d83b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83b6:	f000 fdf3 	bl	d8fa0 <__aeabi_dmul>
   d83ba:	a38b      	add	r3, pc, #556	; (adr r3, d85e8 <__ieee754_pow+0x8f0>)
   d83bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83c0:	4606      	mov	r6, r0
   d83c2:	460f      	mov	r7, r1
   d83c4:	4620      	mov	r0, r4
   d83c6:	4629      	mov	r1, r5
   d83c8:	f000 fdea 	bl	d8fa0 <__aeabi_dmul>
   d83cc:	4602      	mov	r2, r0
   d83ce:	460b      	mov	r3, r1
   d83d0:	4630      	mov	r0, r6
   d83d2:	4639      	mov	r1, r7
   d83d4:	f000 fc32 	bl	d8c3c <__adddf3>
   d83d8:	4606      	mov	r6, r0
   d83da:	460f      	mov	r7, r1
   d83dc:	4602      	mov	r2, r0
   d83de:	460b      	mov	r3, r1
   d83e0:	4640      	mov	r0, r8
   d83e2:	4649      	mov	r1, r9
   d83e4:	f000 fc2a 	bl	d8c3c <__adddf3>
   d83e8:	4642      	mov	r2, r8
   d83ea:	464b      	mov	r3, r9
   d83ec:	4604      	mov	r4, r0
   d83ee:	460d      	mov	r5, r1
   d83f0:	f000 fc22 	bl	d8c38 <__aeabi_dsub>
   d83f4:	4602      	mov	r2, r0
   d83f6:	460b      	mov	r3, r1
   d83f8:	4630      	mov	r0, r6
   d83fa:	4639      	mov	r1, r7
   d83fc:	f000 fc1c 	bl	d8c38 <__aeabi_dsub>
   d8400:	4622      	mov	r2, r4
   d8402:	4680      	mov	r8, r0
   d8404:	4689      	mov	r9, r1
   d8406:	462b      	mov	r3, r5
   d8408:	4620      	mov	r0, r4
   d840a:	4629      	mov	r1, r5
   d840c:	f000 fdc8 	bl	d8fa0 <__aeabi_dmul>
   d8410:	a377      	add	r3, pc, #476	; (adr r3, d85f0 <__ieee754_pow+0x8f8>)
   d8412:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8416:	4606      	mov	r6, r0
   d8418:	460f      	mov	r7, r1
   d841a:	f000 fdc1 	bl	d8fa0 <__aeabi_dmul>
   d841e:	a376      	add	r3, pc, #472	; (adr r3, d85f8 <__ieee754_pow+0x900>)
   d8420:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8424:	f000 fc08 	bl	d8c38 <__aeabi_dsub>
   d8428:	4632      	mov	r2, r6
   d842a:	463b      	mov	r3, r7
   d842c:	f000 fdb8 	bl	d8fa0 <__aeabi_dmul>
   d8430:	a373      	add	r3, pc, #460	; (adr r3, d8600 <__ieee754_pow+0x908>)
   d8432:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8436:	f000 fc01 	bl	d8c3c <__adddf3>
   d843a:	4632      	mov	r2, r6
   d843c:	463b      	mov	r3, r7
   d843e:	f000 fdaf 	bl	d8fa0 <__aeabi_dmul>
   d8442:	a371      	add	r3, pc, #452	; (adr r3, d8608 <__ieee754_pow+0x910>)
   d8444:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8448:	f000 fbf6 	bl	d8c38 <__aeabi_dsub>
   d844c:	4632      	mov	r2, r6
   d844e:	463b      	mov	r3, r7
   d8450:	f000 fda6 	bl	d8fa0 <__aeabi_dmul>
   d8454:	a36e      	add	r3, pc, #440	; (adr r3, d8610 <__ieee754_pow+0x918>)
   d8456:	e9d3 2300 	ldrd	r2, r3, [r3]
   d845a:	f000 fbef 	bl	d8c3c <__adddf3>
   d845e:	4632      	mov	r2, r6
   d8460:	463b      	mov	r3, r7
   d8462:	f000 fd9d 	bl	d8fa0 <__aeabi_dmul>
   d8466:	4602      	mov	r2, r0
   d8468:	460b      	mov	r3, r1
   d846a:	4620      	mov	r0, r4
   d846c:	4629      	mov	r1, r5
   d846e:	f000 fbe3 	bl	d8c38 <__aeabi_dsub>
   d8472:	4606      	mov	r6, r0
   d8474:	460f      	mov	r7, r1
   d8476:	4602      	mov	r2, r0
   d8478:	460b      	mov	r3, r1
   d847a:	4620      	mov	r0, r4
   d847c:	4629      	mov	r1, r5
   d847e:	f000 fd8f 	bl	d8fa0 <__aeabi_dmul>
   d8482:	2200      	movs	r2, #0
   d8484:	e9cd 0100 	strd	r0, r1, [sp]
   d8488:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d848c:	4630      	mov	r0, r6
   d848e:	4639      	mov	r1, r7
   d8490:	f000 fbd2 	bl	d8c38 <__aeabi_dsub>
   d8494:	4602      	mov	r2, r0
   d8496:	460b      	mov	r3, r1
   d8498:	e9dd 0100 	ldrd	r0, r1, [sp]
   d849c:	f000 feaa 	bl	d91f4 <__aeabi_ddiv>
   d84a0:	4642      	mov	r2, r8
   d84a2:	4606      	mov	r6, r0
   d84a4:	460f      	mov	r7, r1
   d84a6:	464b      	mov	r3, r9
   d84a8:	4620      	mov	r0, r4
   d84aa:	4629      	mov	r1, r5
   d84ac:	f000 fd78 	bl	d8fa0 <__aeabi_dmul>
   d84b0:	4642      	mov	r2, r8
   d84b2:	464b      	mov	r3, r9
   d84b4:	f000 fbc2 	bl	d8c3c <__adddf3>
   d84b8:	4602      	mov	r2, r0
   d84ba:	460b      	mov	r3, r1
   d84bc:	4630      	mov	r0, r6
   d84be:	4639      	mov	r1, r7
   d84c0:	f000 fbba 	bl	d8c38 <__aeabi_dsub>
   d84c4:	4622      	mov	r2, r4
   d84c6:	462b      	mov	r3, r5
   d84c8:	f000 fbb6 	bl	d8c38 <__aeabi_dsub>
   d84cc:	4602      	mov	r2, r0
   d84ce:	460b      	mov	r3, r1
   d84d0:	2000      	movs	r0, #0
   d84d2:	4959      	ldr	r1, [pc, #356]	; (d8638 <__ieee754_pow+0x940>)
   d84d4:	f000 fbb0 	bl	d8c38 <__aeabi_dsub>
   d84d8:	448a      	add	sl, r1
   d84da:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d84de:	4602      	mov	r2, r0
   d84e0:	460b      	mov	r3, r1
   d84e2:	f2c0 815b 	blt.w	d879c <__ieee754_pow+0xaa4>
   d84e6:	4651      	mov	r1, sl
   d84e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d84ec:	f000 fd58 	bl	d8fa0 <__aeabi_dmul>
   d84f0:	ec41 0b10 	vmov	d0, r0, r1
   d84f4:	e449      	b.n	d7d8a <__ieee754_pow+0x92>
   d84f6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d84fa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d84fe:	ea54 030b 	orrs.w	r3, r4, fp
   d8502:	f000 8137 	beq.w	d8774 <__ieee754_pow+0xa7c>
   d8506:	f1bb 0f01 	cmp.w	fp, #1
   d850a:	f47f ac80 	bne.w	d7e0e <__ieee754_pow+0x116>
   d850e:	4602      	mov	r2, r0
   d8510:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d8514:	ec43 2b10 	vmov	d0, r2, r3
   d8518:	e437      	b.n	d7d8a <__ieee754_pow+0x92>
   d851a:	4632      	mov	r2, r6
   d851c:	463b      	mov	r3, r7
   d851e:	4630      	mov	r0, r6
   d8520:	4639      	mov	r1, r7
   d8522:	f000 fd3d 	bl	d8fa0 <__aeabi_dmul>
   d8526:	ec41 0b10 	vmov	d0, r0, r1
   d852a:	e42e      	b.n	d7d8a <__ieee754_pow+0x92>
   d852c:	4b43      	ldr	r3, [pc, #268]	; (d863c <__ieee754_pow+0x944>)
   d852e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d8532:	4598      	cmp	r8, r3
   d8534:	f340 8115 	ble.w	d8762 <__ieee754_pow+0xa6a>
   d8538:	4b41      	ldr	r3, [pc, #260]	; (d8640 <__ieee754_pow+0x948>)
   d853a:	440b      	add	r3, r1
   d853c:	4303      	orrs	r3, r0
   d853e:	d10c      	bne.n	d855a <__ieee754_pow+0x862>
   d8540:	4632      	mov	r2, r6
   d8542:	463b      	mov	r3, r7
   d8544:	f000 fb78 	bl	d8c38 <__aeabi_dsub>
   d8548:	4602      	mov	r2, r0
   d854a:	460b      	mov	r3, r1
   d854c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d8550:	f000 ffa2 	bl	d9498 <__aeabi_dcmple>
   d8554:	2800      	cmp	r0, #0
   d8556:	f43f aee6 	beq.w	d8326 <__ieee754_pow+0x62e>
   d855a:	a32f      	add	r3, pc, #188	; (adr r3, d8618 <__ieee754_pow+0x920>)
   d855c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8560:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d8564:	f000 fd1c 	bl	d8fa0 <__aeabi_dmul>
   d8568:	a32b      	add	r3, pc, #172	; (adr r3, d8618 <__ieee754_pow+0x920>)
   d856a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d856e:	f000 fd17 	bl	d8fa0 <__aeabi_dmul>
   d8572:	ec41 0b10 	vmov	d0, r0, r1
   d8576:	e408      	b.n	d7d8a <__ieee754_pow+0x92>
   d8578:	ed9f 7b29 	vldr	d7, [pc, #164]	; d8620 <__ieee754_pow+0x928>
   d857c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8580:	e676      	b.n	d8270 <__ieee754_pow+0x578>
   d8582:	f1b9 0f00 	cmp.w	r9, #0
   d8586:	f6bf ac8e 	bge.w	d7ea6 <__ieee754_pow+0x1ae>
   d858a:	e9dd 3400 	ldrd	r3, r4, [sp]
   d858e:	ee00 3a10 	vmov	s0, r3
   d8592:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d8596:	ee00 3a90 	vmov	s1, r3
   d859a:	f7ff bbf6 	b.w	d7d8a <__ieee754_pow+0x92>
   d859e:	4602      	mov	r2, r0
   d85a0:	460b      	mov	r3, r1
   d85a2:	2000      	movs	r0, #0
   d85a4:	4924      	ldr	r1, [pc, #144]	; (d8638 <__ieee754_pow+0x940>)
   d85a6:	f000 fe25 	bl	d91f4 <__aeabi_ddiv>
   d85aa:	e42d      	b.n	d7e08 <__ieee754_pow+0x110>
   d85ac:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d8628 <__ieee754_pow+0x930>
   d85b0:	ed8d 7b08 	vstr	d7, [sp, #32]
   d85b4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d85b8:	ed9f 7b03 	vldr	d7, [pc, #12]	; d85c8 <__ieee754_pow+0x8d0>
   d85bc:	f04f 0800 	mov.w	r8, #0
   d85c0:	ed8d 7b06 	vstr	d7, [sp, #24]
   d85c4:	e4be      	b.n	d7f44 <__ieee754_pow+0x24c>
   d85c6:	bf00      	nop
   d85c8:	00000000 	.word	0x00000000
   d85cc:	3ff00000 	.word	0x3ff00000
   d85d0:	652b82fe 	.word	0x652b82fe
   d85d4:	3c971547 	.word	0x3c971547
   d85d8:	00000000 	.word	0x00000000
   d85dc:	3fe62e43 	.word	0x3fe62e43
   d85e0:	fefa39ef 	.word	0xfefa39ef
   d85e4:	3fe62e42 	.word	0x3fe62e42
   d85e8:	0ca86c39 	.word	0x0ca86c39
   d85ec:	be205c61 	.word	0xbe205c61
   d85f0:	72bea4d0 	.word	0x72bea4d0
   d85f4:	3e663769 	.word	0x3e663769
   d85f8:	c5d26bf1 	.word	0xc5d26bf1
   d85fc:	3ebbbd41 	.word	0x3ebbbd41
   d8600:	af25de2c 	.word	0xaf25de2c
   d8604:	3f11566a 	.word	0x3f11566a
   d8608:	16bebd93 	.word	0x16bebd93
   d860c:	3f66c16c 	.word	0x3f66c16c
   d8610:	5555553e 	.word	0x5555553e
   d8614:	3fc55555 	.word	0x3fc55555
   d8618:	c2f8f359 	.word	0xc2f8f359
   d861c:	01a56e1f 	.word	0x01a56e1f
   d8620:	00000000 	.word	0x00000000
   d8624:	bff00000 	.word	0xbff00000
	...
   d8630:	408fffff 	.word	0x408fffff
   d8634:	000fffff 	.word	0x000fffff
   d8638:	3ff00000 	.word	0x3ff00000
   d863c:	4090cbff 	.word	0x4090cbff
   d8640:	3f6f3400 	.word	0x3f6f3400
   d8644:	4b6c      	ldr	r3, [pc, #432]	; (d87f8 <__ieee754_pow+0xb00>)
   d8646:	429c      	cmp	r4, r3
   d8648:	f77f ac2a 	ble.w	d7ea0 <__ieee754_pow+0x1a8>
   d864c:	4b6b      	ldr	r3, [pc, #428]	; (d87fc <__ieee754_pow+0xb04>)
   d864e:	429c      	cmp	r4, r3
   d8650:	f73f abc3 	bgt.w	d7dda <__ieee754_pow+0xe2>
   d8654:	2200      	movs	r2, #0
   d8656:	4b69      	ldr	r3, [pc, #420]	; (d87fc <__ieee754_pow+0xb04>)
   d8658:	f000 faee 	bl	d8c38 <__aeabi_dsub>
   d865c:	a356      	add	r3, pc, #344	; (adr r3, d87b8 <__ieee754_pow+0xac0>)
   d865e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8662:	4604      	mov	r4, r0
   d8664:	460d      	mov	r5, r1
   d8666:	f000 fc9b 	bl	d8fa0 <__aeabi_dmul>
   d866a:	a355      	add	r3, pc, #340	; (adr r3, d87c0 <__ieee754_pow+0xac8>)
   d866c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8670:	4680      	mov	r8, r0
   d8672:	4689      	mov	r9, r1
   d8674:	4620      	mov	r0, r4
   d8676:	4629      	mov	r1, r5
   d8678:	f000 fc92 	bl	d8fa0 <__aeabi_dmul>
   d867c:	2200      	movs	r2, #0
   d867e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d8682:	4b5f      	ldr	r3, [pc, #380]	; (d8800 <__ieee754_pow+0xb08>)
   d8684:	4620      	mov	r0, r4
   d8686:	4629      	mov	r1, r5
   d8688:	f000 fc8a 	bl	d8fa0 <__aeabi_dmul>
   d868c:	4602      	mov	r2, r0
   d868e:	460b      	mov	r3, r1
   d8690:	a14d      	add	r1, pc, #308	; (adr r1, d87c8 <__ieee754_pow+0xad0>)
   d8692:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8696:	f000 facf 	bl	d8c38 <__aeabi_dsub>
   d869a:	4622      	mov	r2, r4
   d869c:	462b      	mov	r3, r5
   d869e:	f000 fc7f 	bl	d8fa0 <__aeabi_dmul>
   d86a2:	4602      	mov	r2, r0
   d86a4:	460b      	mov	r3, r1
   d86a6:	2000      	movs	r0, #0
   d86a8:	4956      	ldr	r1, [pc, #344]	; (d8804 <__ieee754_pow+0xb0c>)
   d86aa:	f000 fac5 	bl	d8c38 <__aeabi_dsub>
   d86ae:	4622      	mov	r2, r4
   d86b0:	462b      	mov	r3, r5
   d86b2:	4606      	mov	r6, r0
   d86b4:	460f      	mov	r7, r1
   d86b6:	4620      	mov	r0, r4
   d86b8:	4629      	mov	r1, r5
   d86ba:	f000 fc71 	bl	d8fa0 <__aeabi_dmul>
   d86be:	4602      	mov	r2, r0
   d86c0:	460b      	mov	r3, r1
   d86c2:	4630      	mov	r0, r6
   d86c4:	4639      	mov	r1, r7
   d86c6:	f000 fc6b 	bl	d8fa0 <__aeabi_dmul>
   d86ca:	a341      	add	r3, pc, #260	; (adr r3, d87d0 <__ieee754_pow+0xad8>)
   d86cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d86d0:	f000 fc66 	bl	d8fa0 <__aeabi_dmul>
   d86d4:	4602      	mov	r2, r0
   d86d6:	460b      	mov	r3, r1
   d86d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d86dc:	f000 faac 	bl	d8c38 <__aeabi_dsub>
   d86e0:	4602      	mov	r2, r0
   d86e2:	460b      	mov	r3, r1
   d86e4:	4604      	mov	r4, r0
   d86e6:	460d      	mov	r5, r1
   d86e8:	4640      	mov	r0, r8
   d86ea:	4649      	mov	r1, r9
   d86ec:	f000 faa6 	bl	d8c3c <__adddf3>
   d86f0:	4642      	mov	r2, r8
   d86f2:	464b      	mov	r3, r9
   d86f4:	2000      	movs	r0, #0
   d86f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d86fa:	f000 fa9d 	bl	d8c38 <__aeabi_dsub>
   d86fe:	4602      	mov	r2, r0
   d8700:	460b      	mov	r3, r1
   d8702:	4620      	mov	r0, r4
   d8704:	4629      	mov	r1, r5
   d8706:	f000 fa97 	bl	d8c38 <__aeabi_dsub>
   d870a:	4680      	mov	r8, r0
   d870c:	4689      	mov	r9, r1
   d870e:	e5a5      	b.n	d825c <__ieee754_pow+0x564>
   d8710:	4632      	mov	r2, r6
   d8712:	463b      	mov	r3, r7
   d8714:	2000      	movs	r0, #0
   d8716:	4939      	ldr	r1, [pc, #228]	; (d87fc <__ieee754_pow+0xb04>)
   d8718:	f000 fd6c 	bl	d91f4 <__aeabi_ddiv>
   d871c:	ec41 0b10 	vmov	d0, r0, r1
   d8720:	f7ff bb33 	b.w	d7d8a <__ieee754_pow+0x92>
   d8724:	a32c      	add	r3, pc, #176	; (adr r3, d87d8 <__ieee754_pow+0xae0>)
   d8726:	e9d3 2300 	ldrd	r2, r3, [r3]
   d872a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d872e:	f000 fc37 	bl	d8fa0 <__aeabi_dmul>
   d8732:	a329      	add	r3, pc, #164	; (adr r3, d87d8 <__ieee754_pow+0xae0>)
   d8734:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8738:	f000 fc32 	bl	d8fa0 <__aeabi_dmul>
   d873c:	ec41 0b10 	vmov	d0, r0, r1
   d8740:	f7ff bb23 	b.w	d7d8a <__ieee754_pow+0x92>
   d8744:	f1be 0f00 	cmp.w	lr, #0
   d8748:	f47f ab2a 	bne.w	d7da0 <__ieee754_pow+0xa8>
   d874c:	f1c3 0314 	rsb	r3, r3, #20
   d8750:	fa48 f203 	asr.w	r2, r8, r3
   d8754:	fa02 f303 	lsl.w	r3, r2, r3
   d8758:	4598      	cmp	r8, r3
   d875a:	d027      	beq.n	d87ac <__ieee754_pow+0xab4>
   d875c:	46f3      	mov	fp, lr
   d875e:	f7ff baf7 	b.w	d7d50 <__ieee754_pow+0x58>
   d8762:	4b28      	ldr	r3, [pc, #160]	; (d8804 <__ieee754_pow+0xb0c>)
   d8764:	4598      	cmp	r8, r3
   d8766:	f73f adde 	bgt.w	d8326 <__ieee754_pow+0x62e>
   d876a:	e9dd 3400 	ldrd	r3, r4, [sp]
   d876e:	469a      	mov	sl, r3
   d8770:	469b      	mov	fp, r3
   d8772:	e607      	b.n	d8384 <__ieee754_pow+0x68c>
   d8774:	4602      	mov	r2, r0
   d8776:	460b      	mov	r3, r1
   d8778:	f7ff bb89 	b.w	d7e8e <__ieee754_pow+0x196>
   d877c:	ed9f 7b18 	vldr	d7, [pc, #96]	; d87e0 <__ieee754_pow+0xae8>
   d8780:	ed8d 7b08 	vstr	d7, [sp, #32]
   d8784:	ed9f 7b18 	vldr	d7, [pc, #96]	; d87e8 <__ieee754_pow+0xaf0>
   d8788:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d878c:	ed9f 7b18 	vldr	d7, [pc, #96]	; d87f0 <__ieee754_pow+0xaf8>
   d8790:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   d8794:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8798:	f7ff bbd4 	b.w	d7f44 <__ieee754_pow+0x24c>
   d879c:	4658      	mov	r0, fp
   d879e:	ec43 2b10 	vmov	d0, r2, r3
   d87a2:	f000 f9b1 	bl	d8b08 <scalbn>
   d87a6:	ec51 0b10 	vmov	r0, r1, d0
   d87aa:	e69d      	b.n	d84e8 <__ieee754_pow+0x7f0>
   d87ac:	f002 0201 	and.w	r2, r2, #1
   d87b0:	f1c2 0b02 	rsb	fp, r2, #2
   d87b4:	f7ff bacc 	b.w	d7d50 <__ieee754_pow+0x58>
   d87b8:	60000000 	.word	0x60000000
   d87bc:	3ff71547 	.word	0x3ff71547
   d87c0:	f85ddf44 	.word	0xf85ddf44
   d87c4:	3e54ae0b 	.word	0x3e54ae0b
   d87c8:	55555555 	.word	0x55555555
   d87cc:	3fd55555 	.word	0x3fd55555
   d87d0:	652b82fe 	.word	0x652b82fe
   d87d4:	3ff71547 	.word	0x3ff71547
   d87d8:	8800759c 	.word	0x8800759c
   d87dc:	7e37e43c 	.word	0x7e37e43c
   d87e0:	40000000 	.word	0x40000000
   d87e4:	3fe2b803 	.word	0x3fe2b803
   d87e8:	43cfd006 	.word	0x43cfd006
   d87ec:	3e4cfdeb 	.word	0x3e4cfdeb
   d87f0:	00000000 	.word	0x00000000
   d87f4:	3ff80000 	.word	0x3ff80000
   d87f8:	3feffffe 	.word	0x3feffffe
   d87fc:	3ff00000 	.word	0x3ff00000
   d8800:	3fd00000 	.word	0x3fd00000
   d8804:	3fe00000 	.word	0x3fe00000

000d8808 <__ieee754_sqrt>:
   d8808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d880c:	4965      	ldr	r1, [pc, #404]	; (d89a4 <__ieee754_sqrt+0x19c>)
   d880e:	ec55 4b10 	vmov	r4, r5, d0
   d8812:	460e      	mov	r6, r1
   d8814:	4029      	ands	r1, r5
   d8816:	42b1      	cmp	r1, r6
   d8818:	f000 8097 	beq.w	d894a <__ieee754_sqrt+0x142>
   d881c:	2d00      	cmp	r5, #0
   d881e:	462b      	mov	r3, r5
   d8820:	ee10 2a10 	vmov	r2, s0
   d8824:	dd74      	ble.n	d8910 <__ieee754_sqrt+0x108>
   d8826:	152f      	asrs	r7, r5, #20
   d8828:	d07f      	beq.n	d892a <__ieee754_sqrt+0x122>
   d882a:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d882e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d8832:	07f9      	lsls	r1, r7, #31
   d8834:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8838:	d465      	bmi.n	d8906 <__ieee754_sqrt+0xfe>
   d883a:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d883e:	2600      	movs	r6, #0
   d8840:	440b      	add	r3, r1
   d8842:	107f      	asrs	r7, r7, #1
   d8844:	0052      	lsls	r2, r2, #1
   d8846:	46b6      	mov	lr, r6
   d8848:	2016      	movs	r0, #22
   d884a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d884e:	eb0e 0401 	add.w	r4, lr, r1
   d8852:	429c      	cmp	r4, r3
   d8854:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d8858:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d885c:	dc03      	bgt.n	d8866 <__ieee754_sqrt+0x5e>
   d885e:	1b1b      	subs	r3, r3, r4
   d8860:	eb04 0e01 	add.w	lr, r4, r1
   d8864:	440e      	add	r6, r1
   d8866:	3801      	subs	r0, #1
   d8868:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d886c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d8870:	d1ed      	bne.n	d884e <__ieee754_sqrt+0x46>
   d8872:	4684      	mov	ip, r0
   d8874:	2420      	movs	r4, #32
   d8876:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d887a:	e009      	b.n	d8890 <__ieee754_sqrt+0x88>
   d887c:	d020      	beq.n	d88c0 <__ieee754_sqrt+0xb8>
   d887e:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d8882:	3c01      	subs	r4, #1
   d8884:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d8888:	442b      	add	r3, r5
   d888a:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d888e:	d020      	beq.n	d88d2 <__ieee754_sqrt+0xca>
   d8890:	459e      	cmp	lr, r3
   d8892:	eb01 050c 	add.w	r5, r1, ip
   d8896:	daf1      	bge.n	d887c <__ieee754_sqrt+0x74>
   d8898:	2d00      	cmp	r5, #0
   d889a:	eb05 0c01 	add.w	ip, r5, r1
   d889e:	db09      	blt.n	d88b4 <__ieee754_sqrt+0xac>
   d88a0:	46f0      	mov	r8, lr
   d88a2:	4295      	cmp	r5, r2
   d88a4:	ebce 0303 	rsb	r3, lr, r3
   d88a8:	d900      	bls.n	d88ac <__ieee754_sqrt+0xa4>
   d88aa:	3b01      	subs	r3, #1
   d88ac:	1b52      	subs	r2, r2, r5
   d88ae:	4408      	add	r0, r1
   d88b0:	46c6      	mov	lr, r8
   d88b2:	e7e4      	b.n	d887e <__ieee754_sqrt+0x76>
   d88b4:	f1bc 0f00 	cmp.w	ip, #0
   d88b8:	dbf2      	blt.n	d88a0 <__ieee754_sqrt+0x98>
   d88ba:	f10e 0801 	add.w	r8, lr, #1
   d88be:	e7f0      	b.n	d88a2 <__ieee754_sqrt+0x9a>
   d88c0:	4295      	cmp	r5, r2
   d88c2:	d81e      	bhi.n	d8902 <__ieee754_sqrt+0xfa>
   d88c4:	2d00      	cmp	r5, #0
   d88c6:	eb05 0c01 	add.w	ip, r5, r1
   d88ca:	db50      	blt.n	d896e <__ieee754_sqrt+0x166>
   d88cc:	4698      	mov	r8, r3
   d88ce:	2300      	movs	r3, #0
   d88d0:	e7ec      	b.n	d88ac <__ieee754_sqrt+0xa4>
   d88d2:	4313      	orrs	r3, r2
   d88d4:	d004      	beq.n	d88e0 <__ieee754_sqrt+0xd8>
   d88d6:	1c42      	adds	r2, r0, #1
   d88d8:	d04d      	beq.n	d8976 <__ieee754_sqrt+0x16e>
   d88da:	f000 0301 	and.w	r3, r0, #1
   d88de:	4418      	add	r0, r3
   d88e0:	0840      	lsrs	r0, r0, #1
   d88e2:	1071      	asrs	r1, r6, #1
   d88e4:	07f3      	lsls	r3, r6, #31
   d88e6:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d88ea:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d88ee:	bf48      	it	mi
   d88f0:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d88f4:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d88f8:	4602      	mov	r2, r0
   d88fa:	ec43 2b10 	vmov	d0, r2, r3
   d88fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8902:	4673      	mov	r3, lr
   d8904:	e7bb      	b.n	d887e <__ieee754_sqrt+0x76>
   d8906:	005b      	lsls	r3, r3, #1
   d8908:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d890c:	0052      	lsls	r2, r2, #1
   d890e:	e794      	b.n	d883a <__ieee754_sqrt+0x32>
   d8910:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d8914:	4321      	orrs	r1, r4
   d8916:	d028      	beq.n	d896a <__ieee754_sqrt+0x162>
   d8918:	bbad      	cbnz	r5, d8986 <__ieee754_sqrt+0x17e>
   d891a:	462f      	mov	r7, r5
   d891c:	0ad3      	lsrs	r3, r2, #11
   d891e:	3f15      	subs	r7, #21
   d8920:	0552      	lsls	r2, r2, #21
   d8922:	2b00      	cmp	r3, #0
   d8924:	d0fa      	beq.n	d891c <__ieee754_sqrt+0x114>
   d8926:	02dd      	lsls	r5, r3, #11
   d8928:	d428      	bmi.n	d897c <__ieee754_sqrt+0x174>
   d892a:	2100      	movs	r1, #0
   d892c:	e000      	b.n	d8930 <__ieee754_sqrt+0x128>
   d892e:	4601      	mov	r1, r0
   d8930:	005b      	lsls	r3, r3, #1
   d8932:	02dc      	lsls	r4, r3, #11
   d8934:	f101 0001 	add.w	r0, r1, #1
   d8938:	d5f9      	bpl.n	d892e <__ieee754_sqrt+0x126>
   d893a:	f1c0 0420 	rsb	r4, r0, #32
   d893e:	fa22 f404 	lsr.w	r4, r2, r4
   d8942:	4323      	orrs	r3, r4
   d8944:	1a7f      	subs	r7, r7, r1
   d8946:	4082      	lsls	r2, r0
   d8948:	e76f      	b.n	d882a <__ieee754_sqrt+0x22>
   d894a:	ee10 2a10 	vmov	r2, s0
   d894e:	462b      	mov	r3, r5
   d8950:	ee10 0a10 	vmov	r0, s0
   d8954:	4629      	mov	r1, r5
   d8956:	f000 fb23 	bl	d8fa0 <__aeabi_dmul>
   d895a:	4622      	mov	r2, r4
   d895c:	462b      	mov	r3, r5
   d895e:	f000 f96d 	bl	d8c3c <__adddf3>
   d8962:	ec41 0b10 	vmov	d0, r0, r1
   d8966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d896a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d896e:	f1bc 0f00 	cmp.w	ip, #0
   d8972:	daa2      	bge.n	d88ba <__ieee754_sqrt+0xb2>
   d8974:	e7aa      	b.n	d88cc <__ieee754_sqrt+0xc4>
   d8976:	3601      	adds	r6, #1
   d8978:	4620      	mov	r0, r4
   d897a:	e7b2      	b.n	d88e2 <__ieee754_sqrt+0xda>
   d897c:	2420      	movs	r4, #32
   d897e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d8982:	2000      	movs	r0, #0
   d8984:	e7db      	b.n	d893e <__ieee754_sqrt+0x136>
   d8986:	ee10 2a10 	vmov	r2, s0
   d898a:	462b      	mov	r3, r5
   d898c:	4620      	mov	r0, r4
   d898e:	4629      	mov	r1, r5
   d8990:	f000 f952 	bl	d8c38 <__aeabi_dsub>
   d8994:	4602      	mov	r2, r0
   d8996:	460b      	mov	r3, r1
   d8998:	f000 fc2c 	bl	d91f4 <__aeabi_ddiv>
   d899c:	ec41 0b10 	vmov	d0, r0, r1
   d89a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d89a4:	7ff00000 	.word	0x7ff00000

000d89a8 <fabs>:
   d89a8:	ec53 2b10 	vmov	r2, r3, d0
   d89ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d89b0:	ec43 2b10 	vmov	d0, r2, r3
   d89b4:	4770      	bx	lr
   d89b6:	bf00      	nop

000d89b8 <finite>:
   d89b8:	ee10 3a90 	vmov	r3, s1
   d89bc:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   d89c0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d89c4:	0fc0      	lsrs	r0, r0, #31
   d89c6:	4770      	bx	lr

000d89c8 <matherr>:
   d89c8:	2000      	movs	r0, #0
   d89ca:	4770      	bx	lr
   d89cc:	0000      	movs	r0, r0
	...

000d89d0 <nan>:
   d89d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; d89d8 <nan+0x8>
   d89d4:	4770      	bx	lr
   d89d6:	bf00      	nop
   d89d8:	00000000 	.word	0x00000000
   d89dc:	7ff80000 	.word	0x7ff80000

000d89e0 <rint>:
   d89e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d89e2:	ec53 2b10 	vmov	r2, r3, d0
   d89e6:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d89ea:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d89ee:	2813      	cmp	r0, #19
   d89f0:	b083      	sub	sp, #12
   d89f2:	4619      	mov	r1, r3
   d89f4:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d89f8:	ee10 5a10 	vmov	r5, s0
   d89fc:	dc2f      	bgt.n	d8a5e <rint+0x7e>
   d89fe:	2800      	cmp	r0, #0
   d8a00:	db49      	blt.n	d8a96 <rint+0xb6>
   d8a02:	4e3f      	ldr	r6, [pc, #252]	; (d8b00 <rint+0x120>)
   d8a04:	4106      	asrs	r6, r0
   d8a06:	ea03 0706 	and.w	r7, r3, r6
   d8a0a:	4317      	orrs	r7, r2
   d8a0c:	d02c      	beq.n	d8a68 <rint+0x88>
   d8a0e:	0876      	lsrs	r6, r6, #1
   d8a10:	4033      	ands	r3, r6
   d8a12:	431d      	orrs	r5, r3
   d8a14:	d00c      	beq.n	d8a30 <rint+0x50>
   d8a16:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d8a1a:	2813      	cmp	r0, #19
   d8a1c:	ea21 0606 	bic.w	r6, r1, r6
   d8a20:	fa43 f100 	asr.w	r1, r3, r0
   d8a24:	ea41 0106 	orr.w	r1, r1, r6
   d8a28:	bf0c      	ite	eq
   d8a2a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d8a2e:	2500      	movne	r5, #0
   d8a30:	4834      	ldr	r0, [pc, #208]	; (d8b04 <rint+0x124>)
   d8a32:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d8a36:	462a      	mov	r2, r5
   d8a38:	e9d4 4500 	ldrd	r4, r5, [r4]
   d8a3c:	4610      	mov	r0, r2
   d8a3e:	462b      	mov	r3, r5
   d8a40:	4622      	mov	r2, r4
   d8a42:	f000 f8fb 	bl	d8c3c <__adddf3>
   d8a46:	e9cd 0100 	strd	r0, r1, [sp]
   d8a4a:	4622      	mov	r2, r4
   d8a4c:	462b      	mov	r3, r5
   d8a4e:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8a52:	f000 f8f1 	bl	d8c38 <__aeabi_dsub>
   d8a56:	ec41 0b10 	vmov	d0, r0, r1
   d8a5a:	b003      	add	sp, #12
   d8a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8a5e:	2833      	cmp	r0, #51	; 0x33
   d8a60:	dd06      	ble.n	d8a70 <rint+0x90>
   d8a62:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d8a66:	d042      	beq.n	d8aee <rint+0x10e>
   d8a68:	ec43 2b10 	vmov	d0, r2, r3
   d8a6c:	b003      	add	sp, #12
   d8a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8a70:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d8a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8a78:	40f0      	lsrs	r0, r6
   d8a7a:	4202      	tst	r2, r0
   d8a7c:	d0f4      	beq.n	d8a68 <rint+0x88>
   d8a7e:	0840      	lsrs	r0, r0, #1
   d8a80:	4202      	tst	r2, r0
   d8a82:	d0d5      	beq.n	d8a30 <rint+0x50>
   d8a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d8a88:	ea25 0000 	bic.w	r0, r5, r0
   d8a8c:	fa43 f606 	asr.w	r6, r3, r6
   d8a90:	ea46 0500 	orr.w	r5, r6, r0
   d8a94:	e7cc      	b.n	d8a30 <rint+0x50>
   d8a96:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d8a9a:	4310      	orrs	r0, r2
   d8a9c:	ee10 7a10 	vmov	r7, s0
   d8aa0:	d0e2      	beq.n	d8a68 <rint+0x88>
   d8aa2:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d8aa6:	4307      	orrs	r7, r0
   d8aa8:	4278      	negs	r0, r7
   d8aaa:	4307      	orrs	r7, r0
   d8aac:	4815      	ldr	r0, [pc, #84]	; (d8b04 <rint+0x124>)
   d8aae:	0c59      	lsrs	r1, r3, #17
   d8ab0:	0b3f      	lsrs	r7, r7, #12
   d8ab2:	0449      	lsls	r1, r1, #17
   d8ab4:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   d8ab8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d8abc:	ea47 0301 	orr.w	r3, r7, r1
   d8ac0:	e9d0 6700 	ldrd	r6, r7, [r0]
   d8ac4:	4619      	mov	r1, r3
   d8ac6:	4610      	mov	r0, r2
   d8ac8:	463b      	mov	r3, r7
   d8aca:	4632      	mov	r2, r6
   d8acc:	f000 f8b6 	bl	d8c3c <__adddf3>
   d8ad0:	e9cd 0100 	strd	r0, r1, [sp]
   d8ad4:	463b      	mov	r3, r7
   d8ad6:	4632      	mov	r2, r6
   d8ad8:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8adc:	f000 f8ac 	bl	d8c38 <__aeabi_dsub>
   d8ae0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8ae4:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d8ae8:	ec41 0b10 	vmov	d0, r0, r1
   d8aec:	e7be      	b.n	d8a6c <rint+0x8c>
   d8aee:	ee10 0a10 	vmov	r0, s0
   d8af2:	4619      	mov	r1, r3
   d8af4:	f000 f8a2 	bl	d8c3c <__adddf3>
   d8af8:	ec41 0b10 	vmov	d0, r0, r1
   d8afc:	e7b6      	b.n	d8a6c <rint+0x8c>
   d8afe:	bf00      	nop
   d8b00:	000fffff 	.word	0x000fffff
   d8b04:	000d9e78 	.word	0x000d9e78

000d8b08 <scalbn>:
   d8b08:	ec53 2b10 	vmov	r2, r3, d0
   d8b0c:	b570      	push	{r4, r5, r6, lr}
   d8b0e:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d8b12:	4619      	mov	r1, r3
   d8b14:	4605      	mov	r5, r0
   d8b16:	bb14      	cbnz	r4, d8b5e <scalbn+0x56>
   d8b18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d8b1c:	4311      	orrs	r1, r2
   d8b1e:	d02a      	beq.n	d8b76 <scalbn+0x6e>
   d8b20:	4619      	mov	r1, r3
   d8b22:	2200      	movs	r2, #0
   d8b24:	4b38      	ldr	r3, [pc, #224]	; (d8c08 <scalbn+0x100>)
   d8b26:	4e39      	ldr	r6, [pc, #228]	; (d8c0c <scalbn+0x104>)
   d8b28:	ee10 0a10 	vmov	r0, s0
   d8b2c:	f000 fa38 	bl	d8fa0 <__aeabi_dmul>
   d8b30:	42b5      	cmp	r5, r6
   d8b32:	4602      	mov	r2, r0
   d8b34:	460b      	mov	r3, r1
   d8b36:	db1f      	blt.n	d8b78 <scalbn+0x70>
   d8b38:	f3c1 540a 	ubfx	r4, r1, #20, #11
   d8b3c:	3c36      	subs	r4, #54	; 0x36
   d8b3e:	442c      	add	r4, r5
   d8b40:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d8b44:	4284      	cmp	r4, r0
   d8b46:	dc1f      	bgt.n	d8b88 <scalbn+0x80>
   d8b48:	2c00      	cmp	r4, #0
   d8b4a:	dd2d      	ble.n	d8ba8 <scalbn+0xa0>
   d8b4c:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d8b50:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d8b54:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d8b58:	ec43 2b10 	vmov	d0, r2, r3
   d8b5c:	bd70      	pop	{r4, r5, r6, pc}
   d8b5e:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d8b62:	4284      	cmp	r4, r0
   d8b64:	d1eb      	bne.n	d8b3e <scalbn+0x36>
   d8b66:	ee10 0a10 	vmov	r0, s0
   d8b6a:	4619      	mov	r1, r3
   d8b6c:	f000 f866 	bl	d8c3c <__adddf3>
   d8b70:	ec41 0b10 	vmov	d0, r0, r1
   d8b74:	bd70      	pop	{r4, r5, r6, pc}
   d8b76:	bd70      	pop	{r4, r5, r6, pc}
   d8b78:	a31f      	add	r3, pc, #124	; (adr r3, d8bf8 <scalbn+0xf0>)
   d8b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b7e:	f000 fa0f 	bl	d8fa0 <__aeabi_dmul>
   d8b82:	ec41 0b10 	vmov	d0, r0, r1
   d8b86:	bd70      	pop	{r4, r5, r6, pc}
   d8b88:	ec43 2b11 	vmov	d1, r2, r3
   d8b8c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; d8c00 <scalbn+0xf8>
   d8b90:	f000 f840 	bl	d8c14 <copysign>
   d8b94:	a31a      	add	r3, pc, #104	; (adr r3, d8c00 <scalbn+0xf8>)
   d8b96:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b9a:	ec51 0b10 	vmov	r0, r1, d0
   d8b9e:	f000 f9ff 	bl	d8fa0 <__aeabi_dmul>
   d8ba2:	ec41 0b10 	vmov	d0, r0, r1
   d8ba6:	bd70      	pop	{r4, r5, r6, pc}
   d8ba8:	f114 0f35 	cmn.w	r4, #53	; 0x35
   d8bac:	da13      	bge.n	d8bd6 <scalbn+0xce>
   d8bae:	f24c 3150 	movw	r1, #50000	; 0xc350
   d8bb2:	428d      	cmp	r5, r1
   d8bb4:	ec43 2b11 	vmov	d1, r2, r3
   d8bb8:	dce8      	bgt.n	d8b8c <scalbn+0x84>
   d8bba:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d8bf8 <scalbn+0xf0>
   d8bbe:	f000 f829 	bl	d8c14 <copysign>
   d8bc2:	a30d      	add	r3, pc, #52	; (adr r3, d8bf8 <scalbn+0xf0>)
   d8bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8bc8:	ec51 0b10 	vmov	r0, r1, d0
   d8bcc:	f000 f9e8 	bl	d8fa0 <__aeabi_dmul>
   d8bd0:	ec41 0b10 	vmov	d0, r0, r1
   d8bd4:	bd70      	pop	{r4, r5, r6, pc}
   d8bd6:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d8bda:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d8bde:	3436      	adds	r4, #54	; 0x36
   d8be0:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d8be4:	4610      	mov	r0, r2
   d8be6:	4619      	mov	r1, r3
   d8be8:	2200      	movs	r2, #0
   d8bea:	4b09      	ldr	r3, [pc, #36]	; (d8c10 <scalbn+0x108>)
   d8bec:	f000 f9d8 	bl	d8fa0 <__aeabi_dmul>
   d8bf0:	ec41 0b10 	vmov	d0, r0, r1
   d8bf4:	bd70      	pop	{r4, r5, r6, pc}
   d8bf6:	bf00      	nop
   d8bf8:	c2f8f359 	.word	0xc2f8f359
   d8bfc:	01a56e1f 	.word	0x01a56e1f
   d8c00:	8800759c 	.word	0x8800759c
   d8c04:	7e37e43c 	.word	0x7e37e43c
   d8c08:	43500000 	.word	0x43500000
   d8c0c:	ffff3cb0 	.word	0xffff3cb0
   d8c10:	3c900000 	.word	0x3c900000

000d8c14 <copysign>:
   d8c14:	ec53 2b10 	vmov	r2, r3, d0
   d8c18:	ee11 0a90 	vmov	r0, s3
   d8c1c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d8c20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   d8c24:	ea41 0300 	orr.w	r3, r1, r0
   d8c28:	ec43 2b10 	vmov	d0, r2, r3
   d8c2c:	4770      	bx	lr
   d8c2e:	bf00      	nop

000d8c30 <__aeabi_drsub>:
   d8c30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8c34:	e002      	b.n	d8c3c <__adddf3>
   d8c36:	bf00      	nop

000d8c38 <__aeabi_dsub>:
   d8c38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8c3c <__adddf3>:
   d8c3c:	b530      	push	{r4, r5, lr}
   d8c3e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8c42:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8c46:	ea94 0f05 	teq	r4, r5
   d8c4a:	bf08      	it	eq
   d8c4c:	ea90 0f02 	teqeq	r0, r2
   d8c50:	bf1f      	itttt	ne
   d8c52:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8c56:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8c5a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8c5e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8c62:	f000 80e2 	beq.w	d8e2a <__adddf3+0x1ee>
   d8c66:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8c6a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8c6e:	bfb8      	it	lt
   d8c70:	426d      	neglt	r5, r5
   d8c72:	dd0c      	ble.n	d8c8e <__adddf3+0x52>
   d8c74:	442c      	add	r4, r5
   d8c76:	ea80 0202 	eor.w	r2, r0, r2
   d8c7a:	ea81 0303 	eor.w	r3, r1, r3
   d8c7e:	ea82 0000 	eor.w	r0, r2, r0
   d8c82:	ea83 0101 	eor.w	r1, r3, r1
   d8c86:	ea80 0202 	eor.w	r2, r0, r2
   d8c8a:	ea81 0303 	eor.w	r3, r1, r3
   d8c8e:	2d36      	cmp	r5, #54	; 0x36
   d8c90:	bf88      	it	hi
   d8c92:	bd30      	pophi	{r4, r5, pc}
   d8c94:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8c98:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8c9c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8ca0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8ca4:	d002      	beq.n	d8cac <__adddf3+0x70>
   d8ca6:	4240      	negs	r0, r0
   d8ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8cac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8cb0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8cb4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8cb8:	d002      	beq.n	d8cc0 <__adddf3+0x84>
   d8cba:	4252      	negs	r2, r2
   d8cbc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8cc0:	ea94 0f05 	teq	r4, r5
   d8cc4:	f000 80a7 	beq.w	d8e16 <__adddf3+0x1da>
   d8cc8:	f1a4 0401 	sub.w	r4, r4, #1
   d8ccc:	f1d5 0e20 	rsbs	lr, r5, #32
   d8cd0:	db0d      	blt.n	d8cee <__adddf3+0xb2>
   d8cd2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8cd6:	fa22 f205 	lsr.w	r2, r2, r5
   d8cda:	1880      	adds	r0, r0, r2
   d8cdc:	f141 0100 	adc.w	r1, r1, #0
   d8ce0:	fa03 f20e 	lsl.w	r2, r3, lr
   d8ce4:	1880      	adds	r0, r0, r2
   d8ce6:	fa43 f305 	asr.w	r3, r3, r5
   d8cea:	4159      	adcs	r1, r3
   d8cec:	e00e      	b.n	d8d0c <__adddf3+0xd0>
   d8cee:	f1a5 0520 	sub.w	r5, r5, #32
   d8cf2:	f10e 0e20 	add.w	lr, lr, #32
   d8cf6:	2a01      	cmp	r2, #1
   d8cf8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8cfc:	bf28      	it	cs
   d8cfe:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8d02:	fa43 f305 	asr.w	r3, r3, r5
   d8d06:	18c0      	adds	r0, r0, r3
   d8d08:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8d0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8d10:	d507      	bpl.n	d8d22 <__adddf3+0xe6>
   d8d12:	f04f 0e00 	mov.w	lr, #0
   d8d16:	f1dc 0c00 	rsbs	ip, ip, #0
   d8d1a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8d1e:	eb6e 0101 	sbc.w	r1, lr, r1
   d8d22:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8d26:	d31b      	bcc.n	d8d60 <__adddf3+0x124>
   d8d28:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8d2c:	d30c      	bcc.n	d8d48 <__adddf3+0x10c>
   d8d2e:	0849      	lsrs	r1, r1, #1
   d8d30:	ea5f 0030 	movs.w	r0, r0, rrx
   d8d34:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8d38:	f104 0401 	add.w	r4, r4, #1
   d8d3c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8d40:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8d44:	f080 809a 	bcs.w	d8e7c <__adddf3+0x240>
   d8d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8d4c:	bf08      	it	eq
   d8d4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8d52:	f150 0000 	adcs.w	r0, r0, #0
   d8d56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8d5a:	ea41 0105 	orr.w	r1, r1, r5
   d8d5e:	bd30      	pop	{r4, r5, pc}
   d8d60:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8d64:	4140      	adcs	r0, r0
   d8d66:	eb41 0101 	adc.w	r1, r1, r1
   d8d6a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8d6e:	f1a4 0401 	sub.w	r4, r4, #1
   d8d72:	d1e9      	bne.n	d8d48 <__adddf3+0x10c>
   d8d74:	f091 0f00 	teq	r1, #0
   d8d78:	bf04      	itt	eq
   d8d7a:	4601      	moveq	r1, r0
   d8d7c:	2000      	moveq	r0, #0
   d8d7e:	fab1 f381 	clz	r3, r1
   d8d82:	bf08      	it	eq
   d8d84:	3320      	addeq	r3, #32
   d8d86:	f1a3 030b 	sub.w	r3, r3, #11
   d8d8a:	f1b3 0220 	subs.w	r2, r3, #32
   d8d8e:	da0c      	bge.n	d8daa <__adddf3+0x16e>
   d8d90:	320c      	adds	r2, #12
   d8d92:	dd08      	ble.n	d8da6 <__adddf3+0x16a>
   d8d94:	f102 0c14 	add.w	ip, r2, #20
   d8d98:	f1c2 020c 	rsb	r2, r2, #12
   d8d9c:	fa01 f00c 	lsl.w	r0, r1, ip
   d8da0:	fa21 f102 	lsr.w	r1, r1, r2
   d8da4:	e00c      	b.n	d8dc0 <__adddf3+0x184>
   d8da6:	f102 0214 	add.w	r2, r2, #20
   d8daa:	bfd8      	it	le
   d8dac:	f1c2 0c20 	rsble	ip, r2, #32
   d8db0:	fa01 f102 	lsl.w	r1, r1, r2
   d8db4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8db8:	bfdc      	itt	le
   d8dba:	ea41 010c 	orrle.w	r1, r1, ip
   d8dbe:	4090      	lslle	r0, r2
   d8dc0:	1ae4      	subs	r4, r4, r3
   d8dc2:	bfa2      	ittt	ge
   d8dc4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8dc8:	4329      	orrge	r1, r5
   d8dca:	bd30      	popge	{r4, r5, pc}
   d8dcc:	ea6f 0404 	mvn.w	r4, r4
   d8dd0:	3c1f      	subs	r4, #31
   d8dd2:	da1c      	bge.n	d8e0e <__adddf3+0x1d2>
   d8dd4:	340c      	adds	r4, #12
   d8dd6:	dc0e      	bgt.n	d8df6 <__adddf3+0x1ba>
   d8dd8:	f104 0414 	add.w	r4, r4, #20
   d8ddc:	f1c4 0220 	rsb	r2, r4, #32
   d8de0:	fa20 f004 	lsr.w	r0, r0, r4
   d8de4:	fa01 f302 	lsl.w	r3, r1, r2
   d8de8:	ea40 0003 	orr.w	r0, r0, r3
   d8dec:	fa21 f304 	lsr.w	r3, r1, r4
   d8df0:	ea45 0103 	orr.w	r1, r5, r3
   d8df4:	bd30      	pop	{r4, r5, pc}
   d8df6:	f1c4 040c 	rsb	r4, r4, #12
   d8dfa:	f1c4 0220 	rsb	r2, r4, #32
   d8dfe:	fa20 f002 	lsr.w	r0, r0, r2
   d8e02:	fa01 f304 	lsl.w	r3, r1, r4
   d8e06:	ea40 0003 	orr.w	r0, r0, r3
   d8e0a:	4629      	mov	r1, r5
   d8e0c:	bd30      	pop	{r4, r5, pc}
   d8e0e:	fa21 f004 	lsr.w	r0, r1, r4
   d8e12:	4629      	mov	r1, r5
   d8e14:	bd30      	pop	{r4, r5, pc}
   d8e16:	f094 0f00 	teq	r4, #0
   d8e1a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8e1e:	bf06      	itte	eq
   d8e20:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8e24:	3401      	addeq	r4, #1
   d8e26:	3d01      	subne	r5, #1
   d8e28:	e74e      	b.n	d8cc8 <__adddf3+0x8c>
   d8e2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8e2e:	bf18      	it	ne
   d8e30:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8e34:	d029      	beq.n	d8e8a <__adddf3+0x24e>
   d8e36:	ea94 0f05 	teq	r4, r5
   d8e3a:	bf08      	it	eq
   d8e3c:	ea90 0f02 	teqeq	r0, r2
   d8e40:	d005      	beq.n	d8e4e <__adddf3+0x212>
   d8e42:	ea54 0c00 	orrs.w	ip, r4, r0
   d8e46:	bf04      	itt	eq
   d8e48:	4619      	moveq	r1, r3
   d8e4a:	4610      	moveq	r0, r2
   d8e4c:	bd30      	pop	{r4, r5, pc}
   d8e4e:	ea91 0f03 	teq	r1, r3
   d8e52:	bf1e      	ittt	ne
   d8e54:	2100      	movne	r1, #0
   d8e56:	2000      	movne	r0, #0
   d8e58:	bd30      	popne	{r4, r5, pc}
   d8e5a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8e5e:	d105      	bne.n	d8e6c <__adddf3+0x230>
   d8e60:	0040      	lsls	r0, r0, #1
   d8e62:	4149      	adcs	r1, r1
   d8e64:	bf28      	it	cs
   d8e66:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8e6a:	bd30      	pop	{r4, r5, pc}
   d8e6c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8e70:	bf3c      	itt	cc
   d8e72:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8e76:	bd30      	popcc	{r4, r5, pc}
   d8e78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8e7c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8e80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8e84:	f04f 0000 	mov.w	r0, #0
   d8e88:	bd30      	pop	{r4, r5, pc}
   d8e8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8e8e:	bf1a      	itte	ne
   d8e90:	4619      	movne	r1, r3
   d8e92:	4610      	movne	r0, r2
   d8e94:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8e98:	bf1c      	itt	ne
   d8e9a:	460b      	movne	r3, r1
   d8e9c:	4602      	movne	r2, r0
   d8e9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8ea2:	bf06      	itte	eq
   d8ea4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8ea8:	ea91 0f03 	teqeq	r1, r3
   d8eac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8eb0:	bd30      	pop	{r4, r5, pc}
   d8eb2:	bf00      	nop

000d8eb4 <__aeabi_ui2d>:
   d8eb4:	f090 0f00 	teq	r0, #0
   d8eb8:	bf04      	itt	eq
   d8eba:	2100      	moveq	r1, #0
   d8ebc:	4770      	bxeq	lr
   d8ebe:	b530      	push	{r4, r5, lr}
   d8ec0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8ec4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8ec8:	f04f 0500 	mov.w	r5, #0
   d8ecc:	f04f 0100 	mov.w	r1, #0
   d8ed0:	e750      	b.n	d8d74 <__adddf3+0x138>
   d8ed2:	bf00      	nop

000d8ed4 <__aeabi_i2d>:
   d8ed4:	f090 0f00 	teq	r0, #0
   d8ed8:	bf04      	itt	eq
   d8eda:	2100      	moveq	r1, #0
   d8edc:	4770      	bxeq	lr
   d8ede:	b530      	push	{r4, r5, lr}
   d8ee0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8ee4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8ee8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8eec:	bf48      	it	mi
   d8eee:	4240      	negmi	r0, r0
   d8ef0:	f04f 0100 	mov.w	r1, #0
   d8ef4:	e73e      	b.n	d8d74 <__adddf3+0x138>
   d8ef6:	bf00      	nop

000d8ef8 <__aeabi_f2d>:
   d8ef8:	0042      	lsls	r2, r0, #1
   d8efa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8efe:	ea4f 0131 	mov.w	r1, r1, rrx
   d8f02:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8f06:	bf1f      	itttt	ne
   d8f08:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8f0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8f10:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8f14:	4770      	bxne	lr
   d8f16:	f092 0f00 	teq	r2, #0
   d8f1a:	bf14      	ite	ne
   d8f1c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8f20:	4770      	bxeq	lr
   d8f22:	b530      	push	{r4, r5, lr}
   d8f24:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8f28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8f2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8f30:	e720      	b.n	d8d74 <__adddf3+0x138>
   d8f32:	bf00      	nop

000d8f34 <__aeabi_ul2d>:
   d8f34:	ea50 0201 	orrs.w	r2, r0, r1
   d8f38:	bf08      	it	eq
   d8f3a:	4770      	bxeq	lr
   d8f3c:	b530      	push	{r4, r5, lr}
   d8f3e:	f04f 0500 	mov.w	r5, #0
   d8f42:	e00a      	b.n	d8f5a <__aeabi_l2d+0x16>

000d8f44 <__aeabi_l2d>:
   d8f44:	ea50 0201 	orrs.w	r2, r0, r1
   d8f48:	bf08      	it	eq
   d8f4a:	4770      	bxeq	lr
   d8f4c:	b530      	push	{r4, r5, lr}
   d8f4e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8f52:	d502      	bpl.n	d8f5a <__aeabi_l2d+0x16>
   d8f54:	4240      	negs	r0, r0
   d8f56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8f5a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8f5e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8f62:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8f66:	f43f aedc 	beq.w	d8d22 <__adddf3+0xe6>
   d8f6a:	f04f 0203 	mov.w	r2, #3
   d8f6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8f72:	bf18      	it	ne
   d8f74:	3203      	addne	r2, #3
   d8f76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8f7a:	bf18      	it	ne
   d8f7c:	3203      	addne	r2, #3
   d8f7e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8f82:	f1c2 0320 	rsb	r3, r2, #32
   d8f86:	fa00 fc03 	lsl.w	ip, r0, r3
   d8f8a:	fa20 f002 	lsr.w	r0, r0, r2
   d8f8e:	fa01 fe03 	lsl.w	lr, r1, r3
   d8f92:	ea40 000e 	orr.w	r0, r0, lr
   d8f96:	fa21 f102 	lsr.w	r1, r1, r2
   d8f9a:	4414      	add	r4, r2
   d8f9c:	e6c1      	b.n	d8d22 <__adddf3+0xe6>
   d8f9e:	bf00      	nop

000d8fa0 <__aeabi_dmul>:
   d8fa0:	b570      	push	{r4, r5, r6, lr}
   d8fa2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8fa6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8faa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8fae:	bf1d      	ittte	ne
   d8fb0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8fb4:	ea94 0f0c 	teqne	r4, ip
   d8fb8:	ea95 0f0c 	teqne	r5, ip
   d8fbc:	f000 f8de 	bleq	d917c <__aeabi_dmul+0x1dc>
   d8fc0:	442c      	add	r4, r5
   d8fc2:	ea81 0603 	eor.w	r6, r1, r3
   d8fc6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8fca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8fce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8fd2:	bf18      	it	ne
   d8fd4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8fd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8fdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8fe0:	d038      	beq.n	d9054 <__aeabi_dmul+0xb4>
   d8fe2:	fba0 ce02 	umull	ip, lr, r0, r2
   d8fe6:	f04f 0500 	mov.w	r5, #0
   d8fea:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8fee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8ff2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8ff6:	f04f 0600 	mov.w	r6, #0
   d8ffa:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8ffe:	f09c 0f00 	teq	ip, #0
   d9002:	bf18      	it	ne
   d9004:	f04e 0e01 	orrne.w	lr, lr, #1
   d9008:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d900c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d9010:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9014:	d204      	bcs.n	d9020 <__aeabi_dmul+0x80>
   d9016:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d901a:	416d      	adcs	r5, r5
   d901c:	eb46 0606 	adc.w	r6, r6, r6
   d9020:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9024:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9028:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d902c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d9030:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9034:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9038:	bf88      	it	hi
   d903a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d903e:	d81e      	bhi.n	d907e <__aeabi_dmul+0xde>
   d9040:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9044:	bf08      	it	eq
   d9046:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d904a:	f150 0000 	adcs.w	r0, r0, #0
   d904e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9052:	bd70      	pop	{r4, r5, r6, pc}
   d9054:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9058:	ea46 0101 	orr.w	r1, r6, r1
   d905c:	ea40 0002 	orr.w	r0, r0, r2
   d9060:	ea81 0103 	eor.w	r1, r1, r3
   d9064:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9068:	bfc2      	ittt	gt
   d906a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d906e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9072:	bd70      	popgt	{r4, r5, r6, pc}
   d9074:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9078:	f04f 0e00 	mov.w	lr, #0
   d907c:	3c01      	subs	r4, #1
   d907e:	f300 80ab 	bgt.w	d91d8 <__aeabi_dmul+0x238>
   d9082:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d9086:	bfde      	ittt	le
   d9088:	2000      	movle	r0, #0
   d908a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d908e:	bd70      	pople	{r4, r5, r6, pc}
   d9090:	f1c4 0400 	rsb	r4, r4, #0
   d9094:	3c20      	subs	r4, #32
   d9096:	da35      	bge.n	d9104 <__aeabi_dmul+0x164>
   d9098:	340c      	adds	r4, #12
   d909a:	dc1b      	bgt.n	d90d4 <__aeabi_dmul+0x134>
   d909c:	f104 0414 	add.w	r4, r4, #20
   d90a0:	f1c4 0520 	rsb	r5, r4, #32
   d90a4:	fa00 f305 	lsl.w	r3, r0, r5
   d90a8:	fa20 f004 	lsr.w	r0, r0, r4
   d90ac:	fa01 f205 	lsl.w	r2, r1, r5
   d90b0:	ea40 0002 	orr.w	r0, r0, r2
   d90b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d90b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d90bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d90c0:	fa21 f604 	lsr.w	r6, r1, r4
   d90c4:	eb42 0106 	adc.w	r1, r2, r6
   d90c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d90cc:	bf08      	it	eq
   d90ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d90d2:	bd70      	pop	{r4, r5, r6, pc}
   d90d4:	f1c4 040c 	rsb	r4, r4, #12
   d90d8:	f1c4 0520 	rsb	r5, r4, #32
   d90dc:	fa00 f304 	lsl.w	r3, r0, r4
   d90e0:	fa20 f005 	lsr.w	r0, r0, r5
   d90e4:	fa01 f204 	lsl.w	r2, r1, r4
   d90e8:	ea40 0002 	orr.w	r0, r0, r2
   d90ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d90f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d90f4:	f141 0100 	adc.w	r1, r1, #0
   d90f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d90fc:	bf08      	it	eq
   d90fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9102:	bd70      	pop	{r4, r5, r6, pc}
   d9104:	f1c4 0520 	rsb	r5, r4, #32
   d9108:	fa00 f205 	lsl.w	r2, r0, r5
   d910c:	ea4e 0e02 	orr.w	lr, lr, r2
   d9110:	fa20 f304 	lsr.w	r3, r0, r4
   d9114:	fa01 f205 	lsl.w	r2, r1, r5
   d9118:	ea43 0302 	orr.w	r3, r3, r2
   d911c:	fa21 f004 	lsr.w	r0, r1, r4
   d9120:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9124:	fa21 f204 	lsr.w	r2, r1, r4
   d9128:	ea20 0002 	bic.w	r0, r0, r2
   d912c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9130:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9134:	bf08      	it	eq
   d9136:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d913a:	bd70      	pop	{r4, r5, r6, pc}
   d913c:	f094 0f00 	teq	r4, #0
   d9140:	d10f      	bne.n	d9162 <__aeabi_dmul+0x1c2>
   d9142:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9146:	0040      	lsls	r0, r0, #1
   d9148:	eb41 0101 	adc.w	r1, r1, r1
   d914c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9150:	bf08      	it	eq
   d9152:	3c01      	subeq	r4, #1
   d9154:	d0f7      	beq.n	d9146 <__aeabi_dmul+0x1a6>
   d9156:	ea41 0106 	orr.w	r1, r1, r6
   d915a:	f095 0f00 	teq	r5, #0
   d915e:	bf18      	it	ne
   d9160:	4770      	bxne	lr
   d9162:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9166:	0052      	lsls	r2, r2, #1
   d9168:	eb43 0303 	adc.w	r3, r3, r3
   d916c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9170:	bf08      	it	eq
   d9172:	3d01      	subeq	r5, #1
   d9174:	d0f7      	beq.n	d9166 <__aeabi_dmul+0x1c6>
   d9176:	ea43 0306 	orr.w	r3, r3, r6
   d917a:	4770      	bx	lr
   d917c:	ea94 0f0c 	teq	r4, ip
   d9180:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9184:	bf18      	it	ne
   d9186:	ea95 0f0c 	teqne	r5, ip
   d918a:	d00c      	beq.n	d91a6 <__aeabi_dmul+0x206>
   d918c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9190:	bf18      	it	ne
   d9192:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9196:	d1d1      	bne.n	d913c <__aeabi_dmul+0x19c>
   d9198:	ea81 0103 	eor.w	r1, r1, r3
   d919c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d91a0:	f04f 0000 	mov.w	r0, #0
   d91a4:	bd70      	pop	{r4, r5, r6, pc}
   d91a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d91aa:	bf06      	itte	eq
   d91ac:	4610      	moveq	r0, r2
   d91ae:	4619      	moveq	r1, r3
   d91b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d91b4:	d019      	beq.n	d91ea <__aeabi_dmul+0x24a>
   d91b6:	ea94 0f0c 	teq	r4, ip
   d91ba:	d102      	bne.n	d91c2 <__aeabi_dmul+0x222>
   d91bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d91c0:	d113      	bne.n	d91ea <__aeabi_dmul+0x24a>
   d91c2:	ea95 0f0c 	teq	r5, ip
   d91c6:	d105      	bne.n	d91d4 <__aeabi_dmul+0x234>
   d91c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d91cc:	bf1c      	itt	ne
   d91ce:	4610      	movne	r0, r2
   d91d0:	4619      	movne	r1, r3
   d91d2:	d10a      	bne.n	d91ea <__aeabi_dmul+0x24a>
   d91d4:	ea81 0103 	eor.w	r1, r1, r3
   d91d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d91dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d91e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d91e4:	f04f 0000 	mov.w	r0, #0
   d91e8:	bd70      	pop	{r4, r5, r6, pc}
   d91ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d91ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d91f2:	bd70      	pop	{r4, r5, r6, pc}

000d91f4 <__aeabi_ddiv>:
   d91f4:	b570      	push	{r4, r5, r6, lr}
   d91f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d91fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d91fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9202:	bf1d      	ittte	ne
   d9204:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9208:	ea94 0f0c 	teqne	r4, ip
   d920c:	ea95 0f0c 	teqne	r5, ip
   d9210:	f000 f8a7 	bleq	d9362 <__aeabi_ddiv+0x16e>
   d9214:	eba4 0405 	sub.w	r4, r4, r5
   d9218:	ea81 0e03 	eor.w	lr, r1, r3
   d921c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9220:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9224:	f000 8088 	beq.w	d9338 <__aeabi_ddiv+0x144>
   d9228:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d922c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9230:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9234:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9238:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d923c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9240:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9244:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9248:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d924c:	429d      	cmp	r5, r3
   d924e:	bf08      	it	eq
   d9250:	4296      	cmpeq	r6, r2
   d9252:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d9256:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d925a:	d202      	bcs.n	d9262 <__aeabi_ddiv+0x6e>
   d925c:	085b      	lsrs	r3, r3, #1
   d925e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9262:	1ab6      	subs	r6, r6, r2
   d9264:	eb65 0503 	sbc.w	r5, r5, r3
   d9268:	085b      	lsrs	r3, r3, #1
   d926a:	ea4f 0232 	mov.w	r2, r2, rrx
   d926e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d9272:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d9276:	ebb6 0e02 	subs.w	lr, r6, r2
   d927a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d927e:	bf22      	ittt	cs
   d9280:	1ab6      	subcs	r6, r6, r2
   d9282:	4675      	movcs	r5, lr
   d9284:	ea40 000c 	orrcs.w	r0, r0, ip
   d9288:	085b      	lsrs	r3, r3, #1
   d928a:	ea4f 0232 	mov.w	r2, r2, rrx
   d928e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9292:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9296:	bf22      	ittt	cs
   d9298:	1ab6      	subcs	r6, r6, r2
   d929a:	4675      	movcs	r5, lr
   d929c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d92a0:	085b      	lsrs	r3, r3, #1
   d92a2:	ea4f 0232 	mov.w	r2, r2, rrx
   d92a6:	ebb6 0e02 	subs.w	lr, r6, r2
   d92aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d92ae:	bf22      	ittt	cs
   d92b0:	1ab6      	subcs	r6, r6, r2
   d92b2:	4675      	movcs	r5, lr
   d92b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d92b8:	085b      	lsrs	r3, r3, #1
   d92ba:	ea4f 0232 	mov.w	r2, r2, rrx
   d92be:	ebb6 0e02 	subs.w	lr, r6, r2
   d92c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d92c6:	bf22      	ittt	cs
   d92c8:	1ab6      	subcs	r6, r6, r2
   d92ca:	4675      	movcs	r5, lr
   d92cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d92d0:	ea55 0e06 	orrs.w	lr, r5, r6
   d92d4:	d018      	beq.n	d9308 <__aeabi_ddiv+0x114>
   d92d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d92da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d92de:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d92e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d92e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d92ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d92ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d92f2:	d1c0      	bne.n	d9276 <__aeabi_ddiv+0x82>
   d92f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d92f8:	d10b      	bne.n	d9312 <__aeabi_ddiv+0x11e>
   d92fa:	ea41 0100 	orr.w	r1, r1, r0
   d92fe:	f04f 0000 	mov.w	r0, #0
   d9302:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9306:	e7b6      	b.n	d9276 <__aeabi_ddiv+0x82>
   d9308:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d930c:	bf04      	itt	eq
   d930e:	4301      	orreq	r1, r0
   d9310:	2000      	moveq	r0, #0
   d9312:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9316:	bf88      	it	hi
   d9318:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d931c:	f63f aeaf 	bhi.w	d907e <__aeabi_dmul+0xde>
   d9320:	ebb5 0c03 	subs.w	ip, r5, r3
   d9324:	bf04      	itt	eq
   d9326:	ebb6 0c02 	subseq.w	ip, r6, r2
   d932a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d932e:	f150 0000 	adcs.w	r0, r0, #0
   d9332:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9336:	bd70      	pop	{r4, r5, r6, pc}
   d9338:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d933c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9340:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9344:	bfc2      	ittt	gt
   d9346:	ebd4 050c 	rsbsgt	r5, r4, ip
   d934a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d934e:	bd70      	popgt	{r4, r5, r6, pc}
   d9350:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9354:	f04f 0e00 	mov.w	lr, #0
   d9358:	3c01      	subs	r4, #1
   d935a:	e690      	b.n	d907e <__aeabi_dmul+0xde>
   d935c:	ea45 0e06 	orr.w	lr, r5, r6
   d9360:	e68d      	b.n	d907e <__aeabi_dmul+0xde>
   d9362:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9366:	ea94 0f0c 	teq	r4, ip
   d936a:	bf08      	it	eq
   d936c:	ea95 0f0c 	teqeq	r5, ip
   d9370:	f43f af3b 	beq.w	d91ea <__aeabi_dmul+0x24a>
   d9374:	ea94 0f0c 	teq	r4, ip
   d9378:	d10a      	bne.n	d9390 <__aeabi_ddiv+0x19c>
   d937a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d937e:	f47f af34 	bne.w	d91ea <__aeabi_dmul+0x24a>
   d9382:	ea95 0f0c 	teq	r5, ip
   d9386:	f47f af25 	bne.w	d91d4 <__aeabi_dmul+0x234>
   d938a:	4610      	mov	r0, r2
   d938c:	4619      	mov	r1, r3
   d938e:	e72c      	b.n	d91ea <__aeabi_dmul+0x24a>
   d9390:	ea95 0f0c 	teq	r5, ip
   d9394:	d106      	bne.n	d93a4 <__aeabi_ddiv+0x1b0>
   d9396:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d939a:	f43f aefd 	beq.w	d9198 <__aeabi_dmul+0x1f8>
   d939e:	4610      	mov	r0, r2
   d93a0:	4619      	mov	r1, r3
   d93a2:	e722      	b.n	d91ea <__aeabi_dmul+0x24a>
   d93a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d93a8:	bf18      	it	ne
   d93aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d93ae:	f47f aec5 	bne.w	d913c <__aeabi_dmul+0x19c>
   d93b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d93b6:	f47f af0d 	bne.w	d91d4 <__aeabi_dmul+0x234>
   d93ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d93be:	f47f aeeb 	bne.w	d9198 <__aeabi_dmul+0x1f8>
   d93c2:	e712      	b.n	d91ea <__aeabi_dmul+0x24a>

000d93c4 <__gedf2>:
   d93c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d93c8:	e006      	b.n	d93d8 <__cmpdf2+0x4>
   d93ca:	bf00      	nop

000d93cc <__ledf2>:
   d93cc:	f04f 0c01 	mov.w	ip, #1
   d93d0:	e002      	b.n	d93d8 <__cmpdf2+0x4>
   d93d2:	bf00      	nop

000d93d4 <__cmpdf2>:
   d93d4:	f04f 0c01 	mov.w	ip, #1
   d93d8:	f84d cd04 	str.w	ip, [sp, #-4]!
   d93dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d93e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d93e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d93e8:	bf18      	it	ne
   d93ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d93ee:	d01b      	beq.n	d9428 <__cmpdf2+0x54>
   d93f0:	b001      	add	sp, #4
   d93f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d93f6:	bf0c      	ite	eq
   d93f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d93fc:	ea91 0f03 	teqne	r1, r3
   d9400:	bf02      	ittt	eq
   d9402:	ea90 0f02 	teqeq	r0, r2
   d9406:	2000      	moveq	r0, #0
   d9408:	4770      	bxeq	lr
   d940a:	f110 0f00 	cmn.w	r0, #0
   d940e:	ea91 0f03 	teq	r1, r3
   d9412:	bf58      	it	pl
   d9414:	4299      	cmppl	r1, r3
   d9416:	bf08      	it	eq
   d9418:	4290      	cmpeq	r0, r2
   d941a:	bf2c      	ite	cs
   d941c:	17d8      	asrcs	r0, r3, #31
   d941e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d9422:	f040 0001 	orr.w	r0, r0, #1
   d9426:	4770      	bx	lr
   d9428:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d942c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9430:	d102      	bne.n	d9438 <__cmpdf2+0x64>
   d9432:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9436:	d107      	bne.n	d9448 <__cmpdf2+0x74>
   d9438:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d943c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9440:	d1d6      	bne.n	d93f0 <__cmpdf2+0x1c>
   d9442:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9446:	d0d3      	beq.n	d93f0 <__cmpdf2+0x1c>
   d9448:	f85d 0b04 	ldr.w	r0, [sp], #4
   d944c:	4770      	bx	lr
   d944e:	bf00      	nop

000d9450 <__aeabi_cdrcmple>:
   d9450:	4684      	mov	ip, r0
   d9452:	4610      	mov	r0, r2
   d9454:	4662      	mov	r2, ip
   d9456:	468c      	mov	ip, r1
   d9458:	4619      	mov	r1, r3
   d945a:	4663      	mov	r3, ip
   d945c:	e000      	b.n	d9460 <__aeabi_cdcmpeq>
   d945e:	bf00      	nop

000d9460 <__aeabi_cdcmpeq>:
   d9460:	b501      	push	{r0, lr}
   d9462:	f7ff ffb7 	bl	d93d4 <__cmpdf2>
   d9466:	2800      	cmp	r0, #0
   d9468:	bf48      	it	mi
   d946a:	f110 0f00 	cmnmi.w	r0, #0
   d946e:	bd01      	pop	{r0, pc}

000d9470 <__aeabi_dcmpeq>:
   d9470:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9474:	f7ff fff4 	bl	d9460 <__aeabi_cdcmpeq>
   d9478:	bf0c      	ite	eq
   d947a:	2001      	moveq	r0, #1
   d947c:	2000      	movne	r0, #0
   d947e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9482:	bf00      	nop

000d9484 <__aeabi_dcmplt>:
   d9484:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9488:	f7ff ffea 	bl	d9460 <__aeabi_cdcmpeq>
   d948c:	bf34      	ite	cc
   d948e:	2001      	movcc	r0, #1
   d9490:	2000      	movcs	r0, #0
   d9492:	f85d fb08 	ldr.w	pc, [sp], #8
   d9496:	bf00      	nop

000d9498 <__aeabi_dcmple>:
   d9498:	f84d ed08 	str.w	lr, [sp, #-8]!
   d949c:	f7ff ffe0 	bl	d9460 <__aeabi_cdcmpeq>
   d94a0:	bf94      	ite	ls
   d94a2:	2001      	movls	r0, #1
   d94a4:	2000      	movhi	r0, #0
   d94a6:	f85d fb08 	ldr.w	pc, [sp], #8
   d94aa:	bf00      	nop

000d94ac <__aeabi_dcmpge>:
   d94ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   d94b0:	f7ff ffce 	bl	d9450 <__aeabi_cdrcmple>
   d94b4:	bf94      	ite	ls
   d94b6:	2001      	movls	r0, #1
   d94b8:	2000      	movhi	r0, #0
   d94ba:	f85d fb08 	ldr.w	pc, [sp], #8
   d94be:	bf00      	nop

000d94c0 <__aeabi_dcmpgt>:
   d94c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d94c4:	f7ff ffc4 	bl	d9450 <__aeabi_cdrcmple>
   d94c8:	bf34      	ite	cc
   d94ca:	2001      	movcc	r0, #1
   d94cc:	2000      	movcs	r0, #0
   d94ce:	f85d fb08 	ldr.w	pc, [sp], #8
   d94d2:	bf00      	nop

000d94d4 <__aeabi_dcmpun>:
   d94d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d94d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d94dc:	d102      	bne.n	d94e4 <__aeabi_dcmpun+0x10>
   d94de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d94e2:	d10a      	bne.n	d94fa <__aeabi_dcmpun+0x26>
   d94e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d94e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d94ec:	d102      	bne.n	d94f4 <__aeabi_dcmpun+0x20>
   d94ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d94f2:	d102      	bne.n	d94fa <__aeabi_dcmpun+0x26>
   d94f4:	f04f 0000 	mov.w	r0, #0
   d94f8:	4770      	bx	lr
   d94fa:	f04f 0001 	mov.w	r0, #1
   d94fe:	4770      	bx	lr

000d9500 <__aeabi_d2iz>:
   d9500:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9504:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9508:	d215      	bcs.n	d9536 <__aeabi_d2iz+0x36>
   d950a:	d511      	bpl.n	d9530 <__aeabi_d2iz+0x30>
   d950c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9510:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9514:	d912      	bls.n	d953c <__aeabi_d2iz+0x3c>
   d9516:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d951a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d951e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9522:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9526:	fa23 f002 	lsr.w	r0, r3, r2
   d952a:	bf18      	it	ne
   d952c:	4240      	negne	r0, r0
   d952e:	4770      	bx	lr
   d9530:	f04f 0000 	mov.w	r0, #0
   d9534:	4770      	bx	lr
   d9536:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d953a:	d105      	bne.n	d9548 <__aeabi_d2iz+0x48>
   d953c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9540:	bf08      	it	eq
   d9542:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9546:	4770      	bx	lr
   d9548:	f04f 0000 	mov.w	r0, #0
   d954c:	4770      	bx	lr
   d954e:	bf00      	nop

000d9550 <__aeabi_d2uiz>:
   d9550:	004a      	lsls	r2, r1, #1
   d9552:	d211      	bcs.n	d9578 <__aeabi_d2uiz+0x28>
   d9554:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9558:	d211      	bcs.n	d957e <__aeabi_d2uiz+0x2e>
   d955a:	d50d      	bpl.n	d9578 <__aeabi_d2uiz+0x28>
   d955c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9560:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9564:	d40e      	bmi.n	d9584 <__aeabi_d2uiz+0x34>
   d9566:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d956a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d956e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9572:	fa23 f002 	lsr.w	r0, r3, r2
   d9576:	4770      	bx	lr
   d9578:	f04f 0000 	mov.w	r0, #0
   d957c:	4770      	bx	lr
   d957e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9582:	d102      	bne.n	d958a <__aeabi_d2uiz+0x3a>
   d9584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9588:	4770      	bx	lr
   d958a:	f04f 0000 	mov.w	r0, #0
   d958e:	4770      	bx	lr

000d9590 <__cxa_atexit>:
   d9590:	b510      	push	{r4, lr}
   d9592:	4c05      	ldr	r4, [pc, #20]	; (d95a8 <__cxa_atexit+0x18>)
   d9594:	4613      	mov	r3, r2
   d9596:	b12c      	cbz	r4, d95a4 <__cxa_atexit+0x14>
   d9598:	460a      	mov	r2, r1
   d959a:	4601      	mov	r1, r0
   d959c:	2002      	movs	r0, #2
   d959e:	f3af 8000 	nop.w
   d95a2:	bd10      	pop	{r4, pc}
   d95a4:	4620      	mov	r0, r4
   d95a6:	bd10      	pop	{r4, pc}
   d95a8:	00000000 	.word	0x00000000

000d95ac <memcpy>:
   d95ac:	b510      	push	{r4, lr}
   d95ae:	1e43      	subs	r3, r0, #1
   d95b0:	440a      	add	r2, r1
   d95b2:	4291      	cmp	r1, r2
   d95b4:	d004      	beq.n	d95c0 <memcpy+0x14>
   d95b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d95ba:	f803 4f01 	strb.w	r4, [r3, #1]!
   d95be:	e7f8      	b.n	d95b2 <memcpy+0x6>
   d95c0:	bd10      	pop	{r4, pc}

000d95c2 <memset>:
   d95c2:	4402      	add	r2, r0
   d95c4:	4603      	mov	r3, r0
   d95c6:	4293      	cmp	r3, r2
   d95c8:	d002      	beq.n	d95d0 <memset+0xe>
   d95ca:	f803 1b01 	strb.w	r1, [r3], #1
   d95ce:	e7fa      	b.n	d95c6 <memset+0x4>
   d95d0:	4770      	bx	lr
	...

000d95d4 <srand>:
   d95d4:	b538      	push	{r3, r4, r5, lr}
   d95d6:	4b12      	ldr	r3, [pc, #72]	; (d9620 <srand+0x4c>)
   d95d8:	681c      	ldr	r4, [r3, #0]
   d95da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d95dc:	4605      	mov	r5, r0
   d95de:	b9d3      	cbnz	r3, d9616 <srand+0x42>
   d95e0:	2018      	movs	r0, #24
   d95e2:	f7fc fe07 	bl	d61f4 <malloc>
   d95e6:	f243 330e 	movw	r3, #13070	; 0x330e
   d95ea:	63a0      	str	r0, [r4, #56]	; 0x38
   d95ec:	8003      	strh	r3, [r0, #0]
   d95ee:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d95f2:	8043      	strh	r3, [r0, #2]
   d95f4:	f241 2334 	movw	r3, #4660	; 0x1234
   d95f8:	8083      	strh	r3, [r0, #4]
   d95fa:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d95fe:	80c3      	strh	r3, [r0, #6]
   d9600:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9604:	8103      	strh	r3, [r0, #8]
   d9606:	2305      	movs	r3, #5
   d9608:	8143      	strh	r3, [r0, #10]
   d960a:	230b      	movs	r3, #11
   d960c:	8183      	strh	r3, [r0, #12]
   d960e:	2201      	movs	r2, #1
   d9610:	2300      	movs	r3, #0
   d9612:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9616:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9618:	2200      	movs	r2, #0
   d961a:	611d      	str	r5, [r3, #16]
   d961c:	615a      	str	r2, [r3, #20]
   d961e:	bd38      	pop	{r3, r4, r5, pc}
   d9620:	2003e2d0 	.word	0x2003e2d0

000d9624 <rand>:
   d9624:	4b19      	ldr	r3, [pc, #100]	; (d968c <rand+0x68>)
   d9626:	b510      	push	{r4, lr}
   d9628:	681c      	ldr	r4, [r3, #0]
   d962a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d962c:	b9d3      	cbnz	r3, d9664 <rand+0x40>
   d962e:	2018      	movs	r0, #24
   d9630:	f7fc fde0 	bl	d61f4 <malloc>
   d9634:	f243 330e 	movw	r3, #13070	; 0x330e
   d9638:	63a0      	str	r0, [r4, #56]	; 0x38
   d963a:	8003      	strh	r3, [r0, #0]
   d963c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9640:	8043      	strh	r3, [r0, #2]
   d9642:	f241 2334 	movw	r3, #4660	; 0x1234
   d9646:	8083      	strh	r3, [r0, #4]
   d9648:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d964c:	80c3      	strh	r3, [r0, #6]
   d964e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9652:	8103      	strh	r3, [r0, #8]
   d9654:	2305      	movs	r3, #5
   d9656:	8143      	strh	r3, [r0, #10]
   d9658:	230b      	movs	r3, #11
   d965a:	8183      	strh	r3, [r0, #12]
   d965c:	2201      	movs	r2, #1
   d965e:	2300      	movs	r3, #0
   d9660:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9664:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d9666:	4c0a      	ldr	r4, [pc, #40]	; (d9690 <rand+0x6c>)
   d9668:	690b      	ldr	r3, [r1, #16]
   d966a:	6948      	ldr	r0, [r1, #20]
   d966c:	4a09      	ldr	r2, [pc, #36]	; (d9694 <rand+0x70>)
   d966e:	435c      	muls	r4, r3
   d9670:	fb02 4000 	mla	r0, r2, r0, r4
   d9674:	fba3 2302 	umull	r2, r3, r3, r2
   d9678:	3201      	adds	r2, #1
   d967a:	4403      	add	r3, r0
   d967c:	f143 0300 	adc.w	r3, r3, #0
   d9680:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d9684:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d9688:	bd10      	pop	{r4, pc}
   d968a:	bf00      	nop
   d968c:	2003e2d0 	.word	0x2003e2d0
   d9690:	5851f42d 	.word	0x5851f42d
   d9694:	4c957f2d 	.word	0x4c957f2d

000d9698 <strcmp>:
   d9698:	f810 2b01 	ldrb.w	r2, [r0], #1
   d969c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d96a0:	2a01      	cmp	r2, #1
   d96a2:	bf28      	it	cs
   d96a4:	429a      	cmpcs	r2, r3
   d96a6:	d0f7      	beq.n	d9698 <strcmp>
   d96a8:	1ad0      	subs	r0, r2, r3
   d96aa:	4770      	bx	lr

000d96ac <strcpy>:
   d96ac:	4603      	mov	r3, r0
   d96ae:	f811 2b01 	ldrb.w	r2, [r1], #1
   d96b2:	f803 2b01 	strb.w	r2, [r3], #1
   d96b6:	2a00      	cmp	r2, #0
   d96b8:	d1f9      	bne.n	d96ae <strcpy+0x2>
   d96ba:	4770      	bx	lr

000d96bc <strlen>:
   d96bc:	4603      	mov	r3, r0
   d96be:	f813 2b01 	ldrb.w	r2, [r3], #1
   d96c2:	2a00      	cmp	r2, #0
   d96c4:	d1fb      	bne.n	d96be <strlen+0x2>
   d96c6:	1a18      	subs	r0, r3, r0
   d96c8:	3801      	subs	r0, #1
   d96ca:	4770      	bx	lr

000d96cc <dynalib_user>:
   d96cc:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d96dc:	0000 0000 732f 6174 7472 7075 2f00 656c     ..../startup./le
   d96ec:	0064 6d2f 746f 726f 2f00 6361 6563 656c     d./motor./accele
   d96fc:	6f72 656d 6574 0072 662f 656c 5378 6e65     rometer./flexSen
   d970c:	6f73 0072 662f 656c 5378 6e65 6f73 5472     sor./flexSensorT
   d971c:	6f77 2f00 6870 746f 636f 6c65 006c 392f     wo./photocell./9
   d972c:	4f44 0046 5453 5241 2d54 5055 4c00 4445     DOF.START-UP.LED
   d973c:	4d00 544f 524f 203a 4100 4752 4e4f 4920     .MOTOR: .ARGON I
   d974c:	2050 4428 4348 2950 203a 2500 2e64 6425     P (DHCP): .%d.%d
   d975c:	252e 2e64 6425 6700 6961 736e 6f5f 6972     .%d.%d.gains_ori
   d976c:	5b67 3a5d 7300 7465 6720 6961 736e 5d5b     g[]:.set gains[]
   d977c:	003a 726f 6769 6e69 6c61 6720 6961 736e     :.original gains
   d978c:	003f 5958 205a 4f43 4e55 5354 203a 5800     ?.XYZ COUNTS: .X
   d979c:	5a59 4720 3a73 0020 6567 5474 7061 6854     YZ Gs: .getTapTh
   d97ac:	6572 6873 6c6f 2864 3a29 0020 6567 4174     reshold(): .getA
   d97bc:	6978 4f73 6666 6573 2874 7826 202c 7926     xisOffset(&x, &y
   d97cc:	202c 7a26 3a29 0020 6567 5474 7061 7544     , &z): .getTapDu
   d97dc:	6172 6974 6e6f 2928 203a 6700 7465 6f44     ration(): .getDo
   d97ec:	6275 656c 6154 4c70 7461 6e65 7963 2928     ubleTapLatency()
   d97fc:	203a 6700 7465 6f44 6275 656c 6154 5770     : .getDoubleTapW
   d980c:	6e69 6f64 2877 2029 6700 7465 6341 6974     indow() .getActi
   d981c:	6976 7974 6854 6572 6873 6c6f 2864 2029     vityThreshold() 
   d982c:	6700 7465 6e49 6361 6974 6976 7974 6854     .getInactivityTh
   d983c:	6572 6873 6c6f 2864 2029 6700 7465 6954     reshold() .getTi
   d984c:	656d 6e49 6361 6974 6976 7974 2928 203a     meInactivity(): 
   d985c:	6700 7465 7246 6565 6146 6c6c 6854 6572     .getFreeFallThre
   d986c:	6873 6c6f 2864 3a29 0020 6567 4674 6572     shold(): .getFre
   d987c:	4665 6c61 446c 7275 7461 6f69 286e 3a29     eFallDuration():
   d988c:	0020 7369 6341 6974 6976 7974 4558 616e      .isActivityXEna
   d989c:	6c62 6465 2928 203a 6900 4173 7463 7669     bled(): .isActiv
   d98ac:	7469 5979 6e45 6261 656c 2864 3a29 0020     ityYEnabled(): .
   d98bc:	7369 6341 6974 6976 7974 455a 616e 6c62     isActivityZEnabl
   d98cc:	6465 2928 203a 6900 4973 616e 7463 7669     ed(): .isInactiv
   d98dc:	7469 5879 6e45 6261 656c 2864 3a29 0020     ityXEnabled(): .
   d98ec:	7369 6e49 6361 6974 6976 7974 4559 616e     isInactivityYEna
   d98fc:	6c62 6465 2928 203a 6900 4973 616e 7463     bled(): .isInact
   d990c:	7669 7469 5a79 6e45 6261 656c 2864 3a29     ivityZEnabled():
   d991c:	0020 7369 6341 6974 6976 7974 6341 2928      .isActivityAc()
   d992c:	203a 6700 7465 7553 7070 6572 7373 6942     : .getSuppressBi
   d993c:	2874 3b29 7420 7572 3f65 0020 6567 5374     t(); true? .getS
   d994c:	7075 7270 7365 4273 7469 2928 203b 6166     uppressBit(); fa
   d995c:	736c 3f65 0020 7369 6154 4470 7465 6365     lse? .isTapDetec
   d996c:	6974 6e6f 6e4f 2858 3b29 7420 7572 3f65     tionOnX(); true?
   d997c:	0020 7369 6154 4470 7465 6365 6974 6e6f      .isTapDetection
   d998c:	6e4f 2858 3b29 6620 6c61 6573 203f 6900     OnX(); false? .i
   d999c:	5473 7061 6544 6574 7463 6f69 4f6e 596e     sTapDetectionOnY
   d99ac:	2928 203b 7274 6575 203f 6900 5473 7061     (); true? .isTap
   d99bc:	6544 6574 7463 6f69 4f6e 596e 2928 203b     DetectionOnY(); 
   d99cc:	6166 736c 3f65 0020 7369 6154 4470 7465     false? .isTapDet
   d99dc:	6365 6974 6e6f 6e4f 285a 3b29 7420 7572     ectionOnZ(); tru
   d99ec:	3f65 0020 7369 6154 4470 7465 6365 6974     e? .isTapDetecti
   d99fc:	6e6f 6e4f 285a 3b29 6620 6c61 6573 203f     onOnZ(); false? 
   d9a0c:	6900 4173 7463 7669 7469 5379 756f 6372     .isActivitySourc
   d9a1c:	4f65 586e 2928 203a 6100 6363 6c65 692e     eOnX(): .accel.i
   d9a2c:	4173 7463 7669 7469 5379 756f 6372 4f65     sActivitySourceO
   d9a3c:	596e 2928 203a 6100 6363 6c65 692e 4173     nY(): .accel.isA
   d9a4c:	7463 7669 7469 5379 756f 6372 4f65 5a6e     ctivitySourceOnZ
   d9a5c:	2928 203a 6100 6363 6c65 692e 5473 7061     (): .accel.isTap
   d9a6c:	6f53 7275 6563 6e4f 2858 3a29 0020 6361     SourceOnX(): .ac
   d9a7c:	6563 2e6c 7369 6154 5370 756f 6372 4f65     cel.isTapSourceO
   d9a8c:	596e 2928 203a 6100 6363 6c65 692e 5473     nY(): .accel.isT
   d9a9c:	7061 6f53 7275 6563 6e4f 285a 3a29 0020     apSourceOnZ(): .
   d9aac:	6361 6563 2e6c 7369 7341 656c 7065 2928     accel.isAsleep()
   d9abc:	203a 6100 6363 6c65 692e 4c73 776f 6f50     : .accel.isLowPo
   d9acc:	6577 2872 3a29 0020 6567 5274 7461 2865     wer(): .getRate(
   d9adc:	3a29 3320 312e 3134 3935 003f 6567 4974     ): 3.14159?.getI
   d9aec:	746e 7265 7572 7470 6f53 7275 6563 2928     nterruptSource()
   d9afc:	203a 6700 7465 6e49 6574 7272 7075 5374     : .getInterruptS
   d9b0c:	756f 6372 2865 2931 203a 6700 7465 6e49     ource(1): .getIn
   d9b1c:	6574 7272 7075 4d74 7061 6970 676e 3128     terruptMapping(1
   d9b2c:	3a29 0020 7369 6e49 6574 7272 7075 4574     ): .isInterruptE
   d9b3c:	616e 6c62 6465 3128 3a29 0020 6567 5374     nabled(1): .getS
   d9b4c:	6c65 5466 7365 4274 7469 2928 203a 4400     elfTestBit(): .D
   d9b5c:	5652 7420 7365 0074 0042 7830 3030 203a     RV test.B.0x00: 
   d9b6c:	3000 0078 3a20 0020 2d0a 2d2d 002d 0000     .0x. : ..----...

000d9b7c <_ZTVN5spark13EthernetClassE>:
	...
   d9b84:	62f5 000d 62eb 000d 62e1 000d 62d7 000d     .b...b...b...b..
   d9b94:	62cb 000d 62bf 000d 62b3 000d 62ab 000d     .b...b...b...b..
   d9ba4:	62a1 000d 6297 000d 6735 000d               .b...b..5g..

000d9bb0 <_ZTV7TwoWire>:
	...
   d9bb8:	6315 000d 635f 000d 6337 000d 6317 000d     .c.._c..7c...c..
   d9bc8:	633f 000d 6347 000d 634f 000d 6357 000d     ?c..Gc..Oc..Wc..

000d9bd8 <_ZTV9IPAddress>:
	...
   d9be0:	6423 000d 40b7 000d 40e9 000d 6162 6475     #d...@...@..baud
   d9bf0:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d9c00:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d9c10:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d9c20:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d9c30:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d9c40:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d9c50:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d9c60:	7070 2500 3130 7530 0020 205d 2c00 0020     pp.%010u .] ., .
   d9c70:	5b20 6300 646f 2065 203d 2500 0069 6564      [.code = .%i.de
   d9c80:	6174 6c69 2073 203d 0d00 000a 6e6c 6600     tails = ....ln.f
   d9c90:	006e 6f63 6564 6400 7465 6961 006c 6f6e     n.code.detail.no
   d9ca0:	656e 7400 6172 6563 6900 666e 006f 6177     ne.trace.info.wa
   d9cb0:	6e72 6500 7272 726f 7000 6e61 6369 6100     rn.error.panic.a
   d9cc0:	6c6c 0000                                   ll..

000d9cc4 <_ZTVN5spark9MeshClassE>:
	...
   d9ccc:	65af 000d 65a5 000d 659b 000d 6591 000d     .e...e...e...e..
   d9cdc:	6585 000d 6579 000d 656d 000d 6565 000d     .e..ye..me..ee..
   d9cec:	655b 000d 6551 000d 6735 000d               [e..Qe..5g..

000d9cf8 <_ZTVN5spark12NetworkClassE>:
	...
   d9d00:	66cd 000d 66d7 000d 66e1 000d 66eb 000d     .f...f...f...f..
   d9d10:	66f5 000d 6701 000d 670d 000d 6719 000d     .f...g...g...g..
   d9d20:	6721 000d 672b 000d 6735 000d 616e 006e     !g..+g..5g..nan.
   d9d30:	766f 0066 002e 6e69 0066 005a 2b25 3330     ovf...inf.Z.%+03
   d9d40:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
   d9d50:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
   d9d60:	656d 0000                                   me..

000d9d64 <_ZTV3UDP>:
	...
   d9d6c:	40b9 000d 40f7 000d 6ca9 000d 6dd3 000d     .@...@...l...m..
   d9d7c:	6ca1 000d 6cbf 000d 6cdd 000d 6cf7 000d     .l...l...l...l..
   d9d8c:	6d1b 000d 6db7 000d 70b9 000d 6e59 000d     .m...m...p..Yn..
   d9d9c:	6fd9 000d 6c89 000d 7199 000d 6f5d 000d     .o...l...q..]o..
   d9dac:	6e91 000d 71c7 000d 6dfd 000d 6c97 000d     .n...q...m...l..
   d9dbc:	6e39 000d 6c9d 000d 6cf9 000d fff0 ffff     9n...l...l......
   d9dcc:	0000 0000 6d13 000d                         .....m..

000d9dd4 <_ZTV11USARTSerial>:
	...
   d9ddc:	7203 000d 7253 000d 7261 000d 6815 000d     .r..Sr..ar...h..
   d9dec:	7217 000d 7239 000d 7225 000d 724d 000d     .r..9r..%r..Mr..
   d9dfc:	7205 000d 7209 000d                         .r...r..

000d9e04 <_ZTV9USBSerial>:
	...
   d9e0c:	7309 000d 7359 000d 7367 000d 6815 000d     .s..Ys..gs...h..
   d9e1c:	7345 000d 730b 000d 7321 000d 7353 000d     Es...s..!s..Ss..
   d9e2c:	7337 000d 7305 000d                         7s...s..

000d9e34 <_ZTVN5spark9WiFiClassE>:
	...
   d9e3c:	747f 000d 7475 000d 746b 000d 7421 000d     .t..ut..kt..!t..
   d9e4c:	745f 000d 7453 000d 7447 000d 743f 000d     _t..St..Gt..?t..
   d9e5c:	7435 000d 742b 000d 6735 000d               5t..+t..5g..

000d9e68 <_ZSt7nothrow>:
   d9e68:	0000 0000 6f70 0077 0000 0000 0000 0000     ....pow.........

000d9e78 <TWO52>:
   d9e78:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000d9e88 <__sf_fake_stdin>:
	...

000d9ea8 <__sf_fake_stdout>:
	...

000d9ec8 <__sf_fake_stderr>:
	...
   d9ee8:	0043                                        C.

000d9eea <link_const_variable_data_end>:
	...

000d9eec <link_constructors_location>:
   d9eec:	000d5085 	.word	0x000d5085
   d9ef0:	000d5277 	.word	0x000d5277
   d9ef4:	000d5971 	.word	0x000d5971
   d9ef8:	000d5d89 	.word	0x000d5d89
   d9efc:	000d625d 	.word	0x000d625d
   d9f00:	000d6301 	.word	0x000d6301
   d9f04:	000d6541 	.word	0x000d6541
   d9f08:	000d667d 	.word	0x000d667d
   d9f0c:	000d6801 	.word	0x000d6801
   d9f10:	000d6ac9 	.word	0x000d6ac9
   d9f14:	000d6c41 	.word	0x000d6c41
   d9f18:	000d6c75 	.word	0x000d6c75
   d9f1c:	000d7489 	.word	0x000d7489
   d9f20:	000d772d 	.word	0x000d772d
   d9f24:	000d77f1 	.word	0x000d77f1
   d9f28:	000d7875 	.word	0x000d7875
   d9f2c:	000d78f9 	.word	0x000d78f9
